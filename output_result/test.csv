body,comments_count,likes_count,stocks_count,tags.0.name,tags.1.name,title,user.description,user.facebook_id,user.followees_count,user.followers_count,user.github_login_name,user.id,user.items_count,user.linkedin_id,user.location,user.name,user.organization,user.permanent_id,user.profile_image_url,user.team_only,user.twitter_screen_name,user.website_url,page_views_count,tags.2.name,tags.3.name,tags.4.name
"## はじめに
いままで`nodist`でnodejsのバージョン管理をしていましたが、どこか使いづらさを感じていました。
`nodist`の最終バージョンはここ２年間の更新がされておらず2019年です。
このまま使い続けるには一抹の不安があるので、この際、`Volta`に乗り換えるために手順をこちらにまとめておこうと思います。

## Nodistのアンインストール
いままで使っていたNodistを削除します。意外としつこく残り続けるのでここでしっかり削除しましょう。
Nodist以外のツールを使用している方もここでしっかり削除します。

### 1. コントロールパネルからアンインストール
コントロールパネルから`Nodist`を探しアンインストールします。
OSの再起動を求められた場合は再起動を行います。

### 2. Nodistフォルダを削除
コントロールパネルから`Nodist`を削除してもNodistのインストール先のフォルダは残ってままになっています。
グローバルインストールしたものなどはここに残ったままなのでフォルダごと削除します。

### 3. npm-cacheフォルダの削除
npmのキャッシュフォルダを削除します。
npm-cacheフォルダは以下に格納されているので探して削除してください。

```
C:\Users\<ユーザー名>\AppData\Roaming\npm-cache
```

`AppData`フォルダは隠しフォルダになっているので注意してください。

### 4. 環境変数の削除
環境変数が設定されているとおもいますので削除します。
`Windowsキー + R`を押下して`ファイル名を指定して実行`を開きます。
`sysdm.cpl`と入力して、システムのプロパティ画面を開き、設定タブから環境変数を押下します。
環境変数画面からNodist関連の環境変数を削除します。
これでNodistの削除は完了です。

## Voltaをインストール
### MacOS

```
curl https://get.volta.sh | bash
```

### Windows
[公式サイト](https://docs.volta.sh/guide/getting-started)からインストーラをダウンロードしてください。
詳細については公式サイトを確認するのが一番信用できるので説明は省きます。

## Voltaの使い方
こちらのコマンドでnodejsがインストールされます。
バージョンは長期サポート（LTS）版。

```
volta install node
```

このnodeバージョンにあったnpmも一緒にインストールされるのでわざわざ別途インストールする必要はありません。
あえてインストールする場合はこちら。

```
volta install npm
```

バージョンを指定してインストールする場合はこちらのコマンドを実行します。

```
volta install node@20

# 最新バージョンをインストールする場合
volta install node@latest
```

インストールしたnodejsやnpmなどのバージョンを確認する時はこちらのコマンド。
実行できないときは開発者モードで行ってみてください。

```
volta install all
```

nodejsのバージョンをプロジェクト固定にするにはこちらのコマンドを実行します。
package.jsonにバージョン情報が記載され管理されます。

```
volta pin node@20
```

```package.json
""volta"": {
  ""node"": ""20.10.0""
}
```

voltaはpackage.jsonのnode情報からnpmのバージョンもあったものをインストールしてくれるので、nodeだけ実行します。
npmのバージョンも明示的に記載しておきたい場合はコマンドを実行してください。

## まとめ
これでvoltaを使いこなせるはずです！
Happy node life!
",0,0,0,Node.js,volta,【Volta】node.jsバージョン管理ツールをVoltaに乗り換える【設定手順】,,,5,2,,futaro0405,7,,,ふーたろ,,3355772,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3355772/f3871aa38c44c9acb7657d5406ba008c919a820d/x_large.png?1698920112,False,ayase_web,,,,,
"# はじめに

MacBookを選ぶ際は、メモリ 8GB、SSD 512GB以上を選びましょう。

# 想定読者

- MacBookが欲しいエンジニア
- 吊るしモデルでいいやと思っている人

# 事象

ストレージ不足で、Dockerを起動しようとしたら以下のエラーが出た。

```
api-dbsrv01           | 2023-12-20T23:22:53.269082Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.
api-dbsrv01           | 2023-12-20T23:22:53.311464Z 1 [ERROR] [MY-012585] [InnoDB] Linux Native AIO interface is not supported on this platform. Please check your OS documentation and install appropriate binary of InnoDB.
api-dbsrv01           | 2023-12-20T23:22:53.312003Z 1 [Warning] [MY-012654] [InnoDB] Linux Native AIO disabled.
```

```
api-dbsrv01           | 2023-12-20T23:25:57.611704Z 1 [ERROR] [MY-011092] [Server] Upgrading the data dictionary from dictionary version '0' is not supported.
api-dbsrv01           | 2023-12-20T23:25:57.615894Z 0 [ERROR] [MY-010020] [Server] Data Dictionary initialization failed.
api-dbsrv01           | 2023-12-20T23:25:57.616713Z 0 [ERROR] [MY-010119] [Server] Aborting
tutorial-go-fr-app-1  | go: downloading github.com/aws/aws-sdk-go v1.49.0
api-dbsrv01           | 2023-12-20T23:25:57.695788Z 0 [System] [MY-010910] [Server] /usr/sbin/mysqld: Shutdown complete (mysqld 8.0.29)  MySQL Community Server - GPL.
api-dbsrv01 exited with code 1
```

```
api-dbsrv01           | 2023-12-20T23:30:36.038352Z 0 [System] [MY-013169] [Server] /usr/sbin/mysqld (mysqld 8.0.29) initializing of server in progress as process 100
api-dbsrv01           | mysqld: Error writing file '/var/lib/mysql/auto.cnf' (OS errno 28 - No space left on device)
api-dbsrv01           | 2023-12-20T23:30:36.089122Z 0 [ERROR] [MY-010076] [Server] Initialization of the server's UUID failed because it could not be read from the auto.cnf file. If this is a new server, the initialization failed because it was not possible to generate a new UUID.
api-dbsrv01           | 2023-12-20T23:30:36.089685Z 0 [ERROR] [MY-013236] [Server] The designated data directory /var/lib/mysql/ is unusable. You can remove all files that the server added to it.
api-dbsrv01           | 2023-12-20T23:30:36.091659Z 0 [ERROR] [MY-010119] [Server] Aborting
api-dbsrv01           | 2023-12-20T23:30:36.099581Z 0 [System] [MY-010910] [Server] /usr/sbin/mysqld: Shutdown complete (mysqld 8.0.29)  MySQL Community Server - GPL.
```

# 一時的な解決策

- 不要なアプリを削除する
- 不要なdocker imageを削除する
- 不要なdocker volumeを削除する
- 不要なnode_modulesを削除する

![スクリーンショット 2023-12-21 21.03.32.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1312905/2863ac6c-76cb-704f-3d01-0e875c1bfde4.png)

<br>

私の場合は、以下を削除して対応しました。

- Unityを削除した
- 不要なdocker imageを削除する

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1312905/01c5a36a-7fa7-b3dd-a92d-999893a5fbe1.png)

- 不要なdocker volumeを削除する

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1312905/a88710a0-c630-7378-b6b4-10440f448619.png)


# 学び

- MacBookを買うときは、512GB以上を買う

# おまけ

M1 MacBookair メモリ8GBで5分間隔でcronにtopを取得するようにして、2021/7/4 〜 2023/4/22までの期間で集計した結果以下のようになりました。ほぼ、メモリ使用率90%以上で、仮想メモリもガンガンに使っている状況でした。基本的に、ブラウザは、GoogleChrome、docker立ち上げっぱなし、な環境で使用しておりました。

縦軸：メモリ使用率
横軸：タイムスタンプ

![output.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1312905/f10d2a44-c3f4-140d-3d5f-7d96b37c84f7.png)


# まとめ

急に、dockerのエラーが出て、DBのコンテナが立ち上がらなくなったので、なんでだろうと調べてみたら
ストレージ不足が原因でした。MacBookを買うときは、512GB以上のストレージを買うこと。メモリも16GB以上がいいよ.

ご覧いただきありがとうございました。よろしければ、いいね、フォローよろしくお願いいたします。
",0,0,0,Mac,Docker,Macのストレージは512GB以上を買おうと言う話,"新卒4年目のSEです。ミドルウェアとアプリの中間の人です。
サーバ好き。",,4,1,,o-ga,14,,東京,オーガ,,1312905,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/1312905/8c7030576aca9e1aa38b73bf8f6b0ce7efd4a2df/large.png?1618233422,False,,,,,,
"### Projevt Euler Ploblem 12 (プロジェクトオイラー１２)
#### Highly Divisible Triangular Number

Project Euler 12を解いたので、備忘のために残しておく。 
Python と Julia のコードを両方かいた(下段)
処理速度はJuliaの方がずっと速い。

自分のPCだと 
Pythonが 約5.8秒
Julia が 約1.4秒
だった。

問題文（適当な和訳なので、完全に正しいかはわからない。。。）
三角数の数列は自然数の足していくことによってできる。
７番目の三角数は1 + 2 + 3 + 4 + 5 + 7 = 28 となる。
初めの１０項は1,3,6,10,15,21,28,36,45,55....となる。
7項目までの三角数の要素を並べると以下のようになる。
1:1
3:1,3
6:1,2,3,6
10:1,2,5,10
15:1,3,5,15
21:1,3,7,21
28:1,2,4,7,14,28
28は約数の数が5個を超える最初の三角数だとわかる。
約数の数が500個を超える最初の三角数の値は？
#### 答え：76576500

問題文（原文）
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 7 = 28 
The first ten terms would be:1,3,6,10,15,21,28,36,45,55....

Let us list the factors of the first seven triangle numbers:
1:1
3:1,3
6:1,2,3,6
10:1,2,5,10
15:1,3,5,15
21:1,3,7,21
28:1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

求め方の方針は
約数を求める関数(divisors) と
三角数の値を求める関数(triangle_number) を作り、
三角数の値を約数を求める関数の引数として、約数の個数が500を超えるまで三角数の１番目から計算(seek_answer)。

以下Python のコード（処理時間を計測するコードも書いてある)
```Python:Ploblem12(Python)
import time
start = time.time() 
 
def divisors(num: int) -> int:
    count: int = 0
    for i in range(1, int(num**0.5) + 1):
        if num % i != 0:
            continue
        else:
            count += 1
            if num // i != i:
                count += 1
    return count

def triangle_number(n: int) -> int:
    sum: int = 0
    for i in range(1,n + 1):
       sum += i 
    return sum

def seek_answer(d: int) -> int:
    ans: int = 1
    i: int = 1
    while divisors(ans) < d:
        ans = triangle_number(i)
        i += 1    
    return ans

d = 500
print(seek_answer(d))

end = time.time()
 
print(f""処理時時間：{end - start}"")

```

以下Juliaのコード（処理時間を計測するコードも書いてある)
```Julia:Ploblem12(Julia)
using Dates

start = Dates.now()

function divisors(num::Int64)::Int64
    count::Int64 = 0
    for i in 1:ceil(sqrt(num))
        if num % i != 0
            continue
        else
            count += 1
            if num ÷ i != i
                count += 1
            end
        end
    end
    return count
end

function triangle_number(n::Int64)::Int64
    sum::Int64 = 0
    for i in 1:n
        sum += i
    end
    return sum
end

function seek_answer(d::Int64)::Int64
    ans::Int64 = 1
    i::Int64 = 1
    while divisors(ans) < d
        ans = triangle_number(i)
        i += 1
    end
    return ans
end

d::Int64 = 500
println(seek_answer(d))
endtime = now()
println(""処理時間："", endtime - start)

```
",0,0,0,初心者,ProjectEuler,[Python][Julia]project euler 12 (プロジェクトオイラー１２)  ,,,1,0,,fujihop,1,,,,,3532050,https://secure.gravatar.com/avatar/962b5c3ecd81c0ad4cba035d91578f83,False,,,,Python3,Julia,
"初心者です。  
AndroidStudioでMaterial3なカルーセルを作りたああああああああああああああい！！  
ということで作っていきます。  

# 完成した物  
![レコーディング-2023-12-21-223958.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3634181/f4aca775-79d7-55fa-6064-f27d5f9daf79.gif)
https://github.com/SousiOmine/Material3_Carousel_demo

# 参考にした資料  
https://www.youtube.com/watch?v=nV48OJQvvIc  
Atriiという方の解説動画です  
https://github.com/material-components/material-components-android/blob/master/docs/components/Carousel.md  
公式ドキュメントです  

# コピペで作っていく  

Material_Carouselという名前で新規プロジェクトを作成しました。  
試しにビルドしようとするとエラー発生！  
何もしていないのに壊れた！  
```error:エラーログ
An issue was found when checking AAR metadata:

  1.  Dependency 'androidx.activity:activity:1.8.0' requires libraries and applications that
      depend on it to compile against version 34 or later of the
      Android APIs.

      :app is currently compiled against android-33.

      Also, the maximum recommended compile SDK version for Android Gradle
      plugin 7.4.2 is 33.

      Recommended action: Update this project's version of the Android Gradle
      plugin to one that supports 34, then update this project to use
      compileSdkVerion of at least 34.

      Note that updating a library or application's compileSdkVersion (which
      allows newer APIs to be used) can be done separately from updating
      targetSdkVersion (which opts the app in to new runtime behavior) and
      minSdkVersion (which determines which devices the app can be installed
      on).
```
なんでテンプレのままなのに動かないんだよ〇〇〇！  
Gradleのバージョンを上げてcomplineSdkVersionを上げろと書いてありますがGradleは後回しにしても多分動くので  
build.gradle(app)を  
```gradle:build.gradle(app)
android {
    namespace 'com.example.material_carousel'
    //compileSdk 33
    compileSdk 34

    defaultConfig {
        applicationId ""com.example.material_carousel""
        minSdk 24
        //targetSdk 33
        targetSdk 34
        versionCode 1
        versionName ""1.0""

        testInstrumentationRunner ""androidx.test.runner.AndroidJUnitRunner""
    }
```  
のように変えると正常に動作しました。  
カルーセルまだ全く触れてませんごめんね  
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3634181/b4f88d18-a71c-1bdc-748a-a8c9fcb891e3.png)  

Material3のライブラリを使えるようにgradleに追記します  
```gradle:build.gradle(app)
dependencies {
    implementation 'com.google.android.material:material:1.11.0'
}
```  
res/layoutにカルーセルに表示させる内容を定義する？xmlを書きます。というよりは公式ドキュメントからコピペします。  
私は画像と概要みたいなのを出したいのでテキストも出します  
画像にはとりあえres\drawableに適当な画像を置いて指定しておきました
```xml:carousel_layout.xml
<com.google.android.material.carousel.MaskableFrameLayout
    xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:app=""http://schemas.android.com/apk/res-auto""
    xmlns:tools=""http://schemas.android.com/tools""
    android:id=""@+id/carousel_item_container""
    android:layout_width=""150dp""
    android:layout_height=""match_parent""
    android:layout_marginStart=""4dp""
    android:layout_marginEnd=""4dp""
    android:foreground=""?attr/selectableItemBackground""
    app:shapeAppearance=""?attr/shapeAppearanceCornerExtraLarge"">
    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width=""match_parent""
        android:layout_height=""match_parent"">
        <ImageView
            android:id=""@+id/carousel_image_view""
            android:src=""@drawable/karen""
            android:layout_width=""match_parent""
            android:layout_height=""match_parent""
            android:scaleType=""centerCrop""/>
        <TextView
            android:id=""@+id/carousel_text_view""
            android:layout_width=""wrap_content""
            android:layout_height=""wrap_content""
            app:layout_constraintBottom_toBottomOf=""parent""
            app:layout_constraintStart_toStartOf=""parent""
            app:layout_constraintEnd_toEndOf=""parent""
            android:textSize=""32sp""
            android:textColor=""@color/white""
            android:text=""Karen""/>
    </androidx.constraintlayout.widget.ConstraintLayout>
</com.google.android.material.carousel.MaskableFrameLayout>
```  
activity_main.xmlにRecyclerViewを置きます。このときにlayoutManagerにmaterialライブラリのCarouselLayoutManagerを指定するらしい  
```xml:activity_main.xml
<androidx.recyclerview.widget.RecyclerView
        android:id=""@+id/carousel_recycler_view""
        app:layoutManager=""com.google.android.material.carousel.CarouselLayoutManager""
        tools:listitem=""@layout/carousel_layout""
        android:layout_width=""match_parent""
        android:layout_height=""196dp""
        android:clipChildren=""false""
        android:clipToPadding=""false""
        app:layout_constraintStart_toStartOf=""parent""
        app:layout_constraintTop_toTopOf=""parent"" />
```  
ちなみにRecyclerViewから書き始めるとlistitemがないのでプレビューが出ず怖くなります  

これでactivity_main.xmlのデザインプレビューを見ると  
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3634181/8680f039-dad4-bc7a-43df-f2d254c59bab.png)
ぽい！ぽいぞ！  
ただ今はビルドして動かしてもなにも表示されません  
E/RecyclerView: No adapter attached; skipping layout とかぬかすので、adapterとやらを作ります  
参考にした資料の動画ではkotlinで書いててなにしてるのか全く分からなかったので、過去に自分で書いたJavaプログラムを見て思い出しながら書きました  

まずカルーセルに表示するデータを格納するクラスを作ります。画像と文字を格納できればいいです  
```java:CarouselModel.java
package com.example.material_carousel;

import android.graphics.Bitmap;

public class CarouselModel {
    public Bitmap image;
    public String text;

    public CarouselModel(Bitmap img, String txt) {
        this.image = img;
        this.text = txt;
    }
}
```  
次にViewHolderというわけわからんクラスも作ります。多分Adapterとカルーセルを結びつけるようなことをしています  
```java:CarouselHolder.java
package com.example.material_carousel;

import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

public class CarouselHolder extends RecyclerView.ViewHolder{
    public ImageView imageView;
    public TextView textView;

    public CarouselHolder(@NonNull View itemView) {
        super(itemView);
        imageView = itemView.findViewById(R.id.carousel_image_view);
        textView = itemView.findViewById(R.id.carousel_text_view);
    }
}
```  
そしてAdapterを作ります。なんかいろいろするやつです  
```java:CarouselAdapter.java
package com.example.material_carousel;

import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.recyclerview.widget.RecyclerView;

import java.util.ArrayList;
import java.util.List;

public class CarouselAdapter extends RecyclerView.Adapter<CarouselHolder> {
    ArrayList<CarouselModel> models;
    MainActivity main_activity;
    public CarouselAdapter(ArrayList<CarouselModel> list, MainActivity ma)
    {
        this.models = list;
        this.main_activity = ma;
    }

    @NonNull
    @Override
    public CarouselHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        //なにかよくわかっていない
        View inflate = LayoutInflater.from(parent.getContext()).inflate(R.layout.carousel_layout, parent, false);
        CarouselHolder carouselHolder = new CarouselHolder(inflate);
        return carouselHolder;
    }

    @Override
    public void onBindViewHolder(@NonNull CarouselHolder holder, int position) {
        //各項目に必要な要素をセットする
        holder.imageView.setImageBitmap(models.get(position).image);
        holder.textView.setText(models.get(position).text);
        holder.imageView.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                tapFunc();
            }
        });
    }
    
    private void tapFunc()  //要素が押されたときに実行するやつをここに書く
    {
        Toast.makeText(main_activity, ""九条カレン"", Toast.LENGTH_SHORT).show();
    }

    @Override
    public int getItemCount() {
        return models.size();
    }
}
```  
で、最後にアダプターをコードで指定してやります  
今回はMainActivityにカルーセルを出す想定なのでMainActivityに書いていきます  
```java:MainActivity.java
package com.example.material_carousel;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.RecyclerView;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {
    ArrayList<CarouselModel> models;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        models = new ArrayList<>();
        Bitmap bmp = BitmapFactory.decodeResource(getResources(), R.drawable.karen);
        //使った画像がでかすぎて何もしないとエラーを吐くので小さくしてます
        bmp = Bitmap.createScaledBitmap(bmp, 500, 500, false);
        models.add(new CarouselModel(bmp, ""Karen1""));
        models.add(new CarouselModel(bmp, ""Karen2""));
        models.add(new CarouselModel(bmp, ""Karen3""));
        models.add(new CarouselModel(bmp, ""Karen4""));
        models.add(new CarouselModel(bmp, ""Karen5""));

        RecyclerView recyclerView = findViewById(R.id.carousel_recycler_view);
        //アダプターを指定
        recyclerView.setAdapter(new CarouselAdapter(models, this));
    }
}
```  
ここまでいけばもう動くはず！  
これは一体、どうなっちゃうんだ～～！？！？  
![レコーディング-2023-12-21-222511.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3634181/c88b661a-a88b-6826-6d57-9b070383d29f.gif)
うごいたあああああああああああ！  
でもなんか...ダサくない？  

テーマを変えるのを忘れていました  
```xml:res/values/themes.xml
<style name=""Theme.Material_Carousel"" parent=""Theme.Material3.Light"">
以下略
```  
あとRecyclerViewにpadding(隙間)を設定しました  
![レコーディング-2023-12-21-223958.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3634181/f4aca775-79d7-55fa-6064-f27d5f9daf79.gif)
おおお！Material3になりました！~~マテリアル3だせえええええ～~~  
# いかがでしたか？  
ここまで作ったやつはGitHubに上げました  
https://github.com/SousiOmine/Material3_Carousel_demo
というわけでカレンちゃんを眺められる世界最高のアプリが完成したのでここで終わります  
誰かの参考になれば幸いです
",0,0,0,Java,AndroidStudio,Material3なカルーセルを作る【Android Studio】【Java】,,,1,0,,SousiOmine,1,,,,,3634181,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3634181/e67ea16e4242cc28660bdc9db966ec97453d451c/x_large.png?1701618700,False,SousiOmine,,,android開発,MaterialDesign,Carousel
"Buy verified Binance accounts to ensure a secure and hassle-free cryptocurrency trading experience. In today’s digital landscape, having a verified Binance account is essential for maximizing your trading potential.

![ddfafaae.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3659020/f994051e-e175-91c0-f9e7-2815a3cfda2c.jpeg)

Visit my webstie for more details: https://smmvcc.com/product/buy-verified-binance-accounts/

Features of Verified Binance Accounts

✔ Selfie Verified Account
✔ KYC-verified Binance account
✔ Email Confirmed
✔ Binance Email and password.
✔ 100% consumer satisfaction
✔ 100% full document verified
✔ Phone Verified: USA & UK Countries Phone Verified
✔ Photo ID Verified (NID/DL/Passport)
✔ USA and Any of European countries Binance Account
✔ Verified and Verified Plus Account Available

Have more questions? Contact us right now-
Email: admin@smmvcc.com
Telegram: @smmvcc
Skype: smmvcc.0@gmail.com
WhatsApp: +1 (385) 645-8927
",0,0,0,buy,binance,Buy Verified Binance Accounts,,,1,0,,kimberlymooreg26,1,,,Jeoson  Momoa,smmvcc,3659020,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3659020/3735d34cecd255e95e364e6efbdd64225327662d/x_large.png?1703167673,False,,https://smmvcc.com/product/buy-verified-binance-accounts/,,Verified,"accounts,",
"7M CN MA CAO - Trang cung cấp tỷ số trực tuyến, livescore, sport, tỷ lệ kèo nhà cái Châu Á, kết quả bóng rổ, bóng đá, trực tuyến 7m mới nhất siêu nhanh và chính xác.
Website: https://7mcnmacao.com/

Mạng xã hội:
https://twitter.com/7mcnmacao
https://lotus.vn/w/profile/158128554660078412.htm
https://www.pinterest.com/7mcnmacao/
https://www.facebook.com/7mcnmacao11
https://www.youtube.com/@7mcnmacao11
https://www.flickr.com/photos/199656619@N03/
https://www.tiktok.com/@7mcnmacao
",0,0,0,7mcnmacao,,Trang Cung Cấp Tỷ Lệ - Tỷ Số Trực Tuyến 7M Siêu Nhanh,"7M CN MA CAO - Trang cung cấp tỷ số trực tuyến, livescore, sport, tỷ lệ kèo nhà cái Châu Á, kết quả bóng rổ, bóng đá, trực tuyến 7m mới nhất siêu nhanh và chính xác.
Website: https://7mcnmacao.com/",7mcnmacao11,1,0,,7MCNMACAO,1,,"Thị Trấn Quang Minh, Mê Linh, Hà Nội",,7MCNMACAO,3659023,https://lh3.googleusercontent.com/a/ACg8ocLGeCYezp3xjJx4WixiEmlpz-UommfOEua6OJFfhh9jHg=s96-c,False,,https://7mcnmacao.com/,,,,
"# この記事について

[Money Forward Engineering 2 Advent Calendar 2023 - Adventar](https://adventar.org/calendars/9263) の 20日目 の記事です。

# はじめに
Protobuf使っていますか？
私はKafkaでメッセージをやり取りするのに使っています。

バイナリデータを扱うといっても、非常に柔軟だなぁという認識を持っているので、私がまだ新卒だった頃にやっていたような、
Cで書いて動かしているソケットサーバで受信したバイナリメッセージを、ファンクションポインタを使って動的にメソッド呼び出しするようなものを、Protobufを使ってWEBの世界でやってみても良いんじゃない？と思ってたりします。
（gRPC-Webってやつでそういうのをやってみたい）

それは一旦おいておいて、このページではProtobufで定義したメッセージ構造を、抜本的に変更しても安全に行う方法を紹介します。
この方法は、私が所属するチームで実際に行い、無停止でリリースしています。
※この手の話が見当たらなかったので、一応自分で編み出しました

対象はKafkaでメッセージをやりとりしているフォーマットですが、それ以外にも色々使えると思います。
※このページの説明上はKafkaのトピックに寄せて書きます。

ちなみにProtobuf3未満でやった場合の動作がどうなるかはわからないです。3が対象です。

## Protobufの定義について

```protobuf

message EventV1 {
  int32 event_id = 1;
  Hoge hoge = 2;
  google.protobuf.Timestamp occurred_at = 3;
}

message Hoge {
  int32 hoge_id = 1;
  string message = 2;
}

```

はじめ上記のものに対して、EventにHoge以外も含めたい、みたいなのを考える必要が出てきたとします。
バイナリデータのやり取りに慣れている人ならば、以下のように考えるのではないでしょうか。
（ちなみに私は考えました）

1. event_idはint32だから4バイト読み込み。
2. 次にHoge構造体がくるから、その分を読み込む。(string messageだからそんな単純ではないはずだけど)
3. Timestampのデータ数分読み込む。

これは単純に定義順にバイナリデータをそのバイト数分型はめして取る、というC言語でネットワーク触ったことがあればおそらく誰もが通る道です。
これに当てはめると、トピック分けるか〜という考えが湧くか、一旦使わないバイトをゼロ埋めでもして、後ろにくっつけるか、みたいなことをしたくなるかもしれません。

ただ、Protobufではその方法を考える必要はありません。

Protobufの定義の右辺に1とか2とか書いてあるものは定義順ではなく、キーとなります。
JavaやKotlinで架空の型を定義するなら、Map<Int, Binary>みたいな感じです。

これを見てわかるとおりで、Keyが被らなければ何ら問題ありません。
というわけで以下みたいに定義し直しました。

```protobuf

message EventV2 {
  int32 event_id = 1;
  int32 sturcture_version = 15;
  EventType event_type = 4;
  oneof content {
    Hoge hoge = 5;
    Fuga fuga = 6;
    Foo foo = 7;
  }
  google.protobuf.Timestamp occurred_at = 3;
}

enum EventType {
  UNSPECIFIED = 0;
  HOGE_EVENT = 1;
  FUGA_EVENT = 2;
  FOO_EVENT = 3;
}

message Hoge {
  int32 hoge_id = 1;
  string message = 2;
}

message Fuga {
  string message = 1;
}

message Foo {
  string foo = 1;
}


```

右辺の数字に同じものを使用すると、古いメッセージ構造を使用してデシリアライズしたときに、読み込んでしまいますが、
上記のように全く異なるキーとして定義を行いデシリアライズをした場合に関しては、古いメッセージ構造で読み込んだとしても無視されるか、unknown fieldとしてマークが付くだけとなります。
※ここの挙動は使用しているライブラリに寄りますが、エラーになるものには遭遇したことはありません。

# 読み込みについて

このページではKafkaトピックに放り込まれるデータを考えているため、以下のようなケースを考える必要があります。
※リリース時には混ざる可能性があったり、障害が起きた場合に、オフセットを巻き戻したりしたい場合を考えてます。
Kafkaでなくとも、gRPCでも一瞬こういうのは起きるかもです。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/56851/c63cbb83-9ce0-1848-9fae-3817449f4013.png)

この絵の通りで、Consumer側はKafkaにメッセージが保存されている間(デフォルトは7日)は、過去のものが混ざる前提でデータを読み込まないといけません。

ここで役に立つのがEventV2に追加したsturcture_versionとなります。
EventV2として書いたデータには、「2」でも入れておけばいいです。
ただ、EventV1に関してはフィールドそのものがありません。

でも心配はありません。Protobuf3ではデフォルトoptionなので、EventV1でそのデータを見に行ってもnullとなります。デフォルト値で0にでも書き換えて、1以下ならEventV1としてデシリアライズする、とでもしておけば良いでしょう。
※Protobufv2以下でやった場合、どうなるかわからない。

なので戦略的には、EventV1でデシリアライズして、sturcture_versionが1以下であることを確認するのが良いでしょう。
（EventV2からでもいいけど、先に受信する可能性が高いのはV1の方なので、そっちにV2を一旦デシリアライズさせて死なないことを確認できた方が精神的に楽だったので、私はそうしました。動作確認してればV2からデシリアライズさせても問題ないです）

KafkaからEventV1のメッセージが完全に消えたら、EventV1でのデシリアライズは削除して大丈夫です。

## 余談
EventV2にoneofを使うようにしてますが、これはCで言うとこの共用体(Union)に値します。
この例ではHoge/Fuga/Fooのうちのどれか、を表現するのに使えて非常に便利です。
どれを使えば良いかと言うのは、EventTypeを見て決められるようにしています。
（プログラミングをミスって）複数入れた場合は、右辺が一番大きいもので置き換わるので、例ではFooになります。

最初からoneof使っとけば良かったなぁという反省が私にあったので、ついでに共有しました。
※この仕組みを使えば、ファンクションポインタに近いことをできると思ってます。

# 最後に
Protobufでメッセージ構造を劇的に変えても問題ない、というのをお届けました。
",0,0,0,protobuf,ProtocolBuffers,Protobufでスキーマ変更を安全に行う方法,最近は子育て中心です,,16,56,sh-ogawa,sh-ogawa,55,,"Aichi, Japan",ogawa,Money Forward,56851,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/56851/profile-images/1555136112,False,kroyeeg,http://syogo0417.hatenablog.com/,,,,
"## Goにはimplementsがない

他の言語であればインターフェースを実装するときは`implements`などのように明示して実装します。

phpであればこのようにインターフェスを実装するときはimplementsを使います。

```php
<?php

// インターフェイス 'Template' を宣言する
interface Template
{
    public function setVariable($name, $var);
    public function getHtml($template);
}

// インターフェイスを実装する。
class WorkingTemplate implements Template
{
    private $vars = [];
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
  
    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }
 
        return $template;
    }
}
```

しかしGo言語にはこれがないので、実装されているかいないかがわかりません。
ただ、実装されているか調べることができます。

## 実装されているか調べる

以下のようにインターフェースがあるとします。

```go
type Animal interface {
	MakeSound() string
}

type Cat struct{}

func (c Cat) MakeSound() string {
	return ""Meow""
}

type Lion struct{}

```

CatはAnimalを実装しており、Lionは実装していません。
このとき以下のコードを入力すると下のコードはコンパイラエラーになります。

```go
var _ Animal = Cat{}
var _ Animal = Lion{} // エラー
```

これはLionをAnimal型の変数には代入できない、すなわち実装していないため代入できないからです。
そのためこのコードを利用すれば実装しているか実装していないかをエラーで確認することができます。

",0,0,0,Go,,【Go言語】インターフェースが実装されているか調べる方法,,,1,0,,marurusan,15,,,,,3655718,https://lh3.googleusercontent.com/a/ACg8ocLULDzY9mfeBaNrPMN0bUp8D1L7YxW-xlFZDPDlrk2B=s96-c,False,,,,,,
"## 概要
4年前当時GAOGAOゲートで開発したwebアプリケーションを新たな技術スタックで作り直していきます

## そもそもGAOGAOゲートとは
そもそもゲートとは何かを簡単に説明します。
ゲートとは一言で言うとアプリ開発合宿、プログラミング修行です。プログラミングをはじめ、ソフトウェアエンジニアとして活躍するためのスキルを身につけることができるカリキュラムになっています
私は2020年1月に参加して、日本で1ヶ月、ベトナムで1ヶ月プログラミングの基礎学習とオリジナルアプリ開発を行いました。

## 当時作成したアプリ
そんなGAOGAOゲートで当時開発経験がない状態で作成したのがシンプルな画像投稿アプリです
主な機能は下記の通りです

1. 画像投稿
2. チャンネル作成機能
3. リアルタイム更新

### リプレイス
当時作成したアプリを新しく作り直していきたいと思います
今回はリアルタイム更新のロジック部分を作成していきます

#### as is
以前作成したwebアプリは主に下記技術を使用していました。
簡単にまとめると、見た目はbladeでサーバー側で生成していました。
投稿部分はjsでポーリングをして、一定期間ごとにリクエストを送り、リアルタイムな更新を実現していました

- javascript
- Laravel
- PHP
- blade(テンプレートエンジン)
- Cloudinary
https://note.com/di45/n/n73035288ba7c

#### to be
今回は下記を使って新たに作り直していきます

- supabse
- TypeScript
- Next.js
- React

## パッケージのバージョン
主なパッケージのバージョンは下記の通りです
```
node: 18.18.2
react: 18.2.43
next"": 14.0.4
typescript: 5.3.3
```

## PJ作成
下記を実行してPJ作成

```
npx create-next-app image-upload-app
```

## supabaseの設定
チャンネルがそれぞれあり、各チャンネルに紐づいたPostが存在する構成となっています

### Channel用のDB(Postを紐付け)
添付画像のような構成で作成しました

![スクリーンショット 2023-12-21 22.10.50.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/920178/89206af9-d038-c478-0ac4-c9283023bbdf.png)

### Post用のDB
添付画像のような構成で作成しました

![スクリーンショット 2023-12-21 22.09.51.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/920178/72a1f04d-0fbd-28f7-7caf-9ec4cfc5c1c6.png)

## チャンネルに紐づいたメッセージ取得(初期表示時)
初期表示時はserver componentでチャンネルに紐づいたメッセージを取得しています
そちらのコードが下記となります

```typescript
import { notFound } from 'next/navigation'
import type { Database } from '../../../database.types'
import Posts from '../components/posts'

type Post = Database['public']['Tables']['posts']['Row']

type PageProps = {
  channelId: string
}

async function fetchPosts(channelId: string) {
  const res = await fetch(
    `${process.env.base_url}/rest/v1/posts?select=*`,
    {
      headers: new Headers({
        apikey: process.env.apikey as string,
      }),
      cache: 'no-store',
    }
  )
  const posts: Post[] = await res.json()
  return posts
}

export default async function channelDetailPage({ channelId }: PageProps) {
  const posts = await fetchPosts(channelId)
  if (!posts) return notFound()

  return (
    <div className=""mt-16 p-8"">
      <Posts posts={posts} channelId={params.channelId} />
    </div>
  )
}
```

## チャンネルに紐づいたメッセージのリアルタイム更新
クライアントコンポーネント内でsupabaseのリアルタイムリスナーを使用して、`posts`という変数に保存しています。
以前はポーリングを使用していましたが、今回はsupabaseの仕組みを利用させてもらいました
新規メッセージが投稿された場合(現時点では未実装)はリアルタイムに更新されるようになっています

```typescript
'use client';
import type { Database } from '../../../database.types'
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { useEffect, useState } from 'react'

type Post = Database['public']['Tables']['posts']['Row']

type PageProps = {
  posts: Post[]
  channelId: string
}

export default function Posts({ posts: initialPosts, channelId }: PageProps) {
  const [posts, setPosts] = useState<Post[]>(initialPosts)

  useEffect(() => {
    const supabase = createClientComponentClient<Database>();
    const newPosts = supabase.channel('custom-filter-channel')
    .on(
      'postgres_changes',
      { event: '*', schema: 'public', table: 'posts' },
      (payload) => {
        console.log('Change received!', payload)
        const newPost = payload.new as Post;

        switch(payload.eventType) {
          case 'UPDATE': {
            setPosts((prevPosts) => prevPosts.map(x => x.id === newPost.id ? newPost : x))
            break;
          }

          case 'INSERT': {
            setPosts((prevPosts) => [...prevPosts, newPost])
            break;
          }

          case 'DELETE': {
            const oldPost = payload.old as Post;
            setPosts((prevPost) => prevPost.filter(x => x.id !== oldPost.id))
            break;
          }
        }
      }
    )
    .subscribe()

    return () => {
      newPosts.unsubscribe()
    }
  }, [])

  return (
    <div className=""mt-16 p-8"">
      {posts.map(x => (
        <div key={x.id}>
          <p>{x.text}</p>
          {x.image ? <img src={x.image} alt=""""></img> : null}
          <p>{x.created_at}</p>
        </div>
      ))}
    </div>
  )
}
```

## デモ
DBを直接いじって試したところ、リアルタイムに更新できています

![output.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/920178/471752de-ee4e-dc14-8942-3b4461d05c75.gif)


## まとめ
本記事ではリアルタイム更新の部分を作成したので、下記の機能を実装できたら、その2以降を書いていきます

1. 画像投稿
2. チャンネル作成機能
3. 認証部分
4. 全体的なUIの実装
",0,0,0,React,Next.js,4年前のプログラミング合宿で作成したプロダクトのリプレイス(その１),,,3,3,,daiju81,8,,,,GAOGAO Pte. Ltd.,920178,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/920178/profile-images/1693697785,False,daiju08,,,Supabase,,
"## 目次
- resizeで実装した場合
- matchMediaで実装した場合


## resizeで実装した場合

画面幅が変わった時の処理は`resize`というイベントを用いて行うことが一般的です。

```javascript
// イベントリスナー
const listener = () => {
  // 600px以上のときの処理
  if (window.innerWidth >= 600) {
    console.log('600px以上だよ！');
  } else {
    // 600px未満のときの処理
    console.log('600px未満だよ！');
  }
};

// リスナー登録
window.addEventListener('resize', listener);

// 初期化
listener();
```

しかしこれだと画面幅がresizeされるたびにイベントリスナーを呼び出すことになります。そこでmatchMediaという手法を使っていきましょう。

## matchMediaで実装した場合

mdn：https://developer.mozilla.org/ja/docs/Web/API/MediaQueryList

`MediaQueryList`オブジェクトはメディアクエリの情報を格納します。

MediaQueryListオブジェクトを生成するには`window.matchMedia()`とします。さらに`window.matchMedia(""(max-width: 600px)"")`のようにすると、600px未満のメディアクエリーリストが生成されます。

画面幅がメディアクエリーリストと一致するか否かを判別するには、`matches`プロパティを使います。このプロパティはboolean型で、メディアクエリーリストと一致する場合はtrue、一致しない場合はfalseを返します。こうして画面幅によって処理を条件分岐できます。

メディアクエリーが変化するイベントを`resize`ではなく`change`として、イベントリスナーを呼び出します。

```javascript
const mql = window.matchMedia(""(max-width: 600px)"");

function screenTest(e) {
  if (e.matches) {
    console.log('一致したよ!600px未満だよ！');
  } else {
    console.log('不一致だったよ！600px以上だよ！');
  }
}

mql.addEventListener(""change"", screenTest);
```

## まとめ

メディアクエリーリストを作って、それと一致したらAの処理、一致しなかったらBの処理という風に書けた。

なので`window.addEventListener('resize', イベントリスナー)`のようにwindowがリサイズするたびにイベントリスナーを呼び出す必要がなく、

`window.matchMedia(幅).addEventListener('change', イベントリスナー)`のようにメディアクエリが変わった時だけイベントリスナーを呼び出せるようになった。

",0,0,0,matches,MediaQuery,画面幅が変わった時の処理をmatchMediaでやってみた,,,1,0,,whiskeyCheese,9,,,,,3576061,https://secure.gravatar.com/avatar/a940c82f8b343ffdd724dc3e6d2bcd42,False,,,,MediaQueryList,matchMedia,
"# 会議前日にリマインドメールを送りたい！

こんにちは。
金融業界でお仕事をしています、tomonaといいます。
高校野球と乃木坂46をこよなく愛する社会人です。
<br>

私は、会社の業務効率を推進する部署に所属しています。
部署柄、各部門との調整のための会議や打合せが多いのですが、
その会議や打合せをスムーズに進行させるためには、参加者への事前案内は欠かせません。

会議や打合せの前日には、予めリマインドメールを送るようにしているのですが、
今回Power Automate Desktopを使用して業務を自動化できないかと思いシナリオを組んでみたのでご紹介します。


# :robot:動作確認

<blockquote class=""twitter-tweet"" data-media-max-width=""560""><p lang=""ja"" dir=""ltr"">PADでメール送信を自動化してみた！！<a href=""https://twitter.com/hashtag/protoout?src=hash&amp;ref_src=twsrc%5Etfw"">#protoout</a> <a href=""https://twitter.com/hashtag/PAD?src=hash&amp;ref_src=twsrc%5Etfw"">#PAD</a> <a href=""https://twitter.com/hashtag/%E8%87%AA%E5%8B%95%E5%8C%96?src=hash&amp;ref_src=twsrc%5Etfw"">#自動化</a> <a href=""https://t.co/MWjEIrY4iX"">pic.twitter.com/MWjEIrY4iX</a></p>&mdash; tomona (@tomona_co) <a href=""https://twitter.com/tomona_co/status/1737832754950394129?ref_src=twsrc%5Etfw"">December 21, 2023</a></blockquote> <script async src=""https://platform.twitter.com/widgets.js"" charset=""utf-8""></script>



## :robot:届いたメール

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3569361/40ff3186-2f51-94c3-5979-907cc06ca624.png)




## :pencil2:利用した技術・素材

- Excel 
- Power Automate Desktop
- Outlook



## :wrench:作り方

### ①Excelにメール送付内容を入力
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3569361/4b2e683e-325a-4cc6-5c30-324029f72c52.png)


### ②Power Automate Desktopでフローを作成
フローの全体像はこんな感じに設定しました。

<details>

<summary>ソースコード</summary>

```ruby
Display.ShowMessageDialog.ShowMessage Title: $'''打合せ日の確認''' Message: $'''打合せの前日ですか？''' Icon: Display.Icon.Question Buttons: Display.Buttons.YesNo DefaultButton: Display.DefaultButton.Button1 IsTopMost: False ButtonPressed=> ButtonPressed
Excel.LaunchExcel.LaunchAndOpenUnderExistingProcess Path: $'''C:XXXXXXXXXXXXXXXXXXXX.xlsx''' Visible: True ReadOnly: False Instance=> ExcelInstance
Excel.ReadFromExcel.ReadCell Instance: ExcelInstance StartColumn: 1 StartRow: 2 ReadAsText: False CellValue=> ExcelData
Excel.ReadFromExcel.ReadCell Instance: ExcelInstance StartColumn: 2 StartRow: 2 ReadAsText: False CellValue=> ExcelData2
Excel.ReadFromExcel.ReadCell Instance: ExcelInstance StartColumn: 3 StartRow: 2 ReadAsText: False CellValue=> ExcelData3
Excel.ReadFromExcel.ReadCell Instance: ExcelInstance StartColumn: 4 StartRow: 2 ReadAsText: False CellValue=> ExcelData4
Excel.ReadFromExcel.ReadCell Instance: ExcelInstance StartColumn: 5 StartRow: 2 ReadAsText: False CellValue=> ExcelData5
Outlook.Launch Instance=> OutlookInstance
Outlook.SendEmailThroughOutlook.SendEmail Instance: OutlookInstance Account: OutlookInstance SendTo: ExcelData CC: ExcelData2 BCC: ExcelData3 Subject: ExcelData4 Body: ExcelData5 IsBodyHtml: False

```
</details>


![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3569361/85a4a6fb-84be-23c4-2836-7e35ecd5e8b6.png)

<details>

<summary>作成の詳細はこちら</summary>


まず、打合せの前日かどうか確認するためのポップアップを表示させます。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3569361/53602136-7d88-bb7d-0e4e-931aeb4e7946.png)

次にExcelを起動させます。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3569361/8d988121-4753-bdcf-b9d4-d6e128d62969.png)

Excelの指定のセルを読み取り変数を設定します。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3569361/5fe180ab-3930-64f1-3c1c-cbdd1932dd1a.png)

Outlookからメールを送信設定を行います。

:::note info
アカウントにはメールアドレスを入力します。
:::

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3569361/3e42bf72-8f1a-043f-3cdc-5e98331ebb65.png)

</details>


# :girl_tone1:周りの反応

早速完成したものを使ってもらいました。
同じ部署で仕事をしている会議や打合せが多い2人にお願いしました。
<br>
今回使ってもらうにあたり、以下のように伝え、
感想（フィードバック）はそれぞれ良い点と改善点をお願いしました。

:::note info　
説明
会議の案内メールやリマインドメールのようなメールを事前に設定しておくことでリマインドメール送付にかかる労力を削減する自動化ツールを作成。
:::


**1人目（同じ部署の20代女性）**

:sunny:良い点
・リマインドメールや案内メールはよく送るので、ありがたい

:umbrella2:改善点
・Excelに一度入力しないといけないのは少し面倒
・リマインドメールは新規メールでなく、過去の案内メールの全員返信の形で送付したい
・案内メールは手動で作成するので、メール送付後リマインドメール設定ができればよい
・これはリマインド用なのか案内用なのかどちらか分からない

**2人目（同じ部署の50代男性）**

:umbrella2:改善点
・これは自動化なの？
・前日かどうかのポップアップではなく、日付指定の方がいいのでは
・自分は案内連絡を電話でするから使わないと思う


## :hammer_pick:改善イメージ

もらった意見を元に以下のように作成したいと思いました。

- メール送付のタイミングで、以下の条件があった場合はポップアップを表示
  - 件名に「案内」の文字がある、あるいは
  - 件名に「RE：」の文字がない
- ポップアップ表示画面
  - 送付の有無
  - 送付予定日 
- 指定日に自動でメール送付


(イメージ画像)
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3569361/42fb7b0b-6cdb-ecc8-48b6-bf796d864a95.png)


# :partly_sunny:あとがき

毎回プロトタイプ作成後に感じることですが、私自身はいいかも！と思っていても、使ってもらうとたくさんの改善点が出てきます。
作成は思っている以上に大変で試行錯誤して、本当はここまでやれれば理想だけど・・と思いつつも上手く出来なくて妥協して形を作ることが多いです。
とは言え、試しに使ってもらう方からすると、そうった事実はもちろん知らないですし、私自身も「忌憚なく意見ください」と伝えるので、容赦ない意見がたくさん飛んできます。
意見や感想はほしいけど、マイナス意見が多いと、もうやりたくないな～と思ってしまう部分もあって、試作品だからダメダメで当たり前なんだ！と割り切れるようになりたいな～と思いました。改良版も作成後お見せできるように頑張ろうと思います。

ここまで読んでいただきありがとうございました。







",0,0,0,Excel,メール送信,会議のリマインドメールを自動化して業務効率を目指したい！,目標は「良いものを良いと発信する力をつけること💪」。DX初心者にもかかわらず、金融系の会社で業務改善や効率化の仕事をしています。上手く伝えられないことにもやもやする毎日とサヨナラすべく、アウトプットを鍛えることにしました🌸🌸高校野球⚾と乃木坂46が好きです🐣🐣,,15,6,tomona23,tomona23,4,,,tomona,,3569361,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3569361/profile-images/1699181695,False,tomona_co,https://note.com/tomona23,,Outlook,業務効率化,PowerAutomate
"プログラミングに必要な力は、数学？、英語？なの。

いやいや実は母国語を駆使する力、国語力ではないのか？
ほとんどのプログラミング言語は、英語によせて記述されているので、英語を母語とする人々はある意味有利です。マニュアルもほぼ英語で読めますから。

しかしそれを読んだり、書いたりしてプログラムを作るには、国語力が必要です。これまで出会ったきた優秀なプログラマは実は国語力が豊かな人たちでした。英語が得意でも数学が得意でもなくても。しかし国語力のない人はよいプログラムが書けません。そう思います。

いい加減、文系、理系分類は制度としてやめたほうがよいと思います。ナポレオンのころより、お国のためになるには数学、物理、化学的才能のある（戦争に役立つ）理系有利な時代が200年続いています。

中途半端なプログラミング教育などしないで、国語教育に力をいれればプログラミングに強い国ができるのではないでしょうか。
",0,0,0,mind,,プログラミングに必要なのは日本語（母国語）力ではないのか,"Mind歴35年。
教育用Mindの商品開発後転職、Mindユーザとして業務に使用、今年プログラマ人生を終える。
ライフワークとして自然言語処理（文学研究）に取り組むつもり。",,0,2,,MindZanmai,5,,東京,,無職、年金生活者,174261,https://secure.gravatar.com/avatar/40f08bc9f9d97597735543b9fa82e084,False,,,,,,
"# 目次と前回の記事

https://qiita.com/ysgeso/items/2381dd4e3283cbed49a0

https://qiita.com/ysgeso/items/d2cce68c7a32bf3790ef#comment-e08dcc6afeacb9507b15

# 前回までのおさらい

## 〇×ゲームの仕様と進捗状況

1. `正方形で区切られた 3 x 3 の 2 次元のゲーム盤上でゲームを行う`
2. `ゲーム開始時には、ゲーム盤のすべてのマスは空になっている`
3. `2 人のプレイヤーが遊ぶゲームであり、一人は 〇 を、もう一人は × のマークを受け持つ`
4. `2 人のプレイヤーは、交互に空いている好きなマスに自分のマークを 1 つ置く`
5. `先手は 〇 のプレイヤーである`
6. `プレイヤーがマークを置いた結果、縦、横、斜めのいずれかの一直線の 3 マスに同じマークが並んだ場合、そのマークのプレイヤーの勝利とし、ゲームが終了する`
7. `すべてのマスが埋まった時にゲームの決着がついていない場合は引き分けとする`

仕様の進捗状況は、以下のように表記します。

* 実装が完了した部分を `背景が灰色の長方形` で記述する
* 実装の一部が完了した部分を、__太字__ で記述する

## これまでに作成したモジュール

以下のリンクから、これまでに作成したモジュールを見ることができます。

https://github.com/ysgeso/marubatsu/blob/master/038/marubatsu.py

## 前回までのおさらい

前回の記事では、〇×ゲームを遊ぶための `play` メソッドを実装しましたが、`play` メソッドにはいくつかの問題点があります。今回の記事では、それらの問題点を修正します。

# `play` メソッドの改良

下記を見る前に、`play` メソッドにどのような問題があり、どのような方法で改良できるかについて少し考えてみて下さい。

## 結果の表示

実際に __決着がつくまで__ 〇×ゲームを遊ぶとわかると思いますが、__`play`__ メソッドでは、__決着がついた場合__ のゲーム盤が __表示されません__。この問題は、下記のプログラムのように、__ゲームの決着がついた__、while 文の __ブロックの後__ で __ゲーム盤を表示__ することで解決できます。

```python
from marubatsu import Marubatsu

def play(self):
    # 〇×ゲームを再起動する
    self.restart()
    # ゲームの決着がついていない間繰り返す
    while self.judge() == Marubatsu.PLAYING:
        # ゲーム盤の表示
        print(self)
        # キーボードからの座標の入力
        coord = input(""x,y の形式で座標を入力して下さい"")
        # x 座標と y 座標の計算
        x, y = coord.split("","")
        # (x, y) に着手を行う
        self.move(int(x), int(y))

    # 決着がついたので、ゲーム盤を表示する
    print(self)

Marubatsu.play = play
```

<details><summary><strong>修正箇所</strong></summary>

```diff_python
from marubatsu import Marubatsu

def play(self):
    # 〇×ゲームを再起動する
    self.restart()
    # ゲームの決着がついていない間繰り返す
    while self.judge() == Marubatsu.PLAYING:
        # ゲーム盤の表示
        print(self)
        # キーボードからの座標の入力
        coord = input(""x,y の形式で座標を入力して下さい"")
        # x 座標と y 座標の計算
        x, y = coord.split("","")
        # (x, y) に着手を行う
        self.move(int(x), int(y))

    # 決着がついたので、ゲーム盤を表示する
+   print(self)

Marubatsu.play = play
```
</details>


下記のプログラムを実行し、`0,0`、`0,1`、`1,0`、`1,1`、`2,0` の順でテキストボックスに入力することで、決着がついたゲーム盤が表示されることを確認できます。

```python
mb = Marubatsu()
mb.play()
```
実行結果
```
略
Turn o
oo.
xx.
...

Turn x
ooo
xx.
...

```

## 勝者の表示

上記の改良により、決着がついた際のゲーム盤が表示されるようになりましたが、__誰が勝利したか__ の __表示__ が __行われない__ という問題があります。__誰が勝利したか__ は、__`judge`__ メソッドで __判定__ でき、下記のプログラムの 16 行目のように、ゲーム盤を表示する前に `judge` メソッドの返り値である __判定結果を表示__ することで、勝者を表示できます。

```python
 1  def play(self):
 2      # 〇×ゲームを再起動する
 3      self.restart()
 4      # ゲームの決着がついていない間繰り返す
 5      while self.judge() == Marubatsu.PLAYING:
 6          # ゲーム盤の表示
 7          print(self)
 8          # キーボードからの座標の入力
 9          coord = input(""x,y の形式で座標を入力して下さい"")
10          # x 座標と y 座標の計算
11          x, y = coord.split("","")
12          # (x, y) に着手を行う
13          self.move(int(x), int(y))
14
15      # 決着がついたので、勝者とゲーム盤を表示する
16      print(""winner"", self.judge())
17      print(self)
18
19  Marubatsu.play = play
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def play(self):
    # 〇×ゲームを再起動する
    self.restart()
    # ゲームの決着がついていない間繰り返す
    while self.judge() == Marubatsu.PLAYING:
        # ゲーム盤の表示
        print(self)
        # キーボードからの座標の入力
        coord = input(""x,y の形式で座標を入力して下さい"")
        # x 座標と y 座標の計算
        x, y = coord.split("","")
        # (x, y) に着手を行う
        self.move(int(x), int(y))

    # 決着がついたので、勝者とゲーム盤を表示する
    print(""winner"", self.judge())
    print(self)

Marubatsu.play = play
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def play(self):
    # 〇×ゲームを再起動する
    self.restart()
    # ゲームの決着がついていない間繰り返す
    while self.judge() == Marubatsu.PLAYING:
        # ゲーム盤の表示
        print(self)
        # キーボードからの座標の入力
        coord = input(""x,y の形式で座標を入力して下さい"")
        # x 座標と y 座標の計算
        x, y = coord.split("","")
        # (x, y) に着手を行う
        self.move(int(x), int(y))

    # 決着がついたので、勝者とゲーム盤を表示する
+   print(""winner"", self.judge())
    print(self)

Marubatsu.play = play
```
</details>


下記のプログラムを実行し、`0,0`、`0,1`、`1,0`、`1,1`、`2,0` の順でテキストボックスに入力することで、勝者と、決着がついたゲーム盤が表示されることを確認できます。

```python
mb.play()
```
実行結果
```
略
Turn o
oo.
xx.
...

winner o
Turn x
ooo
xx.
...
```

上記は 〇 の勝利の場合ですが、念のため、__× の勝利__ と __引き分け__ の場合も __確認__ します。

下記のプログラムを実行し、`0,1`、`0,0`、`1,1`、`1,0`、`0,2`、`2,0` の順でテキストボックスに入力することで、× の勝利が表示されることを確認できます。

```python
mb.play()
```
実行結果
```
略
Turn x
xx.
oo.
o..

winner x
Turn o
xxx
oo.
o..
```

下記のプログラムを実行し、`0,0`、`0,1`、`1,0`、`1,1`、`2,1`、`2,0`、`0,2`、`1,2`、`2,2` の順でテキストボックスに入力することで、引き分けが表示されることを確認できます。

```python
mb.play()
```
実行結果
```
略
Turn o
oox
xxo
ox.

winner draw
Turn x
oox
xxo
oxo
```

:::note
実は、`Marubatsu.DRAW` に `""draw""` という文字列を代入したのは、 上記のように __`Marubatsu.DRAW`__ を __そのまま表示__ することで、__引き分け__ であることを __表示__ できるようにするためでした。__`Marubatsu.DRAW`__ に __別の文字列__ を __代入__ した場合は、下記のようなプログラムを記述する必要があります。

```python
if self.judge() == Marubatsu.DRAW:
    print(""winner draw"")
else:
    print(""winner"", self.judge())
```

__`Marbatsu.CIRCLE`__ や __`Marubatsu.CROSS`__ に `""o""` や `""x""` __以外の文字列を代入__ した場合も __同様__ です。
:::

## ゲーム盤の表示の改良

上記の実行結果では、__決着が付いた状態__ で、`winner draw` の下に __`Turn x`__ のように、__次の手番__ が × のプレイヤーであることが __表示__ されていますが、__決着がついているのに__ 次の手番が __表示__ されるのは __おかしい__ と思いませんか？そこで、次は、__決着が付いた場合__ は、__手番を表示しない__ ように改良することにします。

ゲーム盤の __表示__ に関する __処理__ は __[`__str__`](https://qiita.com/ysgeso/items/ed1eb1cacf9a3e7dfa29#__str__-%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89)__ メソッドで行っているので、この __メソッドの中__ で、ゲームの __決着がついている場合__ は __手番を表示しない__ ように __修正__ することにします。また、そのついでに、__勝利者の表示__ も __`__str__`__ メソッドの中で __まとめて行う__ ように __修正__ することにします。そのように修正することで、__決着がついた場合__ に、__`print(self)` だけを記述__ すれば済むようになります。修正後の `__str__` メソッドは以下のようになります。

* __3、4 行目__：`judge` メソッドを使って、ゲームの __決着がついていないこと__ を __判定__ し、__決着がついていない__ 場合は、__手番を表す文字列__ を __`text` に代入__ する
* __6、7 行目__：__決着がついている__ 場合は、`judge` メソッドを使って __勝者を表す文字列__ を __`text` に代入__ する[^1]

```python
 1  def __str__(self):
 2      # ゲームの決着がついていない場合は、手番を表示する
 3      if self.judge() == Marubatsu.PLAYING:
 4          text = ""Turn "" + self.turn + ""\n""
 5      # 決着がついていれば勝者を表示する
 6      else:
 7          text = ""winner "" + self.judge() + ""\n""
 8      for y in range(self.BOARD_SIZE):
 9          for x in range(self.BOARD_SIZE):
10              text += self.board[x][y]
11          text += ""\n""
12      return text
13
14  Marubatsu.__str__ = __str__

```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def __str__(self):
    # ゲームの決着がついていない場合は、手番を表示する
    if self.judge() == Marubatsu.PLAYING:
        text = ""Turn "" + self.turn + ""\n""
    # 決着がついていれば勝者を表示する
    else:
        text = ""winner "" + self.judge() + ""\n""
    for y in range(self.BOARD_SIZE):
        for x in range(self.BOARD_SIZE):
            text += self.board[x][y]
        text += ""\n""
    return text

Marubatsu.__str__ = __str__
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def __str__(self):
-   text = ""Turn "" + self.turn + ""\n""
    # ゲームの決着がついていない場合は、手番を表示する
+   if self.judge() == Marubatsu.PLAYING:
+       text = ""Turn "" + self.turn + ""\n""
    # 決着がついていれば勝者を表示する
+   else:
+       text = ""winner "" + self.judge() + ""\n""
    for y in range(self.BOARD_SIZE):
        for x in range(self.BOARD_SIZE):
            text += self.board[x][y]
        text += ""\n""
    return text

Marubatsu.__str__ = __str__
```
</details>


決着がついた際の表示を `__str__` メソッドで記述するように修正したので、__`play`__ メソッドは、下記のように、__決着がついた際の表示__ を行う処理を __削除__ します。

```python
def play(self):
    # 〇×ゲームを再起動する
    self.restart()
    # ゲームの決着がついていない間繰り返す
    while self.judge() == Marubatsu.PLAYING:
        # ゲーム盤の表示
        print(self)
        # キーボードからの座標の入力
        coord = input(""x,y の形式で座標を入力して下さい"")
        # x 座標と y 座標の計算
        x, y = coord.split("","")
        # (x, y) に着手を行う
        self.move(int(x), int(y))

    # 決着がついたので、ゲーム盤を表示する
    print(self)

Marubatsu.play = play
```

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def play(self):
    # 〇×ゲームを再起動する
    self.restart()
    # ゲームの決着がついていない間繰り返す
    while self.judge() == Marubatsu.PLAYING:
        # ゲーム盤の表示
        print(self)
        # キーボードからの座標の入力
        coord = input(""x,y の形式で座標を入力して下さい"")
        # x 座標と y 座標の計算
        x, y = coord.split("","")
        # (x, y) に着手を行う
        self.move(int(x), int(y))

    # 決着がついたので、ゲーム盤を表示する
-   print(""winner"", self.judge())
    print(self)

Marubatsu.play = play
```
</details>


下記のプログラムを実行し、`0,0`、`0,1`、`1,0`、`1,1`、`2,0` の順でテキストボックスに入力することで、決着がついた場面で手番が表示されなくなることが確認できます。

```python
mb.play()
```
実行結果
```
略
Turn o
oo.
xx.
...

winner o
ooo
xx.
...
```

## `judge` メソッドの呼び出しの抑制

修正したプログラムは __正しく動作__ しますが、__`judge`__ メソッドを __必要がない__ のに __何度も呼び出す__ という、__無駄な処理__ が行われています。

具体的にどのような点が無駄であるかについて少し考えてみて下さい。

### 無駄な処理の確認

どのような点が無駄であるかについては、__`play`__ メソッドが行う処理を順に __辿っていく__ ことで __確認__ することができます。`play` メソッドは、下記のプログラムの 5 行目のように、while 文の __条件式の中__ で __`judge`__ メソッドを __呼び出し__ ています。

```python
1  def play(self):
2      # 〇×ゲームを再起動する
3      self.restart()
4      # ゲームの決着がついていない間繰り返す
5      while self.judge() == Marubatsu.PLAYING:
6          # ゲーム盤の表示
7          print(self)
8          以下略
```

また、その直後の 7 行目で __`print(self)`__ が実行されると、__`__str__`__ メソッドが __呼び出され__ ますが、下記のプログラムのように、`__str__` メソッドの 3 行目の __if 文__ の __条件式__ でも __`judge`__  メソッドが __呼び出され__ ています。このことから、__`play`__ メソッドの __5 行目__ と __7 行目__ が __実行__ されると、必ず __`judge`__ メソッドが __2 回呼び出される__ ことがわかります。

```python
1  def __str__(self):
2      # ゲームの決着がついていない場合は、手番を表示する
3      if self.judge() == Marubatsu.PLAYING:
4          text = ""Turn "" + self.turn + ""\n""
5      # 決着がついていれば勝者を表示する
6      else:
7          text = ""winner "" + self.judge() + ""\n""
8      以下略
```

長くなるので再掲はしませんが、__`judge`__ メソッドの __ブロックの中__ では、__勝敗判定__ を行うための、ある程度 __複雑な処理__ が行われますが、`judge` メソッドの __返り値__ は、__ゲーム盤の状況__ が __同じ__ であれば、__常に同じ結果__ が計算されます。__`play`__ メソッドの __5 行目__ と __7 行目__ を実行する際に、__着手__ は __一度も行われない__ ので、どちらも __ゲーム盤の状況__ は __同じ__ です。従って、__5 行目__ と、__7 行目__ で __`judge`__ メソッドを __呼び出し__ て判定を行うのは、__結果が変わらない__ 複雑な __作業__ を __2 度行う__ という、__無駄な作業__ を行っていることになります。

:::note
__`__str__`__ メソッドの中にも、__3 行目__ の __条件式__ の計算結果が __`False`__ になる場合に、__7 行目__ で __もう一度__ `judge` メソッドが __実行__ されるという、__同様の無駄__ があります。
:::

### 属性の追加

このような __無駄な作業__ を行う必要が __生じる理由__ は、__`judge`__ メソッドの __返り値__ がどこにも __記録されていない__ からです。__`judge`__ メソッドの __返り値__ を __記録__ するための __属性__ を用意し、そこに __`judge`__ メソッドの __返り値を代入__ することで、__勝敗判定の結果__ が __必要になった時__ に、何度も __`judge`__ メソッドを __呼び出す必要__ が __なくなります__。

プログラムに __新しい変数__ や __属性__ を __追加__ する場合は、その変数や属性の __名前__、__初期化処理__、__更新処理__、__利用方法__ について __考える__ 必要があります。

#### 属性の名前

[`test_judge`](https://qiita.com/ysgeso/items/273ed49a00b90c753031#%E8%A4%87%E6%95%B0%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E3%82%B1%E3%83%BC%E3%82%B9%E3%82%92%E3%81%BE%E3%81%A8%E3%82%81%E3%81%9F%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0) では、__`winner`__ という名前の変数に期待される `judge` メソッドの返り値を代入していましたが、`judge` メソッドの返り値には、__勝者__（winner）とは __関係のない__、__`Marubatsu.PLAYING` がある__ ので、__`winner`__ という名前は __ふさわしくありません__。__`judge`__ メソッドの __返り値__ は、__ゲームの状態__（status）を表すので、__`status`__ という名前にします。

#### 初期化処理

ゲームの __開始時__ は、__ゲームの状態__ は __`Marubatsu.PLAYING`__ なので、下記のプログラムの 5 行目のように、__再起動__ を行う __`restart`__ メソッドの中 で __初期化処理__ を行います。

```python
1  def restart(self):
2      self.initialize_board()
3      self.turn = Marubatsu.CIRCLE     
4      self.move_count = 0
5      self.status = Marubatsu.PLAYING
6   
7  Marubatsu.restart = restart
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def restart(self):
    self.initialize_board()
    self.turn = Marubatsu.CIRCLE     
    self.move_count = 0
    self.status = Marubatsu.PLAYING
    
Marubatsu.restart = restart
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def restart(self):
    self.initialize_board()
    self.turn = Marubatsu.CIRCLE     
    self.move_count = 0
+   self.status = Marubatsu.PLAYING
    
Marubatsu.restart = restart
```
</details>

#### 更新処理

__`status`__ 属性には、__`judge`__ メソッドの __返り値を代入__ する必要があるので、__`judge`__ メソッドの __呼び出し__ を行う部分を __`self.status = self.judge()`__ のように修正します。

ただし、プログラムに __記述__ されている __すべて__ の __`judge`__ メソッドの __呼び出し__ をそのように __修正__ しても、__`judge`__ メソッドが __呼び出される__ ことに __変わりはない__ ので、__`judge`__ メソッドの __無駄な呼び出し__ は __解消されません__。__`judge`__ メソッドの __無駄な呼び出し__ を __解消__ するためには、__どの `judge`__ メソッドの __呼び出し__ が __必要であるか__ について考える必要があります。

〇×ゲームの、__勝敗判定__ の __結果が変わる__ のは、ゲーム盤の __状況が変わった時だけ__ で、ゲーム盤の __状況が変わる__ のは __`move`__ メソッドによって __着手を行った場合だけ__ です。従って、__`judge`__ メソッドを __実行__ する __必要がある__ のは、__`move`__ メソッドで __着手__ が行われた __場合だけ__ なので、下記のプログラムの 5 行目のように、__`move`__ メソッドで __着手__ が行われた場合に __`judge`__ メソッドを呼び出して __勝敗判定__ を行い、その __返り値__ を __`status` 属性__ に __代入__ するように修正します。

```python
1  def move(self, x, y):
2      if self.place_mark(x, y, self.turn):
3          self.turn = Marubatsu.CROSS if self.turn == Marubatsu.CIRCLE else Marubatsu.CIRCLE  
4          self.move_count += 1
5          self.status = self.judge()
6
7  Marubatsu.move = move        
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def move(self, x, y):
    if self.place_mark(x, y, self.turn):
        self.turn = Marubatsu.CROSS if self.turn == Marubatsu.CIRCLE else Marubatsu.CIRCLE  
        self.move_count += 1
        self.status = self.judge()

Marubatsu.move = move
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def move(self, x, y):
    if self.place_mark(x, y, self.turn):
        self.turn = Marubatsu.CROSS if self.turn == Marubatsu.CIRCLE else Marubatsu.CIRCLE  
        self.move_count += 1
+       self.status = self.judge()

Marubatsu.move = move
```
</details>

#### 利用

__`status` 属性__ の __利用場面__ は、__これまで `judge`__ メソッドの __呼び出しを記述__ していた部分なので、それらの __`self.judge()`__ を __`self.status`__ に __置きかえます__。具体的には、下記のプログラムのように __`__str__`__ メソッドの 3、7 行目を修正します。

```python
 1  def __str__(self):
 2      # ゲームの決着がついていない場合は、手番を表示する
 3      if self.status == Marubatsu.PLAYING:
 4          text = ""Turn "" + self.turn + ""\n""
 5      # 決着がついていれば勝者を表示する
 6      else:
 7          text = ""winner "" + self.status + ""\n""
 8      for y in range(self.BOARD_SIZE):
 9          for x in range(self.BOARD_SIZE):
10              text += self.board[x][y]
11          text += ""\n""
12      return text
13
14  Marubatsu.__str__ = __str__
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def __str__(self):
    # ゲームの決着がついていない場合は、手番を表示する
    if self.status == Marubatsu.PLAYING:
        text = ""Turn "" + self.turn + ""\n""
    # 決着がついていれば勝者を表示する
    else:
        text = ""winner "" + self.status + ""\n""
    for y in range(self.BOARD_SIZE):
        for x in range(self.BOARD_SIZE):
            text += self.board[x][y]
        text += ""\n""
    return text

Marubatsu.__str__ = __str__
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def __str__(self):
    # ゲームの決着がついていない場合は、手番を表示する
-   if self.judge() == Marubatsu.PLAYING:
+   if self.status == Marubatsu.PLAYING:
        text = ""Turn "" + self.turn + ""\n""
    # 決着がついていれば勝者を表示する
    else:
-       text = ""winner "" + self.judge() + ""\n""
+       text = ""winner "" + self.status + ""\n""
    for y in range(self.BOARD_SIZE):
        for x in range(self.BOARD_SIZE):
            text += self.board[x][y]
        text += ""\n""
    return text

Marubatsu.__str__ = __str__

```
</details>

次に `play` メソッドの 5 行目を下記のプログラムのように修正します。

```python
 1  def play(self):
 2      # 〇×ゲームを再起動する
 3      self.restart()
 4      # ゲームの決着がついていない間繰り返す
 5      while self.status == Marubatsu.PLAYING:
 6          # ゲーム盤の表示
 7          print(self)
 8          # キーボードからの座標の入力
 9          coord = input(""x,y の形式で座標を入力して下さい"")
10          # x 座標と y 座標の計算
11          x, y = coord.split("","")
12          # (x, y) に着手を行う
13          self.move(int(x), int(y))
14
15      # 決着がついたので、ゲーム盤を表示する
16      print(self)
17
18  Marubatsu.play = play
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def play(self):
    # 〇×ゲームを再起動する
    self.restart()
    # ゲームの決着がついていない間繰り返す
    while self.status == Marubatsu.PLAYING:
        # ゲーム盤の表示
        print(self)
        # キーボードからの座標の入力
        coord = input(""x,y の形式で座標を入力して下さい"")
        # x 座標と y 座標の計算
        x, y = coord.split("","")
        # (x, y) に着手を行う
        self.move(int(x), int(y))

    # 決着がついたので、ゲーム盤を表示する
    print(self)

Marubatsu.play = play
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def play(self):
    # 〇×ゲームを再起動する
    self.restart()
    # ゲームの決着がついていない間繰り返す
-   while self.judge() == Marubatsu.PLAYING:
+   while self.status == Marubatsu.PLAYING:
        # ゲーム盤の表示
        print(self)
        # キーボードからの座標の入力
        coord = input(""x,y の形式で座標を入力して下さい"")
        # x 座標と y 座標の計算
        x, y = coord.split("","")
        # (x, y) に着手を行う
        self.move(int(x), int(y))

    # 決着がついたので、ゲーム盤を表示する
    print(self)

Marubatsu.play = play
```
</details>


下記のプログラムを実行し、`0,0`、`0,1`、`1,0`、`1,1`、`2,0` の順でテキストボックスに入力することで、修正したプログラムが正しく動作することが確認できます。実行結果は先ほどと同様なので省略します。

```python
mb.play()
```

## 間違った入力への対処

何度か `play` メソッドを実行して〇×ゲームを遊べばわかると思いますが、__座標の入力__ を __間違う__ と、このプログラムは __エラーが発生__ してプログラムの __処理が止まって__ しまいます。

たとえば、下記のプログラムを実行し、テキストボックスに `1,1` を入力したつもりが、__`,` を書き忘れ__ て __`11`__ を入力すると、下記のような __エラーが発生__ します。

```python
mb.play()
```
実行結果
```
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
c:\Users\ys\ai\marubatsu\038\marubatsu.ipynb セル 22 line 1
----> 1 mb.play()

c:\Users\ys\ai\marubatsu\038\marubatsu.ipynb セル 22 line 1
      9 coord = input(""x,y の形式で座標を入力して下さい"")
     10 # x 座標と y 座標の計算
---> 11 x, y = coord.split("","")
     12 # (x, y) に着手を行う
     13 self.move(int(x), int(y))

ValueError: not enough values to unpack (expected 2, got 1)
```

:::note
上記のエラーメッセージは、以下のような意味を持ちます。

* __ValueError__
値（value）に関するエラー
* __not enough values to unpack (expected 2, got 0)__
展開する（to unpack）ために必要な値（value）が 2 つ期待されている（expected）が、0 個（got 0）しかないため足りない（not enough）
:::

### エラーの原因

エラーの __原因__ は、`""11""` という、__中に `"",""` が存在しない__ 文字列に対して、__`split("","")`__ を実行すると、下記のプログラムのように、__`[""11""]`__ という、__要素が 1 つしかない list__ が返されてしまうからです。__`x, y = coord.split("","")`__ のような、__list の展開__ を記述した場合、__代入__ する __変数の数__ と __list の 素の数__ が __一致しない__ と __エラーが発生__ してしまいます。

```python
print(""11"".split("",""))
```
実行結果
```
['11']
```

__`input`__ のように、__ユーザの入力__ に __対応した処理__ を行うようなプログラムを記述する際に、上記のような、__意図しない__ ような __入力__ が行われることを __考慮する必要__ があります。このことを __考慮せず__ にプログラムを __記述__ してしまうと、上記のような __エラーが発生__ したり、エラーは発生しないが、__プログラムの挙動__ が __おかしくなってしまう__ という __バグが発生__ するからです。プログラムの初心者のうちは、そのことに気が回らないかもしれませんが、__意図しない入力__ による __バグ__ は __良く発生する__ バグなので、__意識する__ ように __心がけて__ 下さい。

:::note
__このこと__ は、`input` のようなキーボードからの文字の入力だけでなく、__定義__ した __関数の入力__ にも __あてはまります__。ただし、関数の場合は、__すべての入力を考慮__ したプログラムを __記述__ することが __大変すぎる__、または __ほぼ不可能__ な場合が多いので、__実際__ には __[型アノテーション](https://qiita.com/ysgeso/items/4d55e73d6571fe85aa49#%E9%96%A2%E6%95%B0%E3%81%AE%E5%BC%95%E6%95%B0%E3%81%A8%E8%BF%94%E3%82%8A%E5%80%A4%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%AE%E3%83%92%E3%83%B3%E3%83%88%E5%9E%8B%E3%82%A2%E3%83%8E%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E8%A1%A8%E8%A8%98)__ や __[docstring](https://qiita.com/ysgeso/items/4d55e73d6571fe85aa49#docstring)__ などを __記述__ して、関数を __使う際__ に、__間違ったデータ__ を __入力しない__ ように __促す__ という __工夫が重要__ になります。
:::

### バグの修正

上記のエラーは、__`coord.split("","")`__ によって返された __list の要素__ が __2 つ以外__ の場合に発生するので、下記のプログラムのように、返された __list の要素__ が __2 つ以外__ の場合は __エラーメッセージを表示__ して、__着手の処理__ を __行わない__ ようにすることで修正できます。

* __11 行目__：__`coord.split("","")`__ の __計算結果__ を __`xylist` に代入__ する
* __13 ~ 17 行目__：__`xylist`__  の __要素の数__ が __2 でない__ 場合、15 行目で __エラーメッセージを表示__ し、17 行目で __[continue 文](https://qiita.com/ysgeso/items/1a8a4319ef3c896ef271#break-%E6%96%87%E3%81%A8-continue-%E6%96%87)__ を __実行__ することで、__残り__ の while 文の __ブロック__ を __実行せず__ に、__次の繰り返し処理__ を __行う__
* __18 行目__：__`xylist`__ の __要素の数__ が __2 である__ ことが __確定__ したので、__`xylist`__ のそれぞれの __要素__ を __`x` と `y` に展開__ する

```python
 1  def play(self):
 2      # 〇×ゲームを再起動する
 3      self.restart()
 4      # ゲームの決着がついていない間繰り返す
 5      while self.status == Marubatsu.PLAYING:
 6          # ゲーム盤の表示
 7          print(self)
 8          # キーボードからの座標の入力
 9          coord = input(""x,y の形式で座標を入力して下さい"")
10          # x 座標と y 座標を要素として持つ list を計算する
11          xylist = coord.split("","")
12          # xylist の要素の数が 2 ではない場合
13          if len(xylist) != 2:
14              # エラーメッセージを表示する
15              print(""x, y の形式ではありません"")
16              # 残りの while 文のブロックを実行せずに、次の繰り返し処理を行う
17              continue
18          x, y = xylist
19          # (x, y) に着手を行う
20          self.move(int(x), int(y))
21
22      # 決着がついたので、ゲーム盤を表示する
23      print(self)
24
25  Marubatsu.play = play
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def play(self):
    # 〇×ゲームを再起動する
    self.restart()
    # ゲームの決着がついていない間繰り返す
    while self.status == Marubatsu.PLAYING:
        # ゲーム盤の表示
        print(self)
        # キーボードからの座標の入力
        coord = input(""x,y の形式で座標を入力して下さい"")
        # x 座標と y 座標を要素として持つ list を計算する
        xylist = coord.split("","")
        # xylist の要素の数が 2 ではない場合
        if len(xylist) != 2:
            # エラーメッセージを表示する
            print(""x, y の形式ではありません"")
            # 残りの while 文のブロックを実行せずに、次の繰り返し処理を行う
            continue
        x, y = xylist
        # (x, y) に着手を行う
        self.move(int(x), int(y))

    # 決着がついたので、ゲーム盤を表示する
    print(self)

Marubatsu.play = play
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def play(self):
    # 〇×ゲームを再起動する
    self.restart()
    # ゲームの決着がついていない間繰り返す
    while self.status == Marubatsu.PLAYING:
        # ゲーム盤の表示
        print(self)
        # キーボードからの座標の入力
        coord = input(""x,y の形式で座標を入力して下さい"")
        # x 座標と y 座標を要素として持つ list を計算する
-       x, y = coord.split("","")
+       xylist = coord.split("","")
        # xylist の要素の数が 2 ではない場合
+       if len(xylist) != 2:
            # エラーメッセージを表示する
+           print(""x, y の形式ではありません"")
            # 残りの while 文のブロックを実行せずに、次の繰り返し処理を行う
+           continue
+       x, y = xylist
        # (x, y) に着手を行う
        self.move(int(x), int(y))

    # 決着がついたので、ゲーム盤を表示する
    print(self)

Marubatsu.play = play
```
</details>

下記のプログラムを実行し、テキストボックスに `11` を入力することで、実行結果のように __エラーメッセージが表示__ され、__着手を行わず__ に __ゲームが続行__ されることが確認できます。

```python
mb.play()
```

実行結果
```
Turn o
...
...
...

x, y の形式ではありません
Turn o
...
...
...
```

## ゲームの強制終了

上記は __`11`__ という入力に対して __意図した処理__ が行われるかどうかを __確認__ するために行った作業ですが、__`11`__ を __入力した後__ も __ゲームは続行__ されます。そのため、__ゲームを終了__ させるためには、`0,0`、`0,1`、`1,0`、`1,1`、`2,0` などの順で __テキストボックスに入力__ して実際にゲームを終了させる必要があります。これは __面倒__ だと思いませんか？

VSCode の JupyterLab では、__タイトルバーの下__ にある、下図の __割り込みボタン__ を __クリック__ することで、プログラムの __実行途中__ でプログラムを __強制的に終了__ させることができます。ただし、このボタンをクリックしても __なかなか__ プログラムが __終了しなかったり__、__再起動を促すパネルが表示__ されるようなことがあるので、〇×ゲームの場合は、__別の方法__ でゲームを __簡単に終了__ させる __方法を用意__ しておいたほうが便利です。

<img src=""https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3524802/bbe8abea-e8fe-57ba-d03d-4158526ee2d5.png"" width=""100"">

そのような方法の一つに、__テキストボックス__ に __特定の文字列を入力__ することで、〇×ゲームを __終了させる__ という方法があります。例えば、下記は、__`exit`__ という文字列を __入力__ すると __ゲームが終了する__ ように __`play`__ メソッドを __修正__ したプログラムです。もちろん、他の文字列を入力することでゲームが終了するように変更してもかまいません。

* __9 行目__：`exit` を入力すると終了するこをと __説明するメッセージを追加__ する
* __11 ~ 13 行目__：テキストボックスに __入力した文字列__ が __`""exit""`__ と __等しいかどうか__ を __判定__ し、__等しければ__  12 行目で __ゲームの終了メッセージを表示__ し、12 行目で __return 文__ を実行することで、__`play`__ メソッドの __処理を終了__ する

```python
 1  def play(self):
 2   # 〇×ゲームを再起動する
 3      self.restart()
 4      # ゲームの決着がついていない間繰り返す
 5      while self.status == Marubatsu.PLAYING:
 6          # ゲーム盤の表示
 7          print(self)
 8          # キーボードからの座標の入力
 9          coord = input(""x,y の形式で座標を入力して下さい。exit を入力すると終了します"")
10          # ""exit"" が入力されていればメッセージを表示して関数を終了する
11          if coord == ""exit"":
12              print(""ゲームを終了します"")
13              return       
14          # x 座標と y 座標を要素として持つ list を計算する
15          xylist = coord.split("","")
16          # xylist の要素の数が 2 ではない場合
17          if len(xylist) != 2:
18              # エラーメッセージを表示する
19              print(""x, y の形式ではありません"")
20              # 残りの while 文のブロックを実行せずに、次の繰り返し処理を行う
21              continue
22          x, y = xylist
23          # (x, y) に着手を行う
24          self.move(int(x), int(y))
25
26      # 決着がついたので、ゲーム盤を表示する
27      print(self)
28
29  Marubatsu.play = play
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def play(self):
    # 〇×ゲームを再起動する
    self.restart()
    # ゲームの決着がついていない間繰り返す
    while self.status == Marubatsu.PLAYING:
        # ゲーム盤の表示
        print(self)
        # キーボードからの座標の入力
        coord = input(""x,y の形式で座標を入力して下さい。exit を入力すると終了します"")
        # ""exit"" が入力されていればメッセージを表示して関数を終了する
        if coord == ""exit"":
            print(""ゲームを終了します"")
            return       
        # x 座標と y 座標を要素として持つ list を計算する
        xylist = coord.split("","")
        # xylist の要素の数が 2 ではない場合
        if len(xylist) != 2:
            # エラーメッセージを表示する
            print(""x, y の形式ではありません"")
            # 残りの while 文のブロックを実行せずに、次の繰り返し処理を行う
            continue
        x, y = xylist
        # (x, y) に着手を行う
        self.move(int(x), int(y))

    # 決着がついたので、ゲーム盤を表示する
    print(self)

Marubatsu.play = play
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def play(self):
    # 〇×ゲームを再起動する
    self.restart()
    # ゲームの決着がついていない間繰り返す
    while self.status == Marubatsu.PLAYING:
        # ゲーム盤の表示
        print(self)
        # キーボードからの座標の入力
-       coord = input(""x,y の形式で座標を入力して下さい"")
+       coord = input(""x,y の形式で座標を入力して下さい。exit を入力すると終了します"")
        # ""exit"" が入力されていればメッセージを表示して関数を終了する
+       if coord == ""exit"":
+           print(""ゲームを終了します"")
+           return       
        # x 座標と y 座標を要素として持つ list を計算する
        xylist = coord.split("","")
        # xylist の要素の数が 2 ではない場合
        if len(xylist) != 2:
            # エラーメッセージを表示する
            print(""x, y の形式ではありません"")
            # 残りの while 文のブロックを実行せずに、次の繰り返し処理を行う
            continue
        x, y = xylist
        # (x, y) に着手を行う
        self.move(int(x), int(y))

    # 決着がついたので、ゲーム盤を表示する
    print(self)

Marubatsu.play = play
```
</details>

下記のプログラムを実行し、`exit` をテキストボックスに入力することで、メッセージを表示してゲームが終了することが確認できます。

```python
mb.play()
```

実行結果

```
Turn o
...
...
...

ゲームを終了します
```

## ゲーム盤の外の座標の入力への対処

先程の修正で、`11` のような入力に対応する処理を記述できましたが、__`5,1`__ のような、〇×ゲームの __ゲーム盤__ に __存在しない座標__ を入力すると __エラーが発生__ します。

```python
mb.play()
```
実行結果
```
略
File c:\Users\ys\ai\marubatsu\038\marubatsu.py:74, in Marubatsu.place_mark(self, x, y, mark)
     55 def place_mark(self, x: int, y: int, mark: str):
     56     """""" ゲーム盤の指定したマスに指定したマークを配置する.
     57 
     58     (x, y) のマスに mark で指定したマークを配置する.
   (...)
     71         マークを配置できた場合は True、配置できなかった場合は False
     72     """"""
---> 74     if self.board[x][y] == Marubatsu.EMPTY:
     75         self.board[x][y] = mark
     76         return True

IndexError: list index out of range
```

:::note
上記のエラーメッセージは、以下のような意味を持ちます。

* __IndexError__
インデックス（index）に関するエラー
* __list index out of range__
list のインデックス（index）が範囲外（out of range）である
:::

このエラーは、エラーメッセージの `--->` の部分の __`if self.board[x][y]`__ を計算する際に、__`x`__ に __`5` が代入__ されているため、__対応するインデックス__ が __存在しない__ `self.board` の __要素__ を __参照__ しようとしたことが原因です。〇×ゲームの __ゲーム盤のサイズ__ は __3 x 3__ なので、__x 座標__ と __y 座標__ はいずれも __0 以上 3 未満__ の __整数__ である必要があります。

現状の `move` メソッドでは、2 行目で __`place_mark` を呼び出す__ ことで __着手__ を行っています。

```python
def move(self, x, y):
    if self.place_mark(x, y, self.turn):
        self.turn = Marubatsu.CROSS if self.turn == Marubatsu.CIRCLE else Marubatsu.CIRCLE  
        self.move_count += 1
        self.status = self.judge()
```
        
また、__`place_mark`__ メソッドでは、__すでにマークが配置されている座標__ に対して __マークを配置__ しようとした場合は、__エラーメッセージを表示__ して __配置を行わない__ ようにしていますが、__範囲外の座標__ に __対する処理__ は __記述していません__。そこで、下記のプログラムのように、ゲーム盤の __範囲外の座標__ に対して __マークを配置__ しようとした場合に、__エラーメッセージを表示__ して __配置を行わない__ ように修正します。

* __2 ~ 4 行目__：__(x, y)__ がゲーム盤の __範囲外の座標__ である __条件__ は、__`x`__ または __`y`__ が __0 未満__ または ゲーム盤のサイズである __`self.BOARD_SIZE` 以上__ の場合なので、その __4 つの条件__ を表す __条件式__ を __or 演算子__ で連結することで、ゲーム盤の __範囲外__ であることを __判定__ する。__範囲外と判定__ された場合は、3 行目で __エラーメッセージを表示__ し、4 行目で __配置できなかった__ ことを表す __`False` を返す__
* __5 行目__：2 ~ 4 行目に __if 文を記述__ したので、元の __if を elif に修正__ した

```python
 1  def place_mark(self, x, y, mark):
 2      if x < 0 or x >= self.BOARD_SIZE or y < 0 or y > self.BOARD_SIZE:
 3          print(""("", x, "","", y, "") はゲーム盤の範囲外の座標です"")
 4          return False         
 5      elif self.board[x][y] == Marubatsu.EMPTY:
 6          self.board[x][y] = mark
 7          return True
 8      else:
 9          print(""("", x, "","", y, "") のマスにはマークが配置済です"")
10          return False
11  
12  Marubatsu.place_mark = place_mark
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def place_mark(self, x, y, mark):
    if x < 0 or x >= self.BOARD_SIZE or y < 0 or y > self.BOARD_SIZE:
        print(""("", x, "","", y, "") はゲーム盤の範囲外の座標です"")
        return False         
    elif self.board[x][y] == Marubatsu.EMPTY:
        self.board[x][y] = mark
        return True
    else:
        print(""("", x, "","", y, "") のマスにはマークが配置済です"")
        return False

Marubatsu.place_mark = place_mark
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def place_mark(self, x, y, mark):
+   if x < 0 or x >= self.BOARD_SIZE or y < 0 or y > self.BOARD_SIZE:
+       print(""("", x, "","", y, "") はゲーム盤の範囲外の座標です"")
+       return False         
-   if self.board[x][y] == Marubatsu.EMPTY:
+   elif self.board[x][y] == Marubatsu.EMPTY:
        self.board[x][y] = mark
        return True
    else:
        print(""("", x, "","", y, "") のマスにはマークが配置済です"")
        return False

Marubatsu.place_mark = place_mark
```
</details>

下記のプログラムを実行し、`5,1` をテキストボックスに入力することで、エラーメッセージが表示されて、マークが配置されずにゲームが続行することが確認できます。なお、実行結果には表示していませんが、確認後に `exit` を入力してゲームを終了させました。

```python
mb.play()
```

実行結果

```
Turn o
...
...
...

( 5 , 1 ) はゲーム盤の範囲外の座標です
Turn o
...
...
...
```

### if 文の判定の順番に関する注意点

__`place_mark`__ で行う __if 文の判定__ を、下記のプログラムのように、__先に__ (x, y) のマスに __マークが配置されていない__ ことを __判定__ し、__その後__ で (x, y) が __ゲーム盤の範囲外__ であることを __判定__ するように記述しても良いのではないかと __思う人がいるかも__ しれません。

```python
def place_mark(self, x, y, mark):
    if self.board[x][y] == Marubatsu.EMPTY:
        self.board[x][y] = mark
        return True
    elif x < 0 or x >= self.BOARD_SIZE or y < 0 or y > self.BOARD_SIZE:
        print(""("", x, "","", y, "") はゲーム盤の範囲外の座標です"")
        return False         
    else:
        print(""("", x, "","", y, "") のマスにはマークが配置済です"")
        return False

Marubatsu.place_mark = place_mark
```

実際に上記のように `place_mark` を修正し、下記のプログラムを実行して `5,1` を実行すると、下記のように、__先程と同じエラー__ が発生します。

```python
mb.play()
```

実行結果

```
略
c:\Users\ys\ai\marubatsu\038\marubatsu.ipynb セル 37 line 2
      1 def place_mark(self, x, y, mark):
----> 2     if self.board[x][y] == Marubatsu.EMPTY:
      3         self.board[x][y] = mark
      4         return True

IndexError: list index out of range
```

このエラーが発生する理由は、__先に `if self.board[x][y] == Marubatsu.EMPTY`__ を __判定__ するようにしたことで、__`x` に `5` が代入__ された状態で __この式の計算が行われる__ ためです。

このように、if 文などの __条件式__ の __記述の順番__ が、__処理の結果__ に __大きな影響を及ぼす__ 場合があるので、if 文などを記述する際には、その点に __注意しながら記述する必要__ があります。

### 別の記述方法

先程は、(x, y) が __ゲーム盤の外__ にあることを __or 演算子__ を使って __判定__ しましたが、下記のプログラムのように、__and 演算子__ を使って (x, y) が __ゲーム盤の中__ にあることを __判定__ するように `place_mark` を記述することもできます。ただし、この場合は修正前のように __1 つ__ の if 文 __ではなく__、(x, y) がゲーム盤の中にあることが判定された場合の __ブロックの中__ に、__別の if 文__ を __入れ子__ で記述する必要がある点に注意して下さい。

* __2 行目__：__(x, y)__ がゲーム盤の __範囲内の座標__ である __条件__ は、__`x`__ と __`y`__ の __両方__ が __0 以上__ ゲーム盤のサイズである __`self.BOARD_SIZE` 未満__ の場合なので、その __4 つの条件__ を表す __条件式__ を __and 演算子__ で連結することで、ゲーム盤の __範囲外__ であることを __判定__ する。
* __3 ~ 8 行目__：__範囲内と判定__ された場合は、__元の__ `place_mark` で行っていた __処理を行う__
* __9 ~ 11 行目__：__範囲外と判定__ された場合は、__エラーメッセージを表示__ し、__配置できなかった__ ことを表す __`False` を返す__

```python
 1  def place_mark(self, x, y, mark):
 2      if x >= 0 and x < self.BOARD_SIZE and y >= 0 and y < self.BOARD_SIZE:
 3          if self.board[x][y] == Marubatsu.EMPTY:
 4              self.board[x][y] = mark
 5              return True
 6          else:
 7              print(""("", x, "","", y, "") のマスにはマークが配置済です"")
 8              return False
 9      else:
10          print(""("", x, "","", y, "") はゲーム盤の範囲外の座標です"")
11          return False         
12
13  Marubatsu.place_mark = place_mark
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def place_mark(self, x, y, mark):
    if x >= 0 and x < self.BOARD_SIZE and y >= 0 and y < self.BOARD_SIZE:
        if self.board[x][y] == Marubatsu.EMPTY:
            self.board[x][y] = mark
            return True
        else:
            print(""("", x, "","", y, "") のマスにはマークが配置済です"")
            return False
    else:
        print(""("", x, "","", y, "") はゲーム盤の範囲外の座標です"")
        return False         

Marubatsu.place_mark = place_mark
```
</details>

なお、修正箇所は、かなりわかりづらかったので省略します。

下記のプログラムを実行し、`5,1` をテキストボックスに入力することで、エラーメッセージが表示されて、マークが配置されずにゲームが続行することが確認できます。実行結果は先ほどと同じなので省略します。

```python
mb.play()
```

:::note
上記のプログラムの 2 行目の if 文は、[以前の記事](https://qiita.com/ysgeso/items/1fdd19037bbf64082a42#python-%E3%81%AE%E6%AF%94%E8%BC%83%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AE%E9%80%A3%E9%8E%96%E3%81%AB%E3%82%88%E3%82%8B-and-%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AE%E7%9C%81%E7%95%A5)で紹介した、__比較演算子の連鎖__ を使って、下記のように簡潔に記述することができます。

```python
    if 0 <= x < self.BOARD_SIZE and 0 <= y < self.BOARD_SIZE:
```

<details><summary><strong>修正箇所</strong></summary>

```diff_python
-   if x >= 0 and x < self.BOARD_SIZE and y >= 0 and y < self.BOARD_SIZE:
+   if 0 <= x < self.BOARD_SIZE and 0 <= y < self.BOARD_SIZE:
```
</details>

上記のように `place_mark` を修正し、下記のプログラムを実行し、`5,1` をテキストボックスに入力することで、エラーメッセージが表示されて、マークが配置されずにゲームが続行することが確認できます。実行結果は先ほどと同じなので省略します。

```python
mb.play()
```

こちらの方がわかりやすいので、本記事でもこちらを採用することにします。
:::

## 座標に整数以外の文字を入力した場合の処理

上記の修正で、座標の入力に関するバグがすべて修正されたと思った人がいるかもしれませんが、実際には __もう一つバグ__ が残っています。それは、`a,b` のような、__整数以外__ の座標を入力した場合で、下記のプログラムを実行して __`a,b`__ を入力すると __エラーが発生__ します。

```python
mb.play()
```
実行結果
```
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
c:\Users\ys\ai\marubatsu\038\marubatsu.ipynb セル 44 line 1
----> 1 mb.play()

c:\Users\ys\ai\marubatsu\038\marubatsu.ipynb セル 44 line 2
     22     x, y = xylist
     23     # (x, y) に着手を行う
---> 24     self.move(int(x), int(y))
     26 # 決着がついたので、ゲーム盤を表示する
     27 print(self)

ValueError: invalid literal for int() with base 10: 'a'
```

:::note
上記のエラーメッセージは、以下のような意味を持ちます。

* __ValueError__
値（Value）に関するエラー
* __invalid syntax__
""a"" は、10 を基数（base）とする（10 進数の事）数値型としては不正（invalid）なリテラル（literal）である
:::

このエラーは、`x` に `""a""` という、__整数に変換__ することが __不可能な文字列__ が代入された状態で、`x` を `int` を使って __整数型__ に __変換しようとしたこと__ が原因です。

このエラーが発生しないようにする方法の一つに、`x` と `y` に __整数に変換できない__ ような文字列が代入されていた場合に、`int(x)` と `int(y)` を __実行しないようにする__ という方法がありますが、__文字列__ を __整数に変換できるかどうか__ を __判定__ することは __簡単ではありません__。

### 例外処理

別の方法として、__エラーが発生した場合__ に、プログラムの __処理__ を __停止せず__ に、__別の処理を行う__、__例外処理__ という方法があります。これまで説明していませんでしたが、プログラムの __処理が停止__ するような __エラー__ のことを __例外__（exception）と呼び、__例外処理__ では __例外が発生した際__ に __行う処理__ を下記のように記述します。

```python
try:
    プログラム
except:
    try のブロックで例外が発生した時に行う処理
```

例外処理では、以下のような処理を行います。

* __try のブロック__ のプログラムを __実行した際__ に __例外（エラー）が発生__ すると、その時点で __try のブロック__ の __処理__ を __即座に中断__ し、__except のブロック__ を __実行__ する。その際に、本来表示されるはずの __エラーメッセージ__ は __表示されず__、__プログラム__ は __停止しない__
* __try のブロック__ のプログラムを実行した際に __エラーが発生しなかった場合__ は、__except のブロック__ は __実行されない__

例外処理についての詳細については下記のリンク先を参照して下さい

https://docs.python.org/ja/3/tutorial/errors.html


__`self.move(int(x), int(y))`__ を、下記のプログラムのように __例外処理で記述__ することで、__`int(x)`__ と __`int(y)`__ を __実行__ した際に __エラーが発生__ した場合に、プログラムが __停止せず__ に、__except のブロック__ に記述した __エラーメッセージを表示__ するプログラムが __実行__ されます。従って、__エラーが発生__ した際に __`move`__ メソッドは __実行されない__ ので、着手が行われたり、手番が変わったり、`status` 属性が変化したりすることはありません。

```python
try:
    self.move(int(x), int(y))
except:
    print(""整数の座標を入力して下さい"")
```

上記のプログラムを実行する際に __`x`__ に __`""a""` が代入__ されていた場合は、__`int(x)`__ を __実行した時点__ で __例外が発生__ し、その時点で __try のブロック__ の __処理が中断__ されて即座に `except` のブロックが実行されるので、__`move`__ メソッドが __実行される__ ことは __ありません__。

下記は `play` メソッドの 24 ~ 27 行目を上記のように修正したプログラムです。

```python
 1  def play(self):
 2   # 〇×ゲームを再起動する
 3      self.restart()
 4      # ゲームの決着がついていない間繰り返す
 5      while self.status == Marubatsu.PLAYING:
 6          # ゲーム盤の表示
 7          print(self)
 8          # キーボードからの座標の入力
 9          coord = input(""x,y の形式で座標を入力して下さい。exit を入力すると終了します"")
10          # ""exit"" が入力されていればメッセージを表示して関数を終了する
11          if coord == ""exit"":
12              print(""ゲームを終了します"")
13              return       
14          # x 座標と y 座標を要素として持つ list を計算する
15          xylist = coord.split("","")
16          # xylist の要素の数が 2 ではない場合
17          if len(xylist) != 2:
18              # エラーメッセージを表示する
19              print(""x, y の形式ではありません"")
20              # 残りの while 文のブロックを実行せずに、次の繰り返し処理を行う
21              continue
22          x, y = xylist
23          # (x, y) に着手を行う
24          try:
25              self.move(int(x), int(y))
26          except:
27              print(""整数の座標を入力して下さい"")
28              
29      # 決着がついたので、ゲーム盤を表示する
30      print(self)
31
32  Marubatsu.play = play
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def play(self):
    # 〇×ゲームを再起動する
    self.restart()
    # ゲームの決着がついていない間繰り返す
    while self.status == Marubatsu.PLAYING:
        # ゲーム盤の表示
        print(self)
        # キーボードからの座標の入力
        coord = input(""x,y の形式で座標を入力して下さい。exit を入力すると終了します"")
        # ""exit"" が入力されていればメッセージを表示して関数を終了する
        if coord == ""exit"":
            print(""ゲームを終了します"")
            return       
        # x 座標と y 座標を要素として持つ list を計算する
        xylist = coord.split("","")
        # xylist の要素の数が 2 ではない場合
        if len(xylist) != 2:
            # エラーメッセージを表示する
            print(""x, y の形式ではありません"")
            # 残りの while 文のブロックを実行せずに、次の繰り返し処理を行う
            continue
        x, y = xylist
        # (x, y) に着手を行う
        try:
            self.move(int(x), int(y))
        except:
            print(""整数の座標を入力して下さい"")

    # 決着がついたので、ゲーム盤を表示する
    print(self)

Marubatsu.play = play
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def play(self):
    # 〇×ゲームを再起動する
    self.restart()
    # ゲームの決着がついていない間繰り返す
    while self.status == Marubatsu.PLAYING:
        # ゲーム盤の表示
        print(self)
        # キーボードからの座標の入力
        coord = input(""x,y の形式で座標を入力して下さい。exit を入力すると終了します"")
        # ""exit"" が入力されていればメッセージを表示して関数を終了する
        if coord == ""exit"":
            print(""ゲームを終了します"")
            return       
        # x 座標と y 座標を要素として持つ list を計算する
        xylist = coord.split("","")
        # xylist の要素の数が 2 ではない場合
        if len(xylist) != 2:
            # エラーメッセージを表示する
            print(""x, y の形式ではありません"")
            # 残りの while 文のブロックを実行せずに、次の繰り返し処理を行う
            continue
        x, y = xylist
        # (x, y) に着手を行う
-       self.move(int(x), int(y))
+       try:
+           self.move(int(x), int(y))
+       except:
+           print(""整数の座標を入力して下さい"")

    # 決着がついたので、ゲーム盤を表示する
    print(self)

Marubatsu.play = play
```
</details>

下記のプログラムを実行して `a,b` を実行すると、下記のようなエラーメッセージが表示され、プログラムが停止せずに〇×ゲームが続行することが確認できます。

```python
mb.play()
```

実行結果
```
Turn o
...
...
...

整数の座標を入力して下さい
Turn o
...
...
...
```

:::note warn
__`input`__ でキーボードから __数値を入力__ させて __処理を行いたい__ 場合は、__数値以外__ のデータが __入力__ されたときに __エラーが発生__ して __プログラムが停止しない__ ようにする必要がある。その __方法__ の一つに、__例外処理__ がある。
:::

例外処理は __便利__ ですが、__気をつけなければならない点__ がいくつか __あります__。また、今回の記事で説明していない __重要な機能__ がいくつかありますが、それらを説明するとかなり長くなるので、それらは必要になった時点で説明することにします。

## 直前に着手を行ったマークの表示

`play` メソッドでは、__着手を行うたび__ に __ゲーム盤が表示__ されますが、その際に、__どのマスに着手が行われたか__ が __わかるように表示__ を行ったほうが __わかりやすい__ と思いませんか？そこで、__直前に行われた着手__ を __区別できる__ ような __表示方法__ について考えてみて下さい。

現状のプログラムでは、__〇 のマーク__ を __半角の小文字の `o`__（オー）、__× のマーク__ を __半角の小文字の ""x""__（エックス）のように、__半角の小文字__ の __アルファベット__ で __表示__ しています。この __性質を利用__ して、__直前__ に行われた __着手__ を表す __マーク__ を、半角の __大文字で表示__ するという方法が考えらるので、本記事ではその方法を紹介します。他にもさまざまな方法が考えられるので、良い方法を思いついた方は、実際に実装してみて下さい。

### `upper` メソッドによる大文字への変換

Python の __文字列型__ のデータには、__アルファベット__ を __大文字に変換__ した __新しい文字列__ を __返す `upper`__[^2] というメソッドがあるので、__大文字への変換__ は、それを利用します。

下記は、`upper` メソッドを使って大文字に変換するプログラムです。`upper` は __アルファベット以外__ の文字は __変換しません__。また、`upper` は __新しい文字列を作成__ して返すメソッドなので、3 行目の実行結果のように __元の文字列__ は __変化しない__ 点に注して下さい。

```python
txt = ""abc1+?""
print(txt.upper())
print(txt)
```
実行結果
```
ABC1+?
abc1+?
```

`upper` メソッドの詳細については、下記のリンクを参照して下さい。

https://docs.python.org/ja/3/library/stdtypes.html?highlight=upper#str.upper

### 直前の着手を記録する属性

__直前__ に行われた __着手__ を __大文字で表示__ するためには、__直前__ に行われた __着手__ を __属性__ に __記憶__ しておく __必要__ があります。プログラムに __新しい属性__ を __追加__ するので、その属性の __名前__、__初期化処理__、__更新処理__、__利用方法__ について __考える__ ことにします。

__属性の名前__：__直前__（last）の __着手__（move）を記憶するので、__`last_move`__ という名前にする

__初期化処理__：__ゲームの開始時__ は、__直前__ の __着手__ が __存在しない__ ので、下記のプログラムのように、__`restart`__ メソッドの中の 6 行目で __`None` を代入__ して初期化する

```python
1  def restart(self):
2      self.initialize_board()
3      self.turn = Marubatsu.CIRCLE     
4      self.move_count = 0
5      self.status = Marubatsu.PLAYING
6      self.last_move = None
7  
8  Marubatsu.restart = restart
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def restart(self):
    self.initialize_board()
    self.turn = Marubatsu.CIRCLE     
    self.move_count = 0
    self.status = Marubatsu.PLAYING
    self.last_move = None
    
Marubatsu.restart = restart
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def restart(self):
    self.initialize_board()
    self.turn = Marubatsu.CIRCLE     
    self.move_count = 0
    self.status = Marubatsu.PLAYING
+   self.last_move = None
    
Marubatsu.restart = restart
```
</details>

__更新処理__：`last_move` は着手を行う際に更新されるので、下記のプログラムのように、__`move`__ メソッドの中の 6 行目で着手した座標を表す __`x, y`__ という __tuple を代入__[^3] して更新する

```python
1  def move(self, x, y):
2      if self.place_mark(x, y, self.turn):
3          self.turn = Marubatsu.CROSS if self.turn == Marubatsu.CIRCLE else Marubatsu.CIRCLE  
4          self.move_count += 1
5          self.status = self.judge()
6          self.last_move = x, y
7
8  Marubatsu.move = move  
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def move(self, x, y):
    if self.place_mark(x, y, self.turn):
        self.turn = Marubatsu.CROSS if self.turn == Marubatsu.CIRCLE else Marubatsu.CIRCLE  
        self.move_count += 1
        self.status = self.judge()
        self.last_move = x, y

Marubatsu.move = move  
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def move(self, x, y):
    if self.place_mark(x, y, self.turn):
        self.turn = Marubatsu.CROSS if self.turn == Marubatsu.CIRCLE else Marubatsu.CIRCLE  
        self.move_count += 1
        self.status = self.judge()
+       self.last_move = x, y

Marubatsu.move = move  
```
</details>

__利用方法__：`last_move` はゲーム盤の表示で利用するので、`__str__` メソッドを下記のプログラムのように修正する

* __10、11 行目__：(x, y) のマスに __直前の着手が行われている条件__ は、「`self.last_move` に `None` が代入されていない」、「`self.last_move[0]` と `x` が等しい」、「`self.last_move[1]` と `y` が等しい」の 3 つの条件が __すべて満たされた場合__ である。10 行目で __その条件を判定__ し、__満たされている場合__ は、11 行目で __`upper`__ メソッドを使って __大文字に変換__ して __表示__ する
* __12、13 行目__：上記の条件が __満たされていない__ 場合は、直前の着手が行われたマスではないので、__これまでと同じ方法で表示__ する

```python
 1  def __str__(self):
 2   # ゲームの決着がついていない場合は、手番を表示する
 3      if self.status == Marubatsu.PLAYING:
 4          text = ""Turn "" + self.turn + ""\n""
 5      # 決着がついていれば勝者を表示する
 6      else:
 7          text = ""winner "" + self.status + ""\n""
 8      for y in range(self.BOARD_SIZE):
 9          for x in range(self.BOARD_SIZE):
10              if self.last_move is not None and x == self.last_move[0] and y == self.last_move[1]:
11                  text += self.board[x][y].upper()
12              else:
13                  text += self.board[x][y]
14          text += ""\n""
15      return text
16
17  Marubatsu.__str__ = __str__
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def __str__(self):
    # ゲームの決着がついていない場合は、手番を表示する
    if self.status == Marubatsu.PLAYING:
        text = ""Turn "" + self.turn + ""\n""
    # 決着がついていれば勝者を表示する
    else:
        text = ""winner "" + self.status + ""\n""
    for y in range(self.BOARD_SIZE):
        for x in range(self.BOARD_SIZE):
            if self.last_move is not None and x == self.last_move[0] and y == self.last_move[1]:
                text += self.board[x][y].upper()
            else:
                text += self.board[x][y]
        text += ""\n""
    return text

Marubatsu.__str__ = __str__
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def __str__(self):
    # ゲームの決着がついていない場合は、手番を表示する
    if self.status == Marubatsu.PLAYING:
        text = ""Turn "" + self.turn + ""\n""
    # 決着がついていれば勝者を表示する
    else:
        text = ""winner "" + self.status + ""\n""
    for y in range(self.BOARD_SIZE):
        for x in range(self.BOARD_SIZE):
-           text += self.board[x][y]
+           if self.last_move is not None and x == self.last_move[0] and y == self.last_move[1]:
+               text += self.board[x][y].upper()
+           else:
+               text += self.board[x][y]
        text += ""\n""
    return text

Marubatsu.__str__ = __str__
```
</details>


下記のプログラムを実行し、`1,1`、`0,0`、`0,1` をテキストボックスに入力することで、直前の着手が大文字で表示されることが確認できます。

```python
mb.play()
```

実行結果

```
Turn o
...
...
...

Turn x
...
.O.
...

Turn o
X..
.o.
...

Turn x
x..
Oo.
...
```

### and 演算子と短絡評価に関する注意点

`__str__` メソッドでは、__複数の式__ を __`and` 演算子__ で __連結__ した条件式を記述しました。

```python
if self.last_move is not None and x == self.last_move[0] and y == self.last_move[1]:
```            

この条件式の __順番__ を、下記のように __変更__ すると __エラーが発生__ するようになります。

```python
if x == self.last_move[0] and self.last_move is not None and y == self.last_move[1]:
```            

エラーが発生する __理由__ は、__`self.last_move`__ に __`None` が代入__ されている場合に上記の条件式を実行すると、__最初__ の __`x == self.last_move[0]`__ の計算を行う際に、__`x == None[0]`__ が計算されることになり、__`None` は list ではない__ ので、__`None[0]` が計算できない__ からです。

__元__ のプログラムの __条件式の中__ にも __同じ `x == self.last_move[0]`__ が __記述されている__ ので、エラーが発生すると __思う人がいる__ かもしれませんが、[以前の記事](https://qiita.com/ysgeso/items/1fdd19037bbf64082a42#and-%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%A8-or-%E6%BC%94%E7%AE%97%E5%AD%90%E3%81%AE%E7%9F%AD%E7%B5%A1%E8%A9%95%E4%BE%A1)で説明した、__and 演算子の短絡評価__ によって、以下の手順で計算が行われるため __エラーは発生しません__。

1. __`self.last_move`__ に __`None` が代入されている場合__ は、最初の __`self.last_move is not None`__ が __`False`__ になる
2. __and 演算子のみ__ で __連結__ された __条件式__ は、連結された __式の計算結果__ が __1 つでも `False` になった時点__ で、__全体の計算結果__ が __`False`__ であることが __確定__ する
3. そのため、__`self.last_move is not None`__ が __`False`__ になった時点で、__残りの式__ の __計算__ が __行われない__ ので、__エラーは発生しない__

:::note warn
__and 演算子のみ__ で __連結__ された __条件式__ の中で、__計算結果が `False` になった場合__ に、__残りの式__ が __計算されないようにする__ ことを目的とした __式__ がある場合は、__その式__ は __先頭に記述__ する __必要__ がある。なお、これは __or 演算子の場合も同様__ である。
:::

### `last_move` の初期化処理の工夫

先程のプログラムでは、__`last_move`__ 属性の __初期化処理__ で、__`None` を代入__ していましたが、__`move`__ メソッドで __着手__ を行った場合に __`last_move`__ に __代入される値__ は、`1, 2` のような __tuple__ です。このように、__`last_move`__ に代入される __データ型__ が、__状況によって異なる__ と、__`last_move`__ を __利用__ した処理を行う __`__str__`__ メソッドの中で、__`self.last_move is not None`__ のような __条件式を記述__ して、__データ型ごとの処理__ を __記述__ する必要が生じます。

そこで、__`last_move`__ 属性に __代入__ する __データ型を統一する__ という工夫が考えられます。`None` のほうに統一することはできないので、__tuple に統一__ する必要がありますが、その場合に初期化処理で `last_move` にどのような値を代入すればよいかについて考えてみて下さい。

__`last_move`__ は、__最後の着手の座標__ を表すデータで、__`__str__`__ メソッドの中で、__`last_move`__ と __表示する__ (x, y) の __座標が等しい場合__ にマークを大文字で表示する際に __利用__ されます。__ゲーム開始時点__ では、__着手は行われていない__ ので、__`__str__`__ メソッドの中で __マークを大文字で表示__ する処理を __行ってはいけません__。そこで、__初期化処理__ で __`last_move`__ に〇×ゲームのゲーム盤に __存在しない座標__ を __代入__ しておくことで、__ゲーム開始時__ でマークを __大文字で表示する処理__ が __実行__ されることが __なくなります__。

__初期化処理__ で __`last_move`__ に __代入する座標__ は、ゲーム盤に __存在しない座標__ であれば __なんでもかまいません__。そこで、本記事では、下記のプログラムの `restart` メソッドの 6 行目のように __`-1, -1`__ という座標のデータを 初期化処理で `last_move` に代入することにします。

```python
1  def restart(self):
2      self.initialize_board()
3      self.turn = Marubatsu.CIRCLE     
4      self.move_count = 0
5      self.status = Marubatsu.PLAYING
6      self.last_move = -1, -1
7    
8  Marubatsu.restart = restart
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def restart(self):
    self.initialize_board()
    self.turn = Marubatsu.CIRCLE     
    self.move_count = 0
    self.status = Marubatsu.PLAYING
    self.last_move = -1, -1
    
Marubatsu.restart = restart
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def restart(self):
    self.initialize_board()
    self.turn = Marubatsu.CIRCLE     
    self.move_count = 0
    self.status = Marubatsu.PLAYING
-   self.last_move = None
+   self.last_move = -1, -1
    
Marubatsu.restart = restart
```
</details>

__`last_move`__ に常に __要素が 2 つ__ ある __tuple が代入__ されるようになったので、__str__ メソッドを下記のプログラムのようにより __簡潔に記述__ することができるようになります。

* __10 行目__：`self.last_move` には、必ず __要素が 2 つ__ ある __tuple が代入__ されるので、__tuple の展開__ を使って __`lastx` と `lasty`__ に __最後の着手の座標__ を __代入__ する
* __11 行目__：__(x, y)__ と __(lastx, lasty)__ が __等しいかどうか__ を __判定__ する

```python
 1  def __str__(self):
 2      # ゲームの決着がついていない場合は、手番を表示する
 3      if self.status == Marubatsu.PLAYING:
 4          text = ""Turn "" + self.turn + ""\n""
 5      # 決着がついていれば勝者を表示する
 6      else:
 7          text = ""winner "" + self.status + ""\n""
 8      for y in range(self.BOARD_SIZE):
 9          for x in range(self.BOARD_SIZE):
10              lastx, lasty = self.last_move
11              if x == lastx and y == lasty:
12                  text += self.board[x][y].upper()
13              else:
14                  text += self.board[x][y]
15          text += ""\n""
16      return text
17
18  Marubatsu.__str__ = __str__
```

<details><summary><strong>行番号のないプログラム</strong></summary>

```python
def __str__(self):
    # ゲームの決着がついていない場合は、手番を表示する
    if self.status == Marubatsu.PLAYING:
        text = ""Turn "" + self.turn + ""\n""
    # 決着がついていれば勝者を表示する
    else:
        text = ""winner "" + self.status + ""\n""
    for y in range(self.BOARD_SIZE):
        for x in range(self.BOARD_SIZE):
            lastx, lasty = self.last_move
            if x == lastx and y == lasty:
                text += self.board[x][y].upper()
            else:
                text += self.board[x][y]
        text += ""\n""
    return text

Marubatsu.__str__ = __str__
```
</details>

<details><summary><strong>修正箇所</strong></summary>

```diff_python
def __str__(self):
    # ゲームの決着がついていない場合は、手番を表示する
    if self.status == Marubatsu.PLAYING:
        text = ""Turn "" + self.turn + ""\n""
    # 決着がついていれば勝者を表示する
    else:
        text = ""winner "" + self.status + ""\n""
    for y in range(self.BOARD_SIZE):
        for x in range(self.BOARD_SIZE):
+           lastx, lasty = self.last_move
-           if self.last_move is not None and x == self.last_move[0] and y == self.last_move[1]:
+           if x == lastx and y == lasty:
                text += self.board[x][y].upper()
            else:
                text += self.board[x][y]
        text += ""\n""
    return text

Marubatsu.__str__ = __str__
```
</details>

# 今回の記事のまとめ

今回の記事では、`play` メソッドのさまざまな問題点を紹介し、それらの問題点を修正する方法について説明しました。今回の記事で紹介した以外の `play` メソッドの改良案を思いついた方は、独自に改良することにチャレンジしてみて下さい。

〇×ゲームを遊べるようになったので、次回の記事からは、AI の実装を開始します。

# 本記事で入力したプログラム

以下のリンクから、本記事で入力して実行した JupyterLab のファイルを見ることができます。

https://github.com/ysgeso/marubatsu/blob/master/038/marubatsu.ipynb

以下のリンクは、今回の記事で更新したした marubatsu.py です。

https://github.com/ysgeso/marubatsu/blob/master/038/marubatsu_new.py

# 次回の記事

近日公開予定です

[^1]:__最後__ に __改行__ を表す __""\n"" を結合__ することを __忘れないように__ して下さい。筆者はこの記事を最初に記述する際に、それを記述し忘れて表示がおかしくなりました
[^2]:同様のメソッドに、アルファベットを小文字に変換する [`lower`](https://docs.python.org/ja/3/library/stdtypes.html?highlight=upper#str.lower) とメソッドがあります
[^3]:`return x, y` の場合と同様に、tuple の外側の `(` と `)` を省略しています
",0,0,0,Python,解説,Pythonで〇×ゲームのAIを一から作成する　その38　play メソッドの改良,,,1,0,ysgeso,ysgeso,39,,,,,3524802,https://lh3.googleusercontent.com/a/AAcHTtc8rz8Vbcmo0sn7mvURMd7ZmK4L4cACiAxYUlRVnj-w=s96-c,False,,,,AI,〇×ゲーム,一から作る
"# はじめに
Hello Qiita_World
はじめまして、IT業界1年目の新人です。今回は初のQiitaの記事の執筆となりますが、初投稿では基盤モデルによるクチコミの感情分析体験を共有したいと思います。
感情分析は、テキストデータから感情極性（肯定的-positive、否定的-negative、中性的-neutral）を識別し、分類するプロセスです。感情分析だと現在機械学習のアプローチが主流とは思いますが、実は感情分析も分類タスクの一種類として、基盤モデル（LLM）が対応するタスクです。

# 目次
* 事前準備
  * IBM Cloud側の準備
  * 必須SDKライブラリのインストール
  * クチコミデータの準備
* コードの実行
  * パラメーターの設定
  * プロンプティング
* 感想
* まとめ

# 事前準備
必要な事前準備は以下となります。

### 1. IBM Cloud側の準備
・API接続用URLの取得
・API Keyの取得
・Project IDの取得

### 2. 必須SDKライブラリのインストール
pipを使用して、SDKライブラリのインストールを行います。
```
$ pip install ibm-watson-machine-learning
```

### 3. クチコミデータの準備
肯定的、否定的、中性的3種類のデータを25個準備しました。
データは宿泊施設のクチコミによく出る言葉とトピックを想像して作成しました。
```
ID	Answer	Input
1	0	期待通りでした。
2	1	朝食が美味しかったです。
3	-1	また利用したいと思わない。
4	0	家族旅行です。
5	1	部屋が清潔でよかった。
6	-1	部屋が狭かった。
7	0	泊まる分には問題ありません。
8	1	価格が安く、お得でした。
9	-1	残念でした。
10	0	お世話になりました。
11	1	リラックスできました。
12	-1	宿泊料がやや高いと思います。
13	0	記念日に利用しました。
14	1	心地よいです。
15	-1	周辺の音が気になって眠れませんでした。
16	0	朝食は普通でした。
17	1	快適でした。
18	-1	冷房が効かない。
19	0	ありがとうございました。
20	1	満足です。
21	-1	二度と行きません。
22	0	初めての利用です。
23	1	おすすめです。
24	-1	お勧めしません。
25	0	朝食はバイキングだった。
```

# コードの実行

今回はプロンプトラボ上ではなく、pythonから使用します。
Pythonスクリプトの作成は以下のリンクを参考して作成しました。
https://ibm.github.io/watson-machine-learning-sdk/foundation_models.html

## パラメーターの設定
```diff_python
from ibm_watson_machine_learning.metanames import GenTextParamsMetaNames as GenParams
from ibm_watson_machine_learning.foundation_models.utils.enums import DecodingMethods
from ibm_watson_machine_learning.foundation_models import Model
from ibm_watson_machine_learning.foundation_models.utils.enums import ModelTypes

parameters = {
    GenParams.DECODING_METHOD: ""sample"",
    GenParams.MAX_NEW_TOKENS: 2, 
    GenParams.MIN_NEW_TOKENS: 1,
    GenParams.TEMPERATURE: 0.05,
    GenParams.TOP_K: 5,
    GenParams.TOP_P: 0.6,
    GenParams.REPETITION_PENALTY: 1.1, 
    GenParams.STOP_SEQUENCES: [""/n""]
}

model_id = ModelTypes.LLAMA_2_70B_CHAT
```

## プロンプティング
今回はプロンプティングをメインの手段として、感情分析の精度向上を目的に色々試してみました。
### 1回目の試し
まずはzero shotで実行してみます。
```diff_python
    prompt = """"""\
    [INST]
    あなたは高度な学習能力を持つ自然言語処理の研究者としてプログラムされています。
    以下の例を用いて、クチコミから宿泊施設への感情極性を判断してください。肯定的は「1」を、否定的は「-1」を、あるいは「0」を出力してください。

    [出力の形式]
    1 or -1 or 0
    
    クチコミ
    {input}
    
    出力
    """"""
```
出力結果
```
期待通りでした。
出力: 1
==========
朝食が美味しかったです。
出力: 1
==========
また利用したいと思わない。
出力: この
==========
家族旅行です。
出力: 1
==========
部屋が清潔でよかった。
出力: 1
==========
部屋が狭かった。
出力: 1
==========
泊まる分には問題ありません。
出力: 1
==========
価格が安く、お得でした。
出力: 1
==========
残念でした。
出力: 
==========
お世話になりました。
出力: こん
==========
リラックスできました。
出力: 1
==========
宿泊料がやや高いと思います。
出力: 1
==========
記念日に利用しました。
出力: 新
==========
心地よいです。
出力: この
==========
周辺の音が気になって眠れませんでした。
出力: 
==========
朝食は普通でした。
出力: 1
==========
快適でした。
出力: 非常
==========
冷房が効かない。
出力: 1
==========
ありがとうございました。
出力: こん
==========
満足です。
出力: 不
==========
二度と行きません。
出力: 一度
==========
初めての利用です。
出力: この
==========
おすすめです。
出力: この
==========
お勧めしません。
出力: この
==========
朝食はバイキングだった。
出力: 1
==========
```
zero shotだとすべて指定した出力の形式通りで出力してくれないんですね。
### 2回目の試し
zero shotからfew shot学習へ進化したらどれぐらい精度があがるんでしょうか？
それでは、例を与えてみましょう。今回はランダムに例を与えてみました。
```diff_python
    prompt = """"""\
    [INST]
    あなたは高度な学習能力を持つ自然言語処理の研究者としてプログラムされています。
    以下の例を用いて、クチコミから宿泊施設への感情極性を判断してください。肯定的は「1」を、否定的は「-1」を、あるいは「0」を出力してください。

    [出力の形式]
    1 or -1 or 0

    クチコミ
    従業員の接客が丁寧でした。
    
    出力
    1
    
    
    クチコミ
    スタッフの態度が悪かった。
    
    出力
    -1
    

    クチコミ
    家族旅行です。
    
    出力
    0

    
    クチコミ
    {input}
    
    出力
    """"""
```
few shot学習による1回目の結果
```
期待通りでした。
出力: 1
==========
朝食が美味しかったです。
出力: 1
==========
また利用したいと思わない
出力: 0
==========
家族旅行です。
出力: 0
==========
部屋が清潔でよかった。
出力: 1
==========
部屋が狭かった
出力: 0
==========
泊まる分には問題ありません。
出力: 0
==========
価格が安く、お得でした。
出力: 1
==========
残念でした。
出力: 0
==========
お世話になりました。
出力: 1
==========
リラックスできました。
出力: 1
==========
宿泊料がやや高いと思います。
出力: 0
==========
記念日に利用しました。
出力: 1
==========
心地よいです。
出力: 1
==========
周辺の音が気になって眠れませんでした。
出力: 0
==========
朝食は普通でした。
出力: 0
==========
快適でした。
出力: 1
==========
冷房が効かない
出力: 0
==========
ありがとうございました。
出力: 1
==========
満足です。
出力: 1
==========
二度と行きません。
出力: -1
==========
初めての利用です。
出力: 0
==========
おすすめです。
出力: 1
==========
お勧めしません。
出力: 0
==========
朝食はバイキングだった
出力: 1
==========
```
それぞれの感情極性の例を与えてみたら、精度が一気に上がりました！
出力結果を見てみますと、今回25件の中で肯定的なデータは８件準備したことに対して、肯定的な感情判断は１００％正解でした。一方、中性的と否定的な例の判定はまだまだ改善の余地がありますね。
### 3回目の試し
学習させる例を修正してみました。
```diff_python
    prompt = """"""\
    [INST]
    あなたは高度な学習能力を持つ自然言語処理の研究者としてプログラムされています。
    以下の例を用いて、クチコミから宿泊施設への感情極性を判断してください。肯定的は「1」を、否定的は「-1」を、あるいは「0」を出力してください。

    [出力の形式]
    1 or -1 or 0

    クチコミ
    従業員の接客が丁寧でした。
    
    出力
    1
    

    クチコミ
    普通以下でした。
    
    出力
    -1
    

    クチコミ
    家族旅行です。
    
    出力
    0


    クチコミ
    {input}
    
    出力
    """"""
```
few shot学習による2回目の結果
```
期待通りでした。
出力: 1
==========
朝食が美味しかったです。
出力: 1
==========
また利用したいと思わない
出力: -1
==========
家族旅行です。
出力: 0
==========
部屋が清潔でよかった。
出力: 1
==========
部屋が狭かった
出力: -1
==========
泊まる分には問題ありません。
出力: 1
==========
価格が安く、お得でした。
出力: 1
==========
残念でした。
出力: 0
==========
お世話になりました。
出力: 1
==========
リラックスできました。
出力: 1
==========
宿泊料がやや高いと思います。
出力: 0
==========
記念日に利用しました。
出力: 1
==========
心地よいです。
出力: 1
==========
周辺の音が気になって眠れませんでした。
出力: -1
==========
朝食は普通でした。
出力: 0
==========
快適でした。
出力: 1
==========
冷房が効かない
出力: -1
==========
ありがとうございました。
出力: 1
==========
満足です。
出力: 1
==========
二度と行きません。
出力: -1
==========
初めての利用です。
出力: 0
==========
おすすめです。
出力: 1
==========
お勧めしません。
出力: -1
==========
朝食はバイキングだった
出力: 1
==========
```
例を変えてみると・・・精度がさらに上がりました！
否定的なクチコミの例を「スタッフの態度が悪かった。」から「普通以下でした。」へ変更すると精度が上がる理由は何でしょうかね。
推測ですが、例の内容によって生成AIによる感情極性の「否定的な」判断基準が変わるではないかと思いました。プロンプティングには自然言語への高度な理解が必要ではないかと考えました。

# 感想
今回メインの感想として、感情極性の判断の難しさを実感しました。人によって理解する感情も少し主観的な部分もあると思います。
```
期待通りでした。
出力: 1
```
上記を一例として、3回目の試しで出力結果を分析する時、私は「期待通り」という言葉が中性的と肯定的両方とも解釈できるではないかと考えました。そのため、感情「極性」とはいえ、明確の基準と文脈がない限り直接な判断は難しいと思いました。

その一方、今回は100%の精度の実現が難しかったが、今回初心者としてプロンプティングにかけた時間はわずか2時間ほどです。プロンプティングに工夫したら、短時間で精度を上がることが可能と感じました。生成AIによる感情分析は機械学習より、必要な事前準備が少なく、専門的な知識がなくても簡単に試せるメリットを感じました。データサイエンティストに限らず、一般のユーザー（特にマーケティング関連の方々）でも気軽に基盤モデルを使って製品やサービスに対する顧客の感情を分析できることが魅力ですね。

# まとめ
本記事では、基盤モデルによるクチコミの感情分析を試してみました。また、今回はプロンプティングをメインの手段として、感情分析の精度向上を目的に色々試してみました。

本記事は以上です。ありがとうございました！
",0,0,0,初心者,感情分析,watsonx.aiを使って基盤モデルによるクチコミの感情分析を試してみた,,,1,0,siyuanzh09,siyuanzh09,1,,,,,3635656,https://avatars.githubusercontent.com/u/37350251?v=4,False,,,,WatsonAPI,watsonx,watsonx.ai
"# はじめに
まずこちらをご覧ください。タイトルの通りですが、初歩的なミスによりAWSで100万円溶かしました。生き恥を晒しています。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/466700/51bf4852-5c36-3c9e-2b02-25481a495543.png)

この記事では、私がどのようにこの大金を失ったのか、そしてその教訓について共有します。そして、「世の中にはこんな間抜けな人間がいるんだなぁ」というエンタメとして楽しんで貰えればと思います。

# 勉強が高くついた
私がAWSを触った目的は、RDSやEC2を使ってアプリ開発の勉強をし、GlueやAthenaなどのサービスにも少し手を出してみることでした。しかし、6月から11月の間に気づかぬうちに100万円が消えていました。

# 原因

### 原因1: サービスの停止忘れ
開発したEC2インスタンスなどのサービスは停止するのが基本です。しかし私は一部のサービスを停止することを忘れていたため、不要なコストが発生していました。さらに、私はEC2インスタンスだけでなく、スナップショットの保持にも費用がかかることを知らず、追加のコストが発生していることに気づきませんでした。


### 原因2: 無料枠の過信
AWSの無料枠があると高を括り、実際の使用量を見落としていました。無料枠といってもサービスごとに利用上限があります。例えば、EC2なら月750時間まで無料だが、私の場合は試行錯誤のために複数個のEC2インスタンスを建てており、上限を超えてしまっていました。
[AWS 無料利用枠](https://docs.aws.amazon.com/ja_jp/whitepapers/latest/how-aws-pricing-works/get-started-with-the-aws-free-tier.html)

### 原因3: クレジットカードの未確認
私は数ヶ月間、クレジットカードの支払いを確認していませんでした。口座残高はチェックしていたものの、直近で大きな買い物や定期投資もしていたため、「まぁこんなもんかなぁ」と思い込んでいました。気が付いた時には手遅れでした。

# 結果と対応
AWSに事情を説明したところ、最近の支払い30万円余りは返金してもらえました。
AWSのサポートは非常に親切でしたが、残りの70万円については返金が難しいとのことでした。
(詳細な理由の個別回答は難しいということでしたが、もしかしたら直近2～3ヶ月の支払いだけが対象となるのかもしれません)
少なくとも気が付くのが早ければ早い方が良いということですね。

# 対策方法
### 1. 支払い上限の設定
対策の中で、最も重要です。AWSの支払い上限を設定し、予期せぬ高額請求を防ぎます。面倒くさいかもしれないですが、実務では必須になると思うので覚えましょう。手順通りに実施するだけです。
[請求アラームの作成方法](https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html)

### 2. サービスの適切な管理
EC2などのサービスは使用しない時は必ず停止するようにします。これは意識して停止出来れば世話がないですが、停止忘れのためにも1.のアラート設定は優先的に行いましょう。

### 3. 定期的な支払い確認
クレジットカードの支払いは定期的に確認し、予期せぬ出費を避けます。クレジットカードの不正利用対策にもなるので、AWSに限らずクレジットカードの支払いは定期的に見ておきましょう。

# まとめ
私のような失敗を避けるためにも、定期的な支払い確認とサービスの適切な管理が重要です。詰まるところ、当たり前のことを当たり前に実施しましょうという話です。
そして、100万円を失い恥を晒しても、人間は意外と前向きに生きていけることを学びました。むしろ人生が変わったなくらいの感覚で、多少のミスに動じなくなりました。
最後に、私の失敗談を聞いて「自分のミスなんて大したことないな...」と少しでも前向きになる方がいれば嬉しいです。
",0,1,0,AWS,,AWSで100万円溶かした話,,,1,0,,sk_bono36,3,,,,,466700,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/466700/647dbc30c20ce7e1817a42a7bba346fd006fbb52/x_large.png?1680177300,False,Bo_no36,,,,,
"# 結論
VueRouterを使用して、サブディレクトリへのアクセスをもとにルーティングを行いたいときはトップディレクトリを参照するようにサーバー側の設定が必要。

例
下記のように、www.website.com/app にアクセスした際にはAppHomeを、www.website.com/app/aboutにアクセスした際にはAboutコンポーネントを表示させたいとする。
AppHomeの表示に関しては、特に気にすることなく、サーバー側の公開ディレクトリにビルド後のファイルを配置すれば正常に表示される。
一方で、Aboutの表示は、そのままでは404NotFoundなどの結果が返ってくる。

``` main.ts
const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: [
    {
      path: '/',
      name: 'home',
      component: AppHome,
    },
    {
      // サブディレクトリへのアクセスを制御したい
      path: '/about',
      name: 'about',
      component: About
    },
    {
      path: '/:catchAll(.*)',
      component: ERR404
    }
    ...
```
# 理由・解決法
- サブディレクトリ www.website.com/app/about に対するリクエストを受けたWEBサーバーは/app/about/index.htmlを探しに行くが、そのようなディレクトリ・ファイルは存在せず、404エラーを返すため。
- VueRouterに処理をさせるには、リクエストをVueRouterまで届けないといけない
- 具体的には、Vueの場合は、/app/about へのアクセスを、/app に対してリダイレクトさせる必要がある

# 解決法具体例 Nginxの場合
wwww.website.com/app/* に対してアクセスがあった際に該当ファイルがなければ、/appへリダイレクトされ、/app配下のvueアプリケーションまでリクエストが届けられ、VueRouterで処理がなされる。
``` nginx.conf
	#For Vue-Router
	location /app {
		files $uri $uri/ /app;
	}
```

# 余談と経緯
- VueRouterを使用して上記のようなことをした際に、ローカルの開発環境では問題ないが、ビルドしてサーバーに上げるとサブディレクトリへのアクセス404になるという現象に遭遇し時間をとられた。
- VueRouterというくらいだから、サーバーへのアクセスよしなにやってくれるんだ楽ちんくらいの気持ちでおり、WEBサーバーとVueとのやり取りの仕組みをよく理解せず使っていたため、解決に時間がかかった。
- nginx の confファイルが複数あり、書いても書いても反映されずにそこでも時間をくった
",0,0,0,nginx,Vue.js,VueRouter を使う際のサーバー設定,"車載組み込み（C言語）関連の仕事。
好きなもの：Python,AWS,js,電子回路,M5stack,Arduino,...

電子デバイスの試作請負や業務効率化のアプリ開発/VBAマクロ開発も個人でやってます。",,58,12,trickre,trickre,34,,Fukuoka､Japan,,,26413,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/26413/profile-images/1573135734,False,,,,vuerouter,,
"# struct (値型)
各インスタンスはデータの**コピーを保持する！**
変数や定数に代入するときや関数に渡すときに、新しいインスタンス (コピー) を作成する
# class (参照型)
各インスタンスはデータの**コピーを共有する！**
一度初期化された型は、変数または定数に割り当てられるか、関数に渡されると、同じ既存のインスタンスへの参照を返す！

# deep copy(深いコピー)でstructを理解！
ディープコピー(深いコピー)とは**完全な複製**を作成するコピーです。
生成時点のデータをコピーした実体を作成する。
完全な複製を作成するので、コピー元とコピー先は別々の実体を参照することとなる。
サンプルコードをPlaygroundで動かしてみて、理解を深めましょう！
```swift:
 struct Info {
    var count = 0
}

class VC1 {
    var info: Info
    init(info: Info) {
        self.info = info
    }
}
class VC2 {
    var info: Info
    init(info: Info) {
        self.info = info
    }
}

let info = Info()
let vc1 = VC1(info: info)
let vc2 = VC2(info: info)
vc1.info.count = 10
vc1.info.count// ①これはいくつ？
vc2.info.count// ②これはいくつ？
info.count // ③これはいくつ？
```
**問題①〜③はいくつになるでしょうか？**


![e82d70f92dc577d951a761c8530a3b84.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3090887/7445bbf2-0e81-ce4d-1321-c7f64480c26a.png)

上記の図のようにコピー元のinfoのディープコピーを行い、vc1、vc2のコピーが作成される。
その際、その時点の実体もコピーされるので、info、vc1、vc2は別々の実体を指す。
` vc1.info.count `を10にしても、別々の実体なので` vc2.info.count `と` info.count `に変更は反映されず、0になります！
**答え**
```swift
vc1.info.count// ① 10
vc2.info.count// ② 0
info.count // ③ 0
```



# shallow copy (浅いコピー)でclassを理解！

シャローコピー(浅いコピー)とは**実体（データ）のコピーを行わない**コピーです。
そのため、コピーを共有することができる！
コピーを共有するので、コピー元とコピー先は同じ実体を参照することとなる。
サンプルコードをPlaygroundで動かしてみて、理解を深めましょう！
```swift:
class Info {
    var count = 0
}

class VC1 {
    var info: Info
    init(info: Info) {
        self.info = info
    }
}
class VC2 {
    var info: Info
    init(info: Info) {
        self.info = info
    }
}

let info = Info()
let vc1 = VC1(info: info)
let vc2 = VC2(info: info)
vc1.info.count = 10
vc2.info.count // これはいくつ？
info.count // これはいくつ？
```

![ea43565b45a7ee573cab1541a662dbcf.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3090887/b72996c6-3b50-c68b-361a-96a1f19f5cc1.png)


上記の図のようにコピー元のinfoのシャローコピーを行い、vc1、vc2のコピーが作成される。
その際、info、vc1、vc2は同じ実体を参照しているので、値を共有することができる！
` vc1.info.count `を10にすると、同じ実体を参照するので、` vc2.info.count `と` info.count `にも変更が反映され、10になります！
**答え**
```swift
vc1.info.count// ① 10
vc2.info.count// ② 10
info.count // ③ 10
```

# 参考文献
https://medium.com/@thaoth58/shallow-copy-and-deep-copy-in-swift-f1ce6908376e

https://medium-company.com/%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%82%B3%E3%83%94%E3%83%BC%E3%81%A8%E3%82%B7%E3%83%A3%E3%83%AD%E3%83%BC%E3%82%B3%E3%83%94%E3%83%BC%E3%81%AE%E9%81%95%E3%81%84/
",0,1,0,Swift,文法,structとclassの違いを理解しよう！~deep copyとshallow copyの理解~,"iOSエンジニアを目指して学習しています。金融業界で働きながら、Swift独学で勉強中。
「いつか応援される立場から誰かを応援できる人になりたい！」",,17,15,,hinakko,26,,,,,3090887,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3090887/78acc70f93fd3e47c417e67a05f59efab56a62c0/large.png?1698932288,False,hinakkograshi,,,,,
"環境構築の本を執筆しました。
よかったらご覧ください。
https://zenn.dev/nori1234/books/ce09094f5f4371?fbclid=IwAR2QQLFVU6YKWk-u_Hi4j8mnyI1VL_yTxdg4tpu8tbPd31C4K_5dW2BIGYw_aem_AaiI_5F70BWIF_WuXRgxTsytQDrB_wDthiURpPLxqjBjWK81YzPxH58QmvSN2jveeRQ
",0,0,0,Python,Django,django+nginx±uwsgi+centos8の環境構築,経験うん１０年のコボラー。汎用機在住だが、新しい世界へ絶賛チャレンジ中です。世の中の凄腕ITエンジニアの方どうぞ温かい目で見守ってください。,,1,1,,norizo_no1,18,,,Norizo,,3571777,https://secure.gravatar.com/avatar/b1b4e0ac024fc6c6dffcd09228f94192,False,,,,nginx,uwsgi,centos8
"# 背景

Azure ML Studio の Notebooks で LangChain を試してみようとしたところ、
サンプルコードがそのままでは動かないってのがあったので、修正点について備忘録

# 概要

- LangChain で、OpenAI 系が、Azure 用に分離したので、その対応が必要
- OpenAI Python API ライブラリ 1.x への移行

# LangChain 移行例

例なので、実際はここに表現している変更点以外もあるので、
usage example を確認しつつ行おう。


## LLMs: OpenAI ⇒ AzureOpenAI

```python: 変更前
from langchain.llms import OpenAI

os.environ[""OPENAI_API_TYPE""] = ""azure""
os.environ[""OPENAI_API_KEY""] = ""...""
os.environ[""OPENAI_API_BASE""] = ""https://<your-endpoint>.openai.azure.com/""

llm = OpenAI(
    model_name='<model name>', 
    model_kwargs={""deployment_id"":""<deployment name>""}
)
```

```python: 変更後
os.environ[""OPENAI_API_TYPE""] = ""azure""
os.environ[""OPENAI_API_VERSION""] = ""2023-05-15""
os.environ[""OPENAI_API_BASE""] = ""...""
os.environ[""OPENAI_API_KEY""] = ""...""

# Import Azure OpenAI
from langchain.llms import AzureOpenAI

# Create an instance of Azure OpenAI
# Replace the deployment name with your own
llm = AzureOpenAI(
    deployment_name=""td2"",
    model_name=""gpt-3.5-turbo-instruct"",
)
```

https://python.langchain.com/docs/integrations/llms/azure_openai

## Chat models: ChatOpenAI ⇒ AzureChatOpenAI

```python: 変更前
from langchain.chat_models import ChatOpenAI

os.environ[""OPENAI_API_TYPE""] = ""azure""
os.environ[""OPENAI_API_KEY""] = ""...""
os.environ[""OPENAI_API_BASE""] = ""https://<your-endpoint>.openai.azure.com/""

chat = ChatOpenAI(
    model_name='gpt-35-turbo',
    model_kwargs={""deployment_id"":""your-deployment-name""}
)
```

```python: 変更後
from langchain.chat_models import AzureChatOpenAI

os.environ[""AZURE_OPENAI_API_KEY""] = ""...""
os.environ[""AZURE_OPENAI_ENDPOINT""] = ""https://<your-endpoint>.openai.azure.com/""

model = AzureChatOpenAI(
    openai_api_version=""2023-05-15"",
    azure_deployment=""your-deployment-name"",
)
```

https://python.langchain.com/docs/integrations/chat/azure_chat_openai




## embeddings: OpenAIEmbeddings ⇒ AzureOpenAIEmbeddings

これに関しては、LangChain 公式でも、まだ記載が古いので間違えやすそう

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/120072/2e2ab475-9c82-85b2-4492-005f103d9688.png)

https://python.langchain.com/docs/integrations/platforms/openai#text-embedding-model

```python: 変更前
os.environ[""OPENAI_API_TYPE""] = ""azure""
os.environ[""OPENAI_API_KEY""] = ""...""
os.environ[""OPENAI_API_BASE""] = ""https://<your-endpoint>.openai.azure.com/""


from langchain.embeddings import OpenAIEmbeddings

embeddings = OpenAIEmbeddings(
    model='text-embedding-ada-002',
    deployment=""test-embedding-ada""
)
```

```python: 変更後
os.environ[""AZURE_OPENAI_API_KEY""] = ""...""
os.environ[""AZURE_OPENAI_ENDPOINT""] = ""https://<your-endpoint>.openai.azure.com/""


from langchain.embeddings import AzureOpenAIEmbeddings

embeddings = AzureOpenAIEmbeddings(
    azure_deployment=""<your-embeddings-deployment-name>"",
    openai_api_version=""2023-05-15"",
)
```

https://python.langchain.com/docs/integrations/text_embedding/azureopenai

# openai Python 0.28 ⇒ 1.x

Azure ML Notebooks で openai を install すると最新バージョンである 1.x 系となる。
で、そうなると呼び出し方も色々と変わるので、それぞれ確認しながらやるしかなさそう

まぁ、そうはいっても使い方に大きな変更はなさそうなので、
Qiita 上のサンプルも簡単に動かせる感じです。

以下、変更例の一部

```python: 変更前
import openai

completion = openai.ChatCompletion.create(
```

```python: 変更後
from openai import AzureOpenAI

client = AzureOpenAI(
    api_version=api_version,
    azure_endpoint=endpoint,
    azure_ad_token_provider=token_provider,
)

completion = client.chat.completions.create(
```

ってことで、Microsoft さんの情報を確認しながら移行しましょう。

https://learn.microsoft.com/ja-jp/azure/ai-services/openai/how-to/migration?tabs=python%2Cdalle-fix#use-your-data

# あとがき

環境変数といい、引数名といい統一されていないので、
これらの統合も今後来るんだろうなぁ・・という気はするので、
そのうちまた破壊的変更になりますな :sweat: 

とはいえ、LangChain 触ると、開発してる人達はほんとに素晴らしいなぁと感じますね。 :laughing:  
",0,0,0,Azure,langchain,"Azure OpenAI で LangChain を使う場合、""Azure""用に。openai==0.28 ⇒1.0 の移行はMS-Learnで","愛知に戻る方法模索中。Power Platformやc#が好き。教務改善、教育、創発辺りが楽しみ。
AWS、ROS2/C++、ときて今度は Azure へ
",,15,46,baku2san,baku2san,289,,"Kanagawa, Japan",taka,,120072,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/120072/4fa7e459824237ef63a3b504d6d46c654f02b6e5/large.png?1626670612,False,baku2san,,,AzureOpenAIService,AzureMLStudio,MS-Learn
"こんにちは、なりかくんと申します。
この記事はなりかくん Advent Calender 2023の21日目の記事です。

今回は、どのAIがプログラミングに強いのかを簡単に調べてみます。

# 調査対象のAI
今回調査に使うAIは以下のサービスです。

- ChatGPT GPT-3.5
- Google Bard
- Bing AI (厳密)

# 使う問題
今回は、AtCoder内の問題を利用させていただこうと思います。

https://atcoder.jp/contests/tessoku-book/tasks/tessoku_book_l

# 言語について
今回、言語は C言語 と Python の二種類を3回ずつ生成して試してみます。

# 渡す文章について
今回このように用意しました。
```
競技プログラミングの問題です。この問題のコードを教えてください。
なお、プログラミング言語は C言語 でお願いします。

・問題
N 台のプリンターがあり、1 から N までの番号が付けられています。プリンターi は Ai 秒ごとにチラシを 1 枚印刷します。すなわち、スイッチを入れてから Ai 秒後、
2Ai 秒後、 3Ai 秒後･･･ に印刷します。すべてのプリンターのスイッチを同時に入れたとき、K 枚目のチラシが印刷されるのは何秒後でしょうか。

・制約
- 1≤N≤100000
- 1≤K≤10^9
- 1≤Ai≤10^9
- 答えは 10^9 を超えない
- 入力はすべて整数

・入力
入力は以下の形式で標準入力から与えられます。

N　K
A1 A2 ⋯ AN
​
・出力
何秒後に K 枚目のチラシが印刷されるかを一行で出力してください。

・入力例 1
4 10
1 2 3 4

・出力例 1
6
```

# 略称について
AC 正解
WA 不正解
CE コンパイルエラー
RE 実行時エラー

# ChatGPT
C 1回目 WA
https://atcoder.jp/contests/tessoku-book/submissions/48696598
C 2回目 AC
https://atcoder.jp/contests/tessoku-book/submissions/48696646
C 3回目 WA
https://atcoder.jp/contests/tessoku-book/submissions/48696673

Python 1回目 AC
https://atcoder.jp/contests/tessoku-book/submissions/48697085
Python 2回目 AC
https://atcoder.jp/contests/tessoku-book/submissions/48697121
Python 3回目 AC
https://atcoder.jp/contests/tessoku-book/submissions/48697155

# Google Bard
C 1回目 RE
https://atcoder.jp/contests/tessoku-book/submissions/48696891
C 2回目 CE
https://atcoder.jp/contests/tessoku-book/submissions/48696954
C 3回目 CE
https://atcoder.jp/contests/tessoku-book/submissions/48697004

Python 1回目 RE
https://atcoder.jp/contests/tessoku-book/submissions/48697186
Python 2回目 WA
https://atcoder.jp/contests/tessoku-book/submissions/48697230
Python 3回目 RE
https://atcoder.jp/contests/tessoku-book/submissions/48697265

# Bing AI
C 1回目 AC
https://atcoder.jp/contests/tessoku-book/submissions/48696939
C 2回目 WA
https://atcoder.jp/contests/tessoku-book/submissions/48697046
C 3回目 AC
https://atcoder.jp/contests/tessoku-book/submissions/48697070

Python 1回目 AC
https://atcoder.jp/contests/tessoku-book/submissions/48697224
Python 2回目 AC
https://atcoder.jp/contests/tessoku-book/submissions/48697253
Python 3回目 AC
https://atcoder.jp/contests/tessoku-book/submissions/48697304

# 結果まとめ
結果をまとめるとこのようになりました。
Google Bardはボロボロですね。ChatGPT GPT-3.5とBing AIがかなり良い正答率です。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/549951/f2791fd6-70bd-df62-8b99-0875720482db.png)

結果を見るとBing AIが今回の実験では一番優勢でした。
最近Google Bardでは、Google Workspaceなどと連携できるなどあったみたいなので、使いどころを考えながらサービスを使うと良さそうです。

ChatGPT GPT-4は、契約してないので使うことが出来なかったのですが、どうなんでしょうか。

# 最後に
皆さんもいろいろ試してみてください。最後までお読みいただきありがとうございました。
",0,0,0,AtCoder,AI,[21日目] どのAIがプログラミングに強いのか,そこら辺に住んでいるエンジニア,,2,22,narikakun,narikakun,52,,"Osaka, Japan",なりかくん,Narikakun Network,549951,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/549951/profile-images/1667747478,False,narikakun,https://narikakun.net/,,ChatGPT,Bard,BingAI
"・下記で紹介しております。
https://liberation-of-se-like-slaves.net/aws_clf_c02/
",0,0,0,AWS,資格,【CLF-C02】AWSクラウドプラクティショナーの勉強方法・問題の感想や注意点について,,,1,1,,infra-enthusiast,11,,Japan,インフラエンジニアの 成り損ない,JTC,1018148,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/1018148/41a74f36aa6bf639f8db83e25a360e366a70c884/large.png?1650553964,False,,https://liberation-of-se-like-slaves.net/,,CLF,CLF-C02,
"[<B>MATLAB/Simulink Advent Calendar 2023</B>](https://qiita.com/advent-calendar/2023/matlab)に参加しました。

カレンダー2の12/20分として追加しました。

・使用ツール
<dt>　MATLAB</dt>
<br>

<H4><a href=""https://note.com/leftbank/n/n963bb83a7f7a""</a> [<B>note</B>]にUpしました。</H4>
",0,0,0,MATLAB,3Dオーディオ,CEDEC2023講演 まとめ ～ イヤホンの頭内定位を解消する独自技術 AudiiSion EP  とは,,,1,3,,cafe_on_the,17,,,leftbank,Audiision  Sound Lab. LLC.,2260243,https://pbs.twimg.com/profile_images/670674683/Luna070101_bigger.jpg,False,cafe_on_the,https://note.com/leftbank/,,HRTF,,
"・下記で解説しております。
https://liberation-of-se-like-slaves.net/bigip%e3%81%a7%e8%b1%aa%e8%8f%af%e3%81%aasorry%e7%94%bb%e9%9d%a2%e3%82%92%e5%ae%9f%e8%a3%85%e3%81%99%e3%82%8b%e6%96%b9%e6%b3%95%ef%bd%9e%e8%a9%b3%e7%b4%b0%e8%a7%a3%e8%aa%ac%ef%bd%9e/
",0,0,0,big-ip,Sorryサーバ,BIGIPで豪華なSorry画面を実装する方法～詳細解説～,,,1,1,,infra-enthusiast,11,,Japan,インフラエンジニアの 成り損ない,JTC,1018148,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/1018148/41a74f36aa6bf639f8db83e25a360e366a70c884/large.png?1650553964,False,,https://liberation-of-se-like-slaves.net/,,iRule,,
"・下記の記事で解説しています。
https://liberation-of-se-like-slaves.net/rollback-on-nexus/

",0,0,0,Cisco,CCNP,Nexus9000 SeriesでROLLBACKを使用し、戻し作業を一行のコマンドで行う,,,1,1,,infra-enthusiast,11,,Japan,インフラエンジニアの 成り損ない,JTC,1018148,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/1018148/41a74f36aa6bf639f8db83e25a360e366a70c884/large.png?1650553964,False,,https://liberation-of-se-like-slaves.net/,,Nexus9000,,
"・下記の記事にて解説しています。
https://liberation-of-se-like-slaves.net/checkpoint-nexus/

",0,0,0,Cisco,CCNP,Nexus9000 Series Checkpoint(rollback出来るようにconfigを保存する機能)について解説,,,1,1,,infra-enthusiast,11,,Japan,インフラエンジニアの 成り損ない,JTC,1018148,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/1018148/41a74f36aa6bf639f8db83e25a360e366a70c884/large.png?1650553964,False,,https://liberation-of-se-like-slaves.net/,,Nexus9000,,
"・下記の記事で解説しています。
https://liberation-of-se-like-slaves.net/how-to-user-erspan/
",0,0,0,Cisco,CCNP,ERSPAN(Encapsulated Remote Switched Port Analyzer)を詳細に解説,,,1,1,,infra-enthusiast,11,,Japan,インフラエンジニアの 成り損ない,JTC,1018148,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/1018148/41a74f36aa6bf639f8db83e25a360e366a70c884/large.png?1650553964,False,,https://liberation-of-se-like-slaves.net/,,,,
"AWS re:Invent 2023で発表されたこちらの機能をTerraformで有効可する方法です。


https://aws.amazon.com/jp/blogs/news/introducing-amazon-guardduty-ecs-runtime-monitoring-including-aws-fargate/


TerraformのGitHubの数日に一回くらいIssue検索しながら緩く待っていたのですが、Issueに上がってこないということはドキュメントに無いだけで設定できるのではということでやってみました。

APIに渡すFeature Nameはこちらの公式から `RUNTIME_MONITORING.additionalConfiguration.ECS_FARGATE_AGENT_MANAGEMENT` だということがわかりました。


https://docs.aws.amazon.com/guardduty/latest/ug/guardduty-feature-object-api-changes-march2023.html

ということで、そのままTerraformに埋め込んでみました。ECS Fargateだけ対象としたい場合は以下の通りです。

```terraform
resource ""aws_guardduty_detector"" ""this"" {
  enable = true
}

resource ""aws_guardduty_detector_feature"" ""ecs_fargate_agent_runtime"" {
  detector_id = aws_guardduty_detector.this.id
  name        = ""RUNTIME_MONITORING""
  status      = ""ENABLED""
  additional_configuration {
    name   = ""EKS_ADDON_MANAGEMENT""
    status = ""DISABLED""
  }
  additional_configuration {
    name   = ""ECS_FARGATE_AGENT_MANAGEMENT""
    status = ""ENABLED""
  }
}
```


これで有効化できました。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/116068/f148dcb8-f1bc-4a1b-f476-61e787944f16.png)


",0,0,0,AWS,Terraform,TerraformでGuardDutyのAWS Fargate のRuntime脅威検知を有効化する,"
",,15,42,yomon8,yomon8,59,yusukeotomo,,大友 佑介,BeeX Inc.,116068,https://qiita-image-store.s3.amazonaws.com/0/116068/profile-images/1534552514,False,,https://yomon.hatenablog.com,,Fargate,,
"## 前置き

普段Goで遊んでいるのですが、久しぶりにJavaでアプリを作りたいと思いました。せっかくなら記述方法が大幅に変更されたSpringSecurityを使ってCSRF対策を行いたいと思い、今回SpringSecurityの記事を読み漁りました。
2023年以降にバージョンアップされて書き方が変わっているのでChat-GPTも対応していないかと思います（多分）。
忘れないためにもハンズオン形式で学習してみましょう。

## 目次
- CSRFとは
- ハンズオン

## CSRFとは

「んなもん知ってるわボケ」という人は飛ばしてください。

1\. [Spring Security公式ページ](https://spring.pleiades.io/spring-security/reference/features/exploits/csrf.html#csrf-explained)
2\. [ITを分かりやすく解説](https://medium-company.com/%E3%82%AF%E3%83%AD%E3%82%B9%E3%82%B5%E3%82%A4%E3%83%88%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%82%B8%E3%82%A7%E3%83%AA/) 

上記に詳しい説明が載っていますが簡単にまとめますと、「サイトAのセッション情報やらCookieの情報を悪用して第三者が他人に成りすまして不正なリクエストを送る」というものです。

## ハンズオン
では実際にCSRF対策をSpringSecurityで行っていきましょう。
参考は[こちら](https://spring.pleiades.io/spring-security/reference/servlet/exploits/csrf.html)

まず最初にSpringBootアプリケーションを作成しましょう。
MavenでもGradleでもどちらでも構いません。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3039114/7a37b4c9-4592-80e2-56c4-64cf80acaa2f.png)


次に、MavenまたはGradleにSpringSecurityを使用する旨を書きましょう。
```xml:pom.xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```
```gradle:build.gradle
dependencies {
	implementation ""org.springframework.boot:spring-boot-starter-security""
}
```

以上で、コードを書く準備が整いました。

### MainController.java

次にリクエストの制御を行うMainControllerを作成していきます。
```Java:MainController.java
package com.example.demo;

import org.springframework.security.web.csrf.CsrfToken;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping(""/api"")
public class MainController {
	
	// CSRF対策をしていないPOSTメソッド	
	@PostMapping(""/everybody"")
	public String postEverybody(){
		return ""hello everybody"";
	}
	
	// CSRFトークンを発行して返すメソッド
	@GetMapping(""/getCsrf"")
	public CsrfToken getCsrfToken(CsrfToken csrfToken) {
		return csrfToken;
	}
	
	// CSRF対策をしているPOSTメソッド
	@PostMapping(""/limitedUser"")
	public String postLoginUserHello() {
		return ""Hello loginUser"";
	}
}

```

### SecurityConfig.java

次に今回使用するSprinSecurityの設定を記述するSecurityConfigを作成しましょう。

```Java:SecurityConfig.java
package com.example.demo;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity()
public class SecurityConfig {
    
	// CSRF認証設定
    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{
		
		http
			.csrf(csrf -> csrf
					.ignoringRequestMatchers(
							""/api/everybody""
							))
			.authorizeHttpRequests(auth -> auth
					.anyRequest().permitAll()
					);
		return http.build();
	}
}
```

今回はCSRFの説明だけなので、`.authorizeHttpRequests`内の説明は省きます。

まず、`.csrf()`でCSRFの設定を行います。
基本的に<font color=""#ff6347"">**POST, PUT, DELETE, PATCH**</font>が対象のHTTPメソッドとなります。
理由は、上記以外のHTTPメソッドはアプリケーションの状態を変更するような処理を行わないからです。

`csrf.ignoringRequestMatchers()`内にはCSRFトークンを用いた認証を行わないリクエストを記入してあげます。こちらは"",""で複数のリクエストを記入することができます。
今回は""/api/everybody""へのリクエストはCSRFトークンの認証を行わないように設定します。
勘のいい方は気づいたかもしれませんが、ここに書かないリクエストは基本的にCSRFトークンを使用した認証が必要になります。
では実際にPostmanで検証していきましょう。

## 検証

アプリを実行して、最初に`.ignoringRequestMatchers()`内に記述した、""/api/everybody""にリクエストを送ってみましょう。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3039114/1c88b5f4-82ed-88b8-46a8-e059e6dd84d9.png)

問題なく値が返ってきました。
""/api/everybody""のようなCSRFトークンの認証を使用しないケースとしては、ユーザーの登録やログインがあげられます。

次に、CSRFトークンの認証が必要な""/api/limitedUser""にリクエストを送ってみましょう。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3039114/72ddc39d-fbe7-990e-ea32-35f9676b9cab.png)

403エラーが返ってきました。
簡単に言うとアクセス拒否のエラーです。
「あんたはおれが発行したCSRFトークンを持っていないからリクエストを無効にするぜ」という状況です。
では、リクエストの結果が欲しいので、先にCSRFトークンを受け取りましょう。
GETで""/api/getCsrf""にリクエストを送ります。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3039114/2bfef9f1-bee1-1b88-5d5b-b07438c73e5b.png)

上記のようなデータが返ってきました。
""token"": ""～～～""が実際にサーバーから発行されたCSRFトークンとなります。
このCSRFトークンを使用して""/api/limitedUser""にリクエストを送ってみましょう。

![スクリーンショット 2023-12-21 215936.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3039114/025f4621-5184-9106-5259-a4bbd7501171.png)

""Headers""を選択し、左側のKeyに""X-CSRF-TOKEN""と入力します。その後、右側のValueに先ほど入手したCSRFトークンをコピペしてあげます。
では、""/api/limitedUser""にリクエストを送りましょう。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3039114/a18db22b-98e8-2c68-d3fc-65c38c41e7a2.png)

無事に結果が戻ってきました。
CSRFトークンの認証を使用するケースとしては、Amazonで例えると「カートに入れる」や「アカウント情報の変更」などの、特定のユーザーのみが行える処理が上がります。

## 終わりに
今回紹介したのはCSRF対策の一部に過ぎないので、もう少しカスタマイズしてみたい方は[Spring Security公式ページ](https://spring.pleiades.io/spring-security/reference/servlet/exploits/csrf.html)を確認してみてください。

<br/>

**以上**
",0,0,0,Java,spring-security,Spring Securityを使用したCSRF対策,"最近筋トレの楽しさに気づいた24歳です。
Go言語を中心に投稿していきます。",,1,1,packmanrei,packmanrei,7,,,Rei,,3039114,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3039114/8422c346ba716a496a6745d99722c9caafe0d10c/x_large.png?1686295330,False,,https://github.com/packmanrei,,SpringBoot,,
"下記で紹介しています。
https://liberation-of-se-like-slaves.net/explain-about-smart-call-home/
",0,0,0,Cisco,,Smart Call Homeとは？Ciscoの運用管理機能を紹介,,,1,1,,infra-enthusiast,11,,Japan,インフラエンジニアの 成り損ない,JTC,1018148,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/1018148/41a74f36aa6bf639f8db83e25a360e366a70c884/large.png?1650553964,False,,https://liberation-of-se-like-slaves.net/,,,,
"## はじめに
サロゲートペアという言葉を聞いてよくわからなかったので、調べたことを備忘録としてまとめておこうと思います。

## サロゲートペアについて調べてみる
まずサロゲートペアについて話す前に、Unicode の話をしようと思います。

### Unicode とは
Unicode とは、世界中の文字を一意に表現するための文字コードのことです。日本語に使われるかなや、英語に使われるアルファベット、それ以外の言語で使われる文字が含まれます。

Unicode は様々なエンコーディング方式（例えば UTF-8、UTF-16、UTF-32）を使用し、これらは 1 文字を表現するのに可変長のバイトを使用します。UTF-8は 1 ~ 4 バイト、UTF-16 は 2 バイトまたは 4 バイトを使用できます。

### サロゲートペアとは
サロゲートペアとは、2 つの 2 バイトのコードユニットの組み合わせです。これには、上位サロゲートと下位サロゲートがあります。これらの範囲は、それぞれ 2^10 (= 1,024) 個のコードポイントを持ちます。上位サロゲートと下位サロゲートは、それぞれ単体では意味をなしません。それぞれが組み合わさることで初めて特定の文字を表します。これにより、追加の 1,048,576 個のコードポイントが利用可能になりました。

### サロゲートペアの問題点
サロゲートペアを使う文字は、特に文字列の長さのカウントや文字の切り出しで注意が必要です。2 つのコードユニットが 1 つの文字を表すため、一般的な文字数カウント方法では正確な結果が得られません。

知人が、ChatGPT などの AI が苦手なことの一つに、文字数カウントがあると言っていて、その理由がサロゲートペアを使った文字をカウントしている時があるからと言っていました。

## 参考資料
以下の記事を参考に作成しました。

https://codezine.jp/article/detail/1592

https://www.magata.net/memo/index.php?%A5%B5%A5%ED%A5%B2%A1%BC%A5%C8%A5%DA%A5%A2

https://developer.mozilla.org/ja/docs/Glossary/Unicode

https://systemengineers.hateblo.jp/entry/2021/07/10/071513
",0,1,0,文字コード,サロゲートペア,サロゲートペアについて調べてみる,ReactとRailsができるようになりたい,,13,25,zumi0,zumi0,47,,愛知県,Yuto Nakaizumi,,581736,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/581736/c729eb31899f9bda0d5e3c90e7a373eb2653f825/large.png?1594171121,False,zumi0_,,,,,
"# はじめに
JuliaでCSVデータの処理を行ったため、いくつかまとめる。

# 処理内容
まずはCSVファイルをデータフレームとして読み込む。
```julia
using CSV, DataFrames, StringEncodings

df = open(""your_file_path"", ""r"") do file
    decoded = read(file, enc""CP932"")
    CSV.read(decoded, DataFrame)
end
```
CSVファイルを読み込んで→エンコーディングして→データフレームとして読み込むという処理したい手順でコードを書くことができてとても便利！

では、いらない列を削除してみよう。
```julia
select!(df, Not([1,2,3,size(df,2)]))
```
select関数を用いることで、抽出したい列を指定できるが、引数にNot演算子で削除したい列を指定することで削除することができる。
このとき、Not演算子には数字で渡せば1番目、2番目となるが、`:列名`で渡せば、任意の列を削除することができる。
また、今回の例では`size(df,2)`を指定しているが、これは**一番最後の列**を意味している。一応覚えておこう。

次に、1行目をヘッダーに指定してみる。
```julia
header = [Symbol(df[1,col]) for col in names(df)]
rename!(df, header, makeunique=true)
deleteat!(df, 1)
```
`names(df)`で全列名を取得し、それらをfor文でシンボル型に変換する。その後、rename関数を用いて列名を更新する。1行目は列名に指定したため不要だからdeleteat関数で1行目を削除する。
`rename関数`は以下のような書き方でも列名を変更することができる。
```julia
rename!(df, :old_column => :new_column, :aaa => :bbb)
```
こちらもセットで覚えておこう。

最後にグルーピングして、それらの最大値を取得してみよう。
```julia
group = groupby(df, :column_name)
max_values = combine(group, names(df) .=> maximum)
```
`groupby関数`でグルーピングしたい列名を指定してグルーピングする。
その後、`combine関数`を用いて、全列名に対して最大値を取得する。
このとき`.=>`と`=>`の前に`.`を入力したが、これはドット演算子といって、リストの全ての要素に対して同じ処理を行いたい場合に用いることがある。
これもよく使用するので覚えておこう。

# まとめ
データ処理を行う際によくやってる処理をJuliaで行ってみた。
演算子や関数について、まだ理解が浅いため深めていこうと思う。
",0,0,0,Julia,データフレーム,Juliaでデータ処理,"データサイエンス、AI、画像解析などやってます。
AWSのセキュリティ設計などアーキテクト構築もかじってます。",,19,17,wezqem,inoshun,31,,,,,3524375,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3524375/03310a8fea69c09c1491460432be1a6f6aa8168e/large.png?1690889983,False,wezqem_wado,,,データ処理,,
"このようなコミットがあるとして、`develop`ブランチ
に`master`の`F`のコミットだけ`merge`したいとする


![スクリーンショット 2023-12-21 21.57.08.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2517817/2d564895-8cb6-7b5e-dc15-501d4ea31f06.png)

現状`E`と`F`のコミットの内容は`index.html`にそれぞれ`E`と`F`の文字列が存在している。

つまり、今回は`F`の文字列だけ`develop`にmergeしたい。
```
user1@user1noMacBook-Pro cherry % git show 64aaf1a
commit 64aaf1a9b018f9ec26103188fb08a21b237dc551 (HEAD -> master)
Author: 
Date:   Thu Dec 21 21:56:48 2023 +0900

    F

diff --git a/index.html b/index.html
index 54f9e44..254e13c 100644
--- a/index.html
+++ b/index.html
@@ -1,2 +1,2 @@
 A
-E
\ No newline at end of file
+F
\ No newline at end of file
user1@user1noMacBook-Pro cherry % git show 53a6b25
commit 53a6b2557d17eada8c0c70d3aed8a4538d9bd45d
Author: 
Date:   Thu Dec 21 21:56:35 2023 +0900

    E

diff --git a/index.html b/index.html
index 8c7e5a6..54f9e44 100644
--- a/index.html
+++ b/index.html
@@ -1 +1,2 @@
-A
\ No newline at end of file
+A
+E
\ No newline at end of file
```

`git cherry-pick ブランチ or ハッシュ or HEAD`で指定できる。


```terminal
git cherry-pick master
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
error: could not apply 5fee5ce... E
hint: after resolving the conflicts, mark the corrected paths
hint: with 'git add <paths>' or 'git rm <paths>'
hint: and commit the result with 'git commit'
```

該当の`コミット`をマージする事で、その`コミット`を取り込んだ新しい`コミット`(今回は`G`)を作って、特定の`コミット`のみを`マージ`する事ができる。

![スクリーンショット 2023-12-21 22.05.21.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2517817/3c7059de-3582-ee43-27d1-e70ee186041b.png)

![スクリーンショット 2023-12-21 22.05.03.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2517817/d314d188-c8ff-9a1c-b33f-9dfc91c50b3a.png)
",0,0,0,Git,,【Git】cherry-pickで特定のコミットだけマージする,,,21,359,k-suke39,ke_sukesakuma,50,,,,,2517817,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2517817/2633bcdce0011d45844702744894fc39368c4ccc/large.png?1692348477,False,saku0suke,,,,,
"C-RISEの村井です。
今年のアドベントカレンダーは「NoCode & LowCode」にエントリーしました。
[昨年の記事](https://qiita.com/cr_murai/items/d236b1f40d480143a675)を振り返ってみると偶然にも同日の12月21日でした。
しかも昨年も当日に記事を書いているという有様で、１年経っても成長してないなと実感している所です。

しかし、私とは違い[クラウドBOT](https://www.c-bot.pro/)はこの一年で色々と成長しました。
アップデートを繰り返し機能も様々増えてきました。
本記事ではとても紹介しきれないので今回はその中の一つ「スクリーンショット機能」を紹介したいと思います。

## スクリーンショットを撮る
Webサイトのスクリーンショットを撮影して画像化するサービスやアプリは色々公開されていると思います。
* [FireShot](https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg?hl=ja) Webブラウザのスクリーンショットを撮るプラグイン
* [SITE-SHOT](https://www.site-shot.com/) Webサイトのスクリーンショットを撮るサービス
* [Gyazo](https://gyazo.com/ja) スクリーンショットを録画してアップロード・共有ができるサービス

しかし、パソコン上で開いてるブラウザのスクリーンショットを撮ったり、URLを指定するとスクリーンショット画像を生成するといったサービスがほとんどです。
せっかくなら、これらサービスでは対応できない事に挑戦してみようと思います。
**クラウド型RPA**である[クラウドBOT](https://www.c-bot.pro/)の強みを活かし、**ログインが必要な非公開ページのスクリーンショットを撮影**してみます。

## 完成イメージ
ますは、先に完成したBOTの実行イメージを動画(22秒)で確認してみましょう。
<iframe width=""560"" height=""315"" src=""https://www.youtube.com/embed/tw0Nd7wYdlE?si=-hZ7wjCnWU-qjdzz"" title=""YouTube video player"" frameborder=""0"" allow=""accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"" allowfullscreen></iframe>

1. freeeへログイン
2. レポート画面へ遷移しグラフのスクリーンショットを撮る(画像ファイル取得)
3. kintoneのファイル管理アプリへログイン
4. ファイル管理アプリへスクリーンショット画像を登録

というとてもシンプルな操作です。

## 自動操作のシナリオ
実際の操作シナリオの画面遷移を追ってみましょう。

**freeeにログイン**
今回はログイン対象のサイトとしてfreeeにアクセスします。
![BOT01.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/63595/85f4b3b2-a167-1f92-1d27-9de8562982d8.png)

**レポート画面で必要な条件を入力**
撮影したいレポートを表示する為、必要な条件を入力します。
![BOT02.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/63595/9c763906-b3c7-7d7a-8c63-df046fc34df4.png)

**グラフを表示**
収益推移の折れ線グラフが表示されました。
![BOT03.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/63595/99d1f4c0-46fa-d83a-1e34-1c64f46604e8.png)

**スクリーンショット撮影**
撮影したいグラフの範囲を選択しスクリーンショットを撮影します。
撮影した画像をファイルとして取得する事ができます。
![BOT04.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/63595/949d5bb7-dfb1-054d-2083-3ad9af02f51d.png)

**kintoneにログイン**
撮影した画像ファイルを保管する為、kintoneのファイル管理アプリにログインします。
![BOT05.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/63595/a928979b-8c72-135f-944f-4a87f4f2b0ad.png)

**ファイル登録画面を開く**
今回撮影した画像ファイルを登録する為、レコード追加ボタンをクリックします。
![BOT06.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/63595/b1b90f8f-2118-b409-ea4b-11f8ea15682a.png)

**スクリーンショットの画像ファイルを登録**
画像ファイルのタイトルを入力し、画像ファイルをアップロードします。
![BOT07.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/63595/06ae8c70-6764-0c60-c652-0373385d8b5a.png)

**登録完了**
画像ファイルが登録されました。
![BOT08.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/63595/7aa151aa-7063-703c-3e9a-b861f5a71a19.png)

クラウドBOTは、上記操作手順をエディタ上で自動記録する事でBOTを作成できます。
手順を一つ一つコーディングする必要が無いノーコードサービスです。
詳しい操作方法は、[チュートリアル](https://www.c-bot.pro/ja/tutorial/)に丁寧に説明してあるので興味のある方は是非ご覧下さい。

## 定期的にBOTを実行すればスクリーンショットの履歴をkintoneに保存可能
今回の操作手順はスクリーンショットを撮影して画像をkintoneに登録するだけなので手作業の方が早そうです。
しかし、この作業を毎日行う場合は、毎回手作業は以外と面倒です。
クラウドBOTなら、毎日BOT実行ボタンをポチッと押すだけでこの作業が自動で行われるのです。

:::note info
ここまでの機能は無料プランで利用可能です
:::
:::note info
有料プランを利用するとBOTを定期実行するスケジュール機能が利用できます
:::

## ノーコードで効率は上がるのか
今回自動化した作業は、手作業なら5分程でできます。
この作業をBOT化するのはおよそ15分程かかります。
つまり３回以上実行するのであれば自動化の効果が得られるという事になります。
効率化が期待できるのは、下記のようなケースです。
* 定期的に発生する作業
* 人的判断が不要な作業(手順化可能な作業)
* 大量のコピペ等、繰り返しが多い作業

## クラウド型RPAは何が嬉しいのか
実は、今回ご紹介したシナリオはクラウド型RPAである必要はなく、オンプレミス型のRPA製品でも同様に自動化できます。

では、クラウド型RPAならではのメリットは？
というと色々ありますが、最も大きな特徴は
**全てがクラウド上にある**
という事です。
それにより、手元のパソコン環境、オフィス環境に依存せず自動化が可能になります。
つまり、**クラウド上に作成したBOTはいつでも世界中から呼び出し実行可能**です。

つまり、
* このBOTを共有する事でみんなで活用できる
* このBOTをAPI呼び出しする事でシステム間連携ができる
* このBOTとクラウドサービスをつなぐ、サービス間連携ができる

という事が言えます。

## 最後に
クラウドBOTはまだまだ開発が続いています。
ちょっと機能が足りないなと思ったら、半年後には対応しているかもしれません。
要望があれば、優先的に実装するかも知れません。
全く新しい機能が実装されるかも知れません。
他には無い独自のサービスとして成長させていきますので、ぜひ応援よろしくお願いします。

最後になりましたが、メリークリスマス！良いお年をお迎え下さい。

",0,0,0,SaaS,RPA,クラウドBOTで「ログインが必要なサイトのスクリーンショット」を自動撮影してみる,"(株)C-RISEの代表です。
Web自動化サービス「クラウドBOT」を提供してます。",,7,3,,cr_murai,5,,金沢市,将則 村井,株式会社C-RISE,63595,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/63595/ff6ce1800867f8a57cdf599fb4c09db0f515fc6c/large.png?1608566960,False,,https://www.c-rise.co.jp/,,nocode,クラウドBOT,
"Your car is a valuable asset that you want to keep in pristine condition. One of the most important aspects of maintaining your car’s appearance is protecting its paint job. The paint on your car is not only responsible for its aesthetic appeal but also serves as a protective layer against environmental factors such as UV rays, dirt, and debris. Over time, your car’s paint can become damaged, which can lead to costly repairs. Fortunately, there is a solution to this problem: clear bra.

What is Clear Bra?

<a href='https://www.blueskytint.com/clear-bra/' title='clear bra ' target='_blank'>clear bra </a> is a protective film that is applied to your car’s paint job. It is made of a thermoplastic urethane material that is transparent and self-healing. Clear bra is designed to protect your car’s paint from scratches, chips, and other types of damage. It is an excellent investment for anyone who wants to keep their car looking new for years to come.

How Does Clear Bra Work?

Clear bra works by creating a barrier between your car’s paint and the environment. It is applied to the exterior of your car and is designed to absorb the impact of any debris that comes into contact with it. The film is self-healing, which means that it can repair itself if it becomes damaged. This makes clear bra an excellent choice for anyone who wants to protect their car’s paint job without having to worry about costly repairs.

Advantages of Clear Bra

There are many advantages to using Clear bra  to protect your car’s paint job. Here are some of the most significant benefits:

Protection Against Environmental Factors

Clear bra is designed to protect your car’s paint from environmental factors such as UV rays, dirt, and debris. This means that your car’s paint will stay looking new for longer, and you won’t have to worry about costly repairs.

Self-Healing:-Clear bra is self-healing, which means that it can repair itself if it becomes damaged. This makes it an excellent choice for anyone who wants to protect their car’s paint job without having to worry about costly repairs.

Easy to Maintain:- Clear bra is easy to maintain. You can wash your car as you normally would, and the film will not be damaged. This means that you won’t have to spend a lot of time or money maintaining your car’s appearance.

Cost-Effective:- Clear bra is a cost-effective way to protect your car’s paint job. It is much less expensive than having to repair or repaint your car’s paint job.

Disadvantages of Clear Bra

While there are many advantages to using clear bra to protect your car’s paint job, there are also some disadvantages to consider. Here are some of the most significant drawbacks

Cost:- Clear bra can be expensive, especially if you have a large car or want to protect the entire vehicle. However, it is still much less expensive than having to repair or repaint your car’s paint job.

Installation:- Clear bra must be installed by a professional. This means that you will have to pay for installation, which can add to the overall cost of the product.

Yellowing:- Clear bra can yellow over time, especially if it is exposed to UV rays. This can affect the appearance of your car and may require you to replace the film.

How to Install Clear Bra

Clear bra must be installed by a professional. The installation process involves cleaning your car’s paint job and then applying the film to the exterior of your car. The film is cut to fit your car’s specific make and model, ensuring a perfect fit. The installation process can take several hours, depending on the size of your car.

Conclusion

Clear bra is an excellent investment for anyone who wants to protect their car’s paint job. It is designed to protect your car from scratches, chips, and other types of damage. Clear bra is easy to maintain, cost-effective, and self-healing. While there are some disadvantages to using clear bra, the benefits far outweigh the drawbacks. If you want to keep your car looking new for years to come, consider investing in clear bra.

",0,0,0,#clearbra,,Protect Your Car’s Paint Job with Clear Bra: A Comprehensive Guide,"Join Richard on a car enthusiast’s adventure as he shares his extensive knowledge of car detailing and maintenance.
",,1,0,,richardwoodson32,1,,,,,3658839,https://lh3.googleusercontent.com/a/ACg8ocL8ysEa9CYNRL-c57q3vyouVXyYyM5ggqomvOxujXLxrQ=s96-c,False,,https://www.blueskytint.com/,,,,
"# はじめに
R4秋に基本情報・R5秋に応用情報に合格することができたので、体験記という形で勉強の進め方などを書くことができたらと思っております。

普段からQiitaにはお世話になっており、自分も何とか記事として何かを還元できないかを考えた時に、こちらの記事を書くに至りました。

ITよわよわ人間なりに、どのように対策したかを書こうと思ってます。
今後、基本情報や応用情報を受ける予定の方々への参考になったら幸いです。
# 目次
<!-- タイトルとアンカー名を編集 -->
1. [基本情報の勉強について](#Chapter1)
1. [応用情報の勉強について](#Chapter2)
1. [おわりに](#reference)

<!-- 各チャプター -->
<a id=""#Chapter1""></a>
# 基本情報の勉強について
まず、基本情報を受けたときの私の前提知識は

・情報系の知識はほとんどわからない(未習なので)
・過去問道場を初めて通しで解いた時は正答率4割ほど

であり、**簡単な計算の問題や当たり前の知識問題**くらいしか取ることができないという状態でかなりボロボロの状態でした。。。

その状態から何とか試験本番での成績は、**午前:68.75点　午後:75点**に持ち上げることができました

私が基本情報を受ける際に行った勉強は以下の通りです。
### (A)午前対策:　「栢木先生の基本情報技術者教室」×１周　→　過去問道場
まず、何をすれば良いのかわからないほど基本知識がボロボロの状態だったので、上記の本を１ヶ月くらいかけて１周しました。
本については、最新版のものを買うと良いと思います。
その後、過去問道場を回しまくって(総3300問・五段)、過去問だけでも8割くらい取れるようにしました。
過去問道場では、最初は間違えまくって辛いと思いますが、慣れてくると高速で回せるようになるので頑張りましょう！！
### 〜午前対策の反省(基本情報)〜
とりあえずで申し込んで上記のような勉強をしたので、全然効率的じゃないと思ってます...
改善するとしたら、

・　最初に全体像を把握するための参考書はわからなくても良いので**１週間くらい**で終わらせる
・　過去問道場を回すだけでなく、間違えた問題に対して**用語などを覚えるフェーズ**を作る

以上の２点を気をつけるともう少し勉強が点数に結びつくと思いました！

### (B)午後対策:　「基本情報技術者 午後試験対策書(iTec)」×１周　→　過去問道場
午後については、基本情報の午前問題で正答率が6割ほどになった時に「基本情報技術者 午後試験対策書(iTec)」を始めました。
また、対策する分野はある程度絞って
・情報セキュリティ
・ソフトウェア設計
・マネジメントやストラテジ系
・アルゴリズム
・プログラミング(表計算ソフト)
あたりを対策していました。(今は、基本情報が新しくなったのであまり参考にはならないかもしれませんが...)
その後、過去問道場で８回分の模擬演習を行いました。

### 〜午後対策の反省(基本情報)〜
問題との相性や設問ごとの難易度差があったりで、**勉強しても点数になかなか繋がりづらくて**しんどかったです。**時間を測って本番を想定した演習を積む**と割と短期で良い結果に繋がる可能性があると思われます。
ということで「**午後対策本を一周やって終わり**」という方も多いかもしれませんが、個人的には**通しで何回か演習しておく**と安定すると良いんじゃないかと思います。


<a id=""#Chapter2""></a>
# 応用情報の勉強について
次に応用情報についてです。この時点での私の前提知識は以下の通りでした。

・基本情報を取ったものの、１年経っているのでほとんど忘れる()
・院試で論理回路の勉強をしたので、論理回路周りの知識は固まっている

また、諸々の都合で対策期間を**1ヶ月**にせざるを得ない状況でした。

初めて応用情報の過去問道場を解いた時にはおよそ4.5割くらいで、基本情報との難易度差に絶望しかけました。

そのような状態から何とか**午前:76.25点　午後:62点**で滑り込みました(午後危なすぎ！！！)
大まかな勉強の流れは基本情報の時と大差ないですが、一応紹介させていただきます。

### (A)午前対策:　過去問道場のみ
とにかく過去問道場を回しまくり(総3000問・四段)、過去問だけでも8割越え安定するようにしました。
また今回は、基本情報の時の反省を活かして、過去問道場で**間違えた用語と意味をノート・暗記帳にまとめてひたすら覚えました**。
**覚える**というフェーズがなかなか大事で、午後で用語を書かせる問題が出たりするので、勉強する上で**遠回りなようで時短につながった**と思います。

### 〜午前対策の反省(応用情報)〜
今回は対策にかけられる時間が1ヶ月もなかったので、中途半端な対策になってしまったのですが、もう少し過去問道場を回せるようになると安定すると思われます！あとはISOだとか無線の規格など**細かい知識**も抑えられるようになるとなお良いと思います。

### (B)午後対策:　「応用情報技術者　午後問題の重点対策(iTec)」×１周
午後については、本当に対策不足感が否めないです。。。上記の本を一周して、答案の書き方を学びました。
また、対策する分野は絞って、
・情報セキュリティ
・経営戦略
・システムアーキテクチャ
・組み込みシステム
・プロマネ
・サビマネ
の６科目を勉強しました。

受験前の戦略として、**セキュリティと組み込み**は安定するようにしました。
あとは損益表あたりの計算は絶対できるように対策しました。

### 〜午後対策の反省(応用情報)〜
対策にかける時間をもう２週間くらい増やせれば安定してくるんじゃないかと思ってます。
本当はプログラミングも触れたかったです...自己採点をする時に文系寄りの科目が増えると採点の精度がぼやけてしまうので、理系寄りの答えがはっきり出る問題を得意科目にすると合格発表までの期間も安心できると思います。
あとは、**通しでの演習は一回もできませんでした**(ヤバすぎる)ので、なかなかな賭けに出てしまったと反省しております。
### 通しでの演習を何回かやっておいた方が絶対に良いです！！！

<a id=""#reference""></a>
# 終わりに
以上が基本情報・応用情報の受験した時の勉強方法と反省です。
この記事を見た方にとって少しでも有益な情報が書けていたら幸いです。(筆者は来年データベーススペシャリストを受けようかなと思っています)
#### 基本情報・応用情報の勉強は長くて、大変だと思いますが頑張ってください！！
",0,0,0,資格,応用情報技術者試験,非情報系の大学生　情報処理技術者試験を受験する,,,2,0,,hyuki13120,1,,,idon コラ,,3582277,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3582277/profile-images/1703164066,False,,,,基本情報技術者試験,,
"# はじめに
日本語プログラミング言語をモデリング言語としてシステム開発上中流工程に導入した場合、そのメリット・デメリットについて考察する記事の9回目です。

本記事の内容はいくつかに分割されて記載されます。本記事中の「本記事」とは分割された内容の総体を指す場合があります。

https://qiita.com/advent-calendar/2023/remind

この記事は日本語構造化仕様記述言語 Re:Mind（リマインド）アドベントカレンダー2023の21日向けの記事です。

## 対象読者
とりあえずこの記事の想定読者はシステムエンジニアさんです。とくに日本語で要求仕様や内部設計資料を書いている方向けのお話です。

# 想定しているシステム開発フロー
オーソドックスなリレーショナルデータベースを使用している業務システムであることを1回目2回目の記事で説明しております。

## 想定しているレイヤードアーキテクチャ・業務
一般的なWebアプリケーションシステムであり、簡単な受発注業務をインターネットで支援するシステムであることを3回目4回目の記事で説明しております。

## 想定しているユビキタス言語
5回目の記事ではドメイン駆動設計（DDD）の文脈で用いられる意味でのユビキタス言語を例示しました。

## ユビキタス言語化された日本語プログラミング言語
6回目7回目の記事ではドメインエキスパートからプログラマレベルまで共有可能な言語のことをユビキタス言語化された日本語プログラミング言語とし、その各工程のソースコードの差異を例示・解説しました。

また、前回の記事では日本語プログラミング言語をモデリング言語としてシステム開発の上中流工程に導入した場合のメリット・デメリットについて、いったんまとめてみました。

# 数学的形式言語で日本語識別子を使えばよいのでは問題
21世紀の第1四半期のおわりである今日、システム開発の上中流工程において実績のある言語処理系はやはり数学的形式言語でしょう。
中でも構造化プログラミング言語の構文を持ち、オブジェクト指向言語によるモデリングも可能な処理系としてVDM++は最有力の存在です。

コンピュータシステムと一言でいっても多種多様な系が存在し、IoT時代ではハードウェア制御が関係するシステムも多数存在しており、ミッションクリティカルなシステムでは数学的形式言語での要件適合性の検証がマスト要件になっているものもあるようです。

結論から申し上げますと、数学的形式言語で日本語識別子を使えばシステム開発の上中流工程のあいまいさを排し、より合理的な整合性のある仕様や設計が可能であることに疑いはないとわたしは考えております。

1回目の記事で図示しました、ユビキタス言語化された日本語プログラミング言語のシステム開発工程上の位置づけを数学的形式言語で置き換えてみますと、ざっくり以下のようになると思われます。

```mermaid
flowchart 
    subgraph sgA[""上流工程""]
    A[""ユビキタス言語</br>（日本語業務用語ディクショナリ）""] --> B[""日本語を使った数学的形式言語（陰定義）""]
    A --> F[""概念ER図""]
    style sgA width:500px
    end
    subgraph sgB[""中流工程""]
    B --> C[""日本語を使った数学的形式言語（陽定義）""]
    C --> D[""数学的形式言語の実装言語ソース生成""]
    F --> G[""論理ER図""]
    G --> H[""物理ER図""]
    style sgB width:500px
    end
    subgraph sgC[""実現工程""]
    D --> E[""実装言語（Java C++など）""]
    H --> I[""実データベース""]
    style sgC width:500px
    end
```
数学的形式言語の処理系であるVDM++を使用した設計手法の解説情報では、当たり前ンのように日本語識別子が使われています。これはやはりDDD的な意味でのユビキタス言語が自然言語の母語で書かれていることから、その流れでも日本語でモデリングするのが自然であるという認識が設計現場では一般的であると推察されます。

## ユビキタス言語化された日本語プログラミング言語と日本語識別子を使った数学的形式言語ではなにが違うのか

日本語識別子を使った数学的形式言語といった場合、半角英字トークンをベースに設計された処理で日本語識別子を使うという意味のほか、まだ登場はしていませんが、日本語プログラミング言語のように日本語がネイティブのシステムトークンとなっている数学的形式言語というものが、将来登場するとしたらそれも含めて何が違うのかという話になっていきます。

ちなみに本記事の主題は、システム開発上中流工程で同じようにユビキタス言語化された、日本語識別子を使った数学的形式言語を新たに検討しようとするものではなく、構造化プログラミング言語で静的型付け、オブジェクト指向パラダイムの特徴をもつ設計言語について検討しております。

なにがどう違うのかについては次回、詳しく説明します。

# この回のまとめ
上中流工程においては、競合でありパートナーでもある日本語識別子を使った数学的形式言語の存在について触れてみました。

# 次回
数学的形式言語との関係について引き続き検討します。
",0,1,0,レイヤードアーキテクチャ,日本語プログラミング,システム開発上中流工程でユビキタス言語化された日本語プログラミング言語と日本語識別子を使った数学的形式言語の対比,"フリーランスのシステムエンジニアです。
趣味はバイオリンとピアノを習うこと。弾くことではないようです。
I like beautiful Japanese language, whether natural or structured. Because it has beautiful character types and attractive pronunciation sounds.",,54,42,mylifewithviolin,mylifewithviolin,146,,,,アプリ工房いずみ,3118036,https://avatars.githubusercontent.com/u/123276433?v=4,False,,http://mylifewithviolin.blog.fc2.com/,,日本語プログラミング言語,ロジック仕様記述言語,数学的形式言語
"Fast APIアプリを構築するのに
少し手間取ってしまているので一旦まとめてみる。

# ロードマップ
1. アプリイメージ図
2. 環境構築
3. GET/POSTを受け取る最小アプリ例
4. DBとの連携
5. スキーマ(responce_model)
6. Model定義例 
7. デコレーターの中のオプション
8. 関数の中のオプション  
",0,0,0,Python,sqlalchemy,Fast API を一からまとめる,,,1,2,raisack8,raisack8,19,,,raisack,,1573902,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1573902/profile-images/1676074463,False,raisack_dev,,,FastAPI,,
"## chatGPT様にお願いする
![スクリーンショット 2023-12-21 21.39.27.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3624714/cb3e8386-df15-86ae-5563-09a2bd014935.png)

## HomebrewでMySQLをインストールし接続する
```
brew install mysql
```
```
mysql.server start
```
```
mysql -u root -p
```

## sqlクライアントはSequelAceを使う
- 適当に設定
![スクリーンショット 2023-12-21 21.42.27.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3624714/76f2029a-7572-57d7-a4ea-4fad11ca5efe.png)

- 先ほどchatGPT様に作っていただいたsqlを実行すると...
![スクリーンショット 2023-12-21 21.44.41.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3624714/c648711c-6b30-e994-815a-d4528b3da2c1.png)

## テストデータの作成もお願いして実行すると...
![スクリーンショット 2023-12-21 21.47.06.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3624714/3246f779-4b21-63a4-148c-0c19239f717e.png)
![スクリーンショット 2023-12-21 21.48.27.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3624714/66ec5cc7-aee9-1b52-d39e-a3a686e4bedb.png)
![スクリーンショット 2023-12-21 21.49.00.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3624714/5319b398-5aec-9d6e-de57-821ce7f69ca5.png)

chatGPT様ありがとうございます。sqlの勉強がんばります
",0,0,0,Mac,MySQL,chatGPT様にテストデータの作成をお願いしてsqlを勉強しよう,,,1,0,yuki-koshima,yuki-koshima,1,,,,,3624714,https://avatars.githubusercontent.com/u/143974146?v=4,False,,,,homebrew,SequelAce,ChatGPT
"
# はじめに
近年幅広い業種で Azure, AWS, GCP などパブリッククラウドサービスを活用する動きが高まっています。</br> その一環として金融機関など高度なセキュリティ対策が求められる企業もパブリッククラウドを選択するケースが増えてきています。
しかしセキュリティ対策は最新の攻撃といたちごっこの状態です。その中で内部や外部からの攻撃に対して通常クラウドサービスでは「データを暗号化」して、データを保護しています。
ただ HTTPS, TLS などは浮かんでも、<font color=""DodgerBlue"">「使用中のデータの暗号化」</font>に関してあまり理解が進んでいない方も多いのではないでしょうか？

そこで本ブログでは使用中のデータの暗号化の技術として Confidential Computing の基礎を紹介します。
まとめるにあたって、O'Reiliy の [Azure Condifential Computing and Zero Trust](https://techcommunity.microsoft.com/t5/azure-confidential-computing/o-reilly-media-report-azure-confidential-computing-and-zero/ba-p/3973269) が 2023 年 11 月 15 日に出版されたので、参考にしています。
(そもそもとても読みやすいので是非一読してみてください)

今回まとめた内容としては
* Confidential Computing の概要
* 暗号化の仕組み
* Zero-trust を実現する上での Confidential Computing の役割
* Azure の Confidential Computing
* Confidential AI とは？

です。 <font color=""DodgerBlue"">Confidential Computing の概要を知りたい方は 「Zero-trust を実現する上での Confidential Computing の役割」まで読むことをお勧めします</font>。

# Confidential Computing 概要
前述しましたが Confidential Computing は「使用中のデータを暗号化できる技術」になります。 実際に [Confidential Computing Consortium](https://confidentialcomputing.io/) (CCC) によって定義された業界用語で、CCC では以下のように Confidential Computing を定義しています。

>本文:<br>The protection of data in-use by performing computation in a hardware-based, attested trusted execution environment (TEE).
日訳:<br>ハードウェアベースの認証された信頼できる実行環境（TEE）で計算を実行することにより、使用中のデータを保護する。

つまり TEE の内部で計算することにより、ハイパーバイザーレベルで外部からデータを保護できる技術となっています。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/693422/07bba0b1-ad64-78b9-0945-e8077fbf900b.png)

<details><summary>TEE とは？という方はここをクリック</summary>
TEE とは Trusted Execution Envirnment の略で、ハードウェア方式とも呼ばれる、通常の OS とは異なる Trusted OS 上の環境で「秘密計算技術」と呼ばれます。この技術を利用して、メインプロセッサの中になる安全な領域内で検査言いさせ、その中のデータや、コードは外部から読み取りや改ざんができなくなります。<br>
例えば「銀行の金庫」が挙げられます。銀行の金庫は外部から盗難や破壊できないようになっています。金庫室内では、銀教員など適切に認証された人だけがお金の持ち出しなどできる環境になっています。
</details>

それではデータの暗号化の 3 種類に関して以下の図を参考にし、ふりかえります。

* 保管時のデータの暗号化
    * SQL Server Transparent Database Encryption(TDE) など
* 転送中のデータ
    * TLS, HTTPS など
* <font color=""DodgerBlue"">使用中のデータ</font>
    *  <font color=""DodgerBlue"">Confidential Computing</font>


![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/693422/fdd083e6-8fe7-f186-e1dc-76123db0484d.png)

アプリケーションは、メモリ内のデータを処理するためには、データを一時的に復号化する必要があります。しかし、このプロセス中にデータは一時的に暗号化されていないため、攻撃者によって読み取られる可能性があります。そのため「使用中のデータの暗号化」という観点からクラウド利用を安全に進めるために、Confidential Computing は注目されています。

# 暗号化の仕組み
では Confidential Computing の内部に迫っていきましょう。ここでは暗号化がどうなっているのか？どのように外部からデータを保護するのか？それには Confidential Computing 3 つの特徴が重要になります。

*  Hardware root fo trust
*  Memory protection
*  Attestation

まず Hardware root fo trust に関してです。

**Hardware root of trust**<br> 
ここでは CPU が製造された時点でのマスターキーが肝になります。
まず製造の段階で CPU が作られたときに CPU シリコンに ユニークなマスターキーが保存されます。このマスターキーは CPU から エクスポートができなく、CPU ハードウェアの外からはアクセスができない仕様になっています。<br>
この<font color=""DodgerBlue"">マスターキーが基になってメモリ内のデータを暗号化するためのキーが生成されるわけです。つまりここがクラウドオペレーターが操作できないところ。つまりオペレーターでさえ信頼させない構造</font>になります。<br> 
メモリ内のデータを暗号化するために使用されるキーは、基盤となる信頼された実行環境 (TEE) のハードウェア上で実行されるファームウェアによって生成されます。これらのキーは、CPU のファームウェアによって管理され、外部のソフトウェアからはアクセスできないようになっています。
よってこの特徴をもって TEE の外は信頼ができないといった設計になります。

**Memory protection**<br> 
メモリ保護は、データがメモリに書き込まれる際に常に暗号化されることを保証することです。先ほども述べましたが、これは TEE のハードウェア上で実行されるファームウェアによって生成されたキーを使用します。

このキーはクラウドオペレーターからアクセスできないようになっていて、
その<font color=""DodgerBlue"">メモリを所有するTEE内のソフトウェアだけが、それを書き換えたり読み取ったりできるため、不正なアクセスや変更からデータを保護します</font>。
以下が このメモリ保護を有効にしている特徴です。
* Data and code confidentiality
    * TEE メモリ内のコードやデータに関しては 認証されていないエンティティはアクセスできません。
    * AI モデルやトレーニングデータなど Sensitive data の漏洩を防げます。
* Data and code integrity
    * 認証されていないエンティティは TEE メモリ内のデータを書き換えることはできません。

最後に Attestation です。

**Attestation**<br> 
<font color=""DodgerBlue"">そもそも TEE も信頼できるの？</font>といった観点が Attestation の肝になります。(もう本当に誰も信頼しませんね笑) つまり <font color=""DodgerBlue"">TEE のソフトウェアとコンポーネントとハードウェアの信頼性を確かめるもの</font>と言えます。ここではハードウェアとソフトウェアの妥当性と信頼性が重要になります。

* TEE のハードウェアの妥当性と信頼性
    * TEE は、製造元、バージョン、ファームウェアなどの期待されるハードウェアに基づいていることが確認されます。また、関連するメモリ保護機能が有効であることも確認されます。このようにして、データの整合性と機密性、およびコードの整合性を提供します。

* TEE 内で実行されるソフトウェアの妥当性と信頼性
    * TEE 内で実行されるソフトウェアが信頼性のあるものであることも確認する必要があります。TEE はメモリ内のデータを隔離し、基盤となる CPU ファームウェアによって管理されたキーを使用してメモリ内のデータを暗号化します。また、TEE外で実行されるソフトウェアからメモリ内のデータが変更されることを防ぎます。

以上の 3 つの特徴によって Confidential Computing の使用中のデータが CPU 製造時からなるキーを基にして暗号化し、また TEE のコンポーネント自体の信頼性も確かめることでデータを保護します。

実際 Confidential Computing の定義はベンダーに対して中立的で、 TEE の保護されたメモリに含まれるものや除外されるものを具体的には指定していません。しかし TEE のメモリの隔離レベルは求められていて、CPU ベンダーによって 3 つのメモリ隔離レベルが提供されています。それが次のセクションの内容になります。

### TEE のメモリ隔離レベル
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/693422/e52a2833-df46-c1b9-e627-7b798fcb68ff.png)
O'Reiliy の図から引用したものになりますが、今回は Level of isolation (隔離レベル) と Protection from Insider threat (内部的脅威からの保護)この観点に絞ってまとめます。<br>
表から見ても分かるように メモリ隔離レベルには 3 段階あります。

* 仮想マシン レベル
* コンテナ レベル
* アプリケーション コード レベル
> それぞれのレベルには、基盤となるCPUファームウェアによって割り当てられた固有のメモリ暗号化キーがあります。

ではどのレベルで守ればいいのか？？気になりますね。結論は <font color=""DodgerBlue"">コンテナレベルの隔離が一番簡単に扱える</font>と記載されています。その理由として以下が挙げられます。

* 仮想マシン レベル
    * デフォルトでは内部の脅威から守ることができない
* アプリケーション コード レベル
    * コードのリファクタリングが必要で、コストが高い
    * OSS の SDK を使用する必要がある

つまりコンテナレベルの固有のメモリ暗号化キーを使用し、コードも変更せず、デフォルトで内部の脅威から守れることにより、一番簡単にクラウドネイティブワークロードを保護することができます。

では Zero-trust の概念の中の Confidential Computing の位置づけに関して迫っていきます。

# Zero-trust を実現する上での Confidential Computing の役割
まず Zero-trust の定義からおさらいしていきます。その名の通り、「信頼は(Trust) 何に対してもしない(Zero)」という前提で成り立つ考え方です。Zero-turst は [Forrester](https://oreil.ly/NQU73)によって 2009 年に発表されたものになります。
ゼロトラストの基本的な考え方は次の点です

* 侵害を想定する
* 明示的に検証する
* 最小限の特権アクセスを使用する


![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/693422/911eeb7c-f5ed-6035-5454-e85f3a45d3c8.png)

具体的には

 * 許可されたユーザーからのアクセスであるか: すべてのアクセスは明確に認証され、許可されたユーザーによるものである必要があります。
* 通常と異なるロケーションからアクセスがないか: 不審な場所からのアクセスを検出し、適切に制御します。
* 不審な振る舞いが発生していないか: ユーザーの行動を監視して、不正なアクティビティを特定します。
* 利用しているクラウドサービスにリスクがないか: クラウドサービスのセキュリティも考慮します。

を考慮する考え方です。

NIST によると Confidential Computing における Hardware Root of Trust はImplicitly Trusted のスタートポイントなるとされています。
パブリッククラウドの拡大により以下のことが言えます。

* プライベートクラウドで運用するならこのハードウェアの制御ができます。
* パブリッククラウドの場合はその依存性をクラウドプロバイダーにゆだねることになります。
    * その際 Hardware root of trust for TEEs は<font color=""DodgerBlue"">顧客データがプライベートに保管できていることをパブリッククラウドを用いても保証</font>することができます。

これはシリコンチップやその他のチップは一度作成されると非代替になることで、<font color=""DodgerBlue"">一度デプロイされるとその信頼性は侵害されない</font>ということが理由になります。

この信頼は、シリコンチップがまず暗号化された方法を使用して自分自身を測定し、改ざんされていないことを保証します。そしてその状態をいつでも検証できるためです。

またハードウェアとソフトウェアの分離が、チップは製造者、ソフトウェアはクラウドオペレーターという観点から、クラウドオペレーターがメモリ内のデータへのアクセス権を得て侵害するなどといった脅威から守ることができます。
>これは CPU のファームウェアによって生成される鍵でメモリ内のデータを暗号化しているためです。

さらに Attestation プロセスにおいて、データとコードの整合性および機密性を保証し、メモリ保護が有効でないハードウェアに移行された場合にそのワークロードが実行されないようにします。この Attestation が Zero-trust において重要な役割になります。

### Attestation の Zero-trust における重要性
TEE は信頼できるといわれますが、その言葉だけで信頼するのは ""明示的に検証する"" を満たしていません。
そこで重要なのが Attestation になります。

Attestation によって明示的に暗号化されているかの確認の証拠を要求でき、以下の2つのことを証明することができます。

* TEE の妥当性
* コードが改ざんされていないことの確認

これによって組織はクラウドオペレーターさえ信頼しないことを実現することができます。
以上より Confidential Computing における

* 侵害を想定する
* 明示的に検証する
* 最小限の特権アクセスを使用する


のカバー範囲をまとめたのが以下の図になります。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/693422/23deca18-8fff-4a25-5927-a465233302d1.png)

次に Azure における Confidential Computing を紹介します。

# Azure の Confidential Computing
Azure Confidential Computing (ACC) は、前述で紹介した定義と原則に従って、使用中の機密データを保護するための製品とサポートサービスのポートフォリオです。このポートフォリオには、VM、コンテナベースの PaaS、およびその他の PaaS と SaaS が含まれます。2023 年 11 月時点でのポートフォリオの概要を以下に示します。 

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/693422/f3877c26-2221-1db7-23b2-68d8a51c20d5.png)

今回は PaaS に関しては触れませんが、コンテナレベルのメモリ隔離が可能な Azure Container Instance (ACI) や、仮想マシン・アプリケーションコード レベルでのメモリ隔離が可能な Azure Kubernetes Service (AKS) など Confidential Computing 対応の AMD SEV-SNP VM, Intel TDX VM 上での PaaS 製品があります。詳しくは以下を参照してください.
* [ACI コンテナレベルのメモリ隔離](https://oreil.ly/SbDye)
* [AKS 仮想マシンレベルでのメモリ隔離](https://oreil.ly/29puV)
* [AKS アプリケーションコード レベルでのメモリ隔離](https://oreil.ly/DSCwI)
### Confidential VMs

Azure Confidential VM（ACC）は、セキュリティ要件を満たすために、強力なセキュリティと機密性、およびハードウェアによる境界を提供しています。Confidential VM は、既存のワークロードを移行し、コードを変更せずにアプリケーションをリフトアンドシフトするシナリオで特に有用です。

Confidential VM を使用することの利点として以下が挙げられます

* 仮想マシン、ハイパーバイザー、およびホスト管理コードの間の堅牢なハードウェアベースの分離
* デプロイ前にホストのコンプライアンスを確認するためのカスタマイズ可能なアテステーションポリシー
* 初回起動前のクラウドベースの Confidential OS ディスク暗号化
* プラットフォームまたはカスタマー（オプションで）が所有および管理するVM暗号化キー
* プラットフォームの成功したアテステーションと VM の暗号化キーの間の暗号的バインディングによるセキュアキーリリース
* 仮想マシン内のキーとシークレットを Attestation および保護する専用の仮想 Trusted Platform Module（TPM）インスタンス

では Confidential VM がどのようにしてハイパーバイザーからの読み取りと改ざんを防ぐ方法を表した図が以下になります。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/693422/785706d1-2909-ccdf-8951-78f46107e6b8.png)

この様にしてハイパーパイザーは TEE 外となるため、前述したようにアクセスができなくなります。

次にコードレベルの隔離に関してです。

VM 内のアプリケーション enclave は、Intel Software Guard Extensions（SGX）技術を使用してコードレベルの隔離をサポートしています。
では enclave 内でどの部分のアプリケーションが動作しているかを理解していきます。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/693422/1994b033-91c0-b0a1-9e83-e485582bcfeb.png)

1. エンクレーブは、そのコードの一部をアプリケーションの残りから分離します
1. Enclave を作成します
1. Attest をしてそのEnclave が信頼できるかを確かめます
1. Enclave 内の信頼されたコードを実行し、戻り値を Call bridge を介して受け取ります

以上が Confidential VM の仕組みになります。

最後に Microsot の Attestation サービスに関してです。

### Microsoft Azure Attestation

[Microsoft Azure Attestation](https://learn.microsoft.com/en-us/azure/confidential-computing/guest-attestation-confidential-vms)は、ハードウェアプラットフォームとそれ上で実行されているソフトウェアの信頼性を検証するサービスです。

このサービスは、Trusted Platform Modules (TPMs) でサポートされるプラットフォームの検証と、TEE（Trusted Execution Environments）の状態の検証の両方を可能にします。

これにより、シークレットマネージャーなどの信頼する側は、シークレットがリリースされ、機密のワークロードが処理される前に、意図したソフトウェアが信頼できるハードウェア上で実行されていることを保証できます。

Attestation は、次の 2 つのパターンに従うことができます：

* パスポートモデル：TEE 内のアプリケーションは、証拠を直接検証者（Azure Attestation またはサードパーティの証明サービス）に渡し、検証者からの確認を受けてから、信頼する側からシークレットを要求します。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/693422/e64d24b8-b0ad-1430-a968-a5e832d5de9f.png)

* バックグラウンドチェックモデル：TEE 内のアプリケーションは最初に証拠を信頼する側に渡してシークレットを要求し、信頼する側が証拠が信頼できるかどうかを検証した後にTEEにシークレットを提供します。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/693422/bac40b90-f1d2-fec7-701e-eebeefd30d75.png)


# Confidential AI とは？
近年、生成 AI は革新と変革の重要な領域として浮上しています。特に、**大規模言語モデル**の人気が急速に高まっています。これは GPU に強く依存しており、また機密データの取り扱いに関しても懸念が生まれます。そこで考えられるのが Confidential AI です。 Azure における Confidential Computing 対応の GPU は[こちら](https://techcommunity.microsoft.com/t5/azure-confidential-computing/announcing-azure-confidential-vms-with-nvidia-h100-tensor-core/ba-p/3975389)を参照してください。

Confidential AI は、ハードウェアベースの技術のセットであり、AI ライフサイクル全体でデータとモデルを暗号的に検証可能な方法で保護できます。前述した通りデータとモデルが使用中である場合でも保護が可能です。

**例として競合する 2 つの銀行が共有データセットでモデルをトレーニングすることで、顧客を詐欺から保護し、両者にとって Win-Win の状況を生み出す方法を示します**。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/693422/9387170f-a16f-bcf0-77d9-fed7d4ad40e9.png)

このシナリオでは、機密計算を活用することで、組織は Confidential AI のすべての利点を享受できる一方で、パフォーマンスやデータプライバシーを犠牲にすることなく、最大限の利益を得ることができます。
なんとなく Confidential AI が分かってきましたでしょうか？最後に Confidential AI のシナリオに関してまとめます。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/693422/ebc8a157-9f96-41b8-2e66-9508e2413219.png)

* Confidential Training: トレーニングデータ、モデルアーキテクチャ、およびモデルの重みを、ローグ管理者や内部者などの高度な攻撃者から保護できます。このモデルの重みを保護することは、トレーニングデータが公開されている場合でも、リソースが豊富であるか、モデル IP が機密である場合に重要です。
* Confidential Fine-tuning: ドメイン固有のプライベートデータを使用して汎用 AI モデルを微調整することは一般的だとと思います。ここで Confidential AI は、微調整中にプロプライエタリデータとトレーニングされたモデルを保護するために使用できます。
* Confidential Multi-party Training: 複数の組織がモデルを相互に公開せずに共同でトレーニングするシナリオを実現します。結果の共有方法についてもポリシーを適用できます。先ほどの例で示しましたね。
* Confidential Federated Learning: データの集約ができないシナリオで、分散トレーニングの代替として提案されています。Federated Learning と組み合わせることで、機密性とプライバシーを強化できます

# まとめ
今回の記事では以下のことに関してまとめました。

* Confidential Computing は使用中のデータを暗号化できる技術で、TEE というハードウェアベースの信頼できる実行環境で計算を行うことを確認しました
* Confidential Computing は Zero-trust の原則に沿って、データとコードの整合性と機密性を保証し、内部や外部からの攻撃に対して強固なセキュリティを提供することを確認しました
* Azure Confidential Computing は、仮想マシン、コンテナ、PaaS、SaaS などの製品とサービスで Confidential Computing を実現し、Attestation サービスで信頼性を検証することを確認しました
* Confidential AI は、Confidential Computing を活用して、AI ライフサイクル全体でデータとモデルを保護し、プライバシーとパフォーマンスを両立することを確認しました

以上で Confidential Computing と Azure での Confidential Computing に関してでした。
アドバイスや質問はいつでも受け付けております。
",0,0,0,Azure,Security,Confidential Computing の概要 ~Confidential AI も少し~,,,2,0,TakumiSeo,TakSewo,1,,,,,693422,https://avatars0.githubusercontent.com/u/49015441?v=4,False,,,,AI,ゼロトラスト,ConfidentialComputing
"## はじめに
MongoDBでの効率的なコレクション設計には、シャーディングを考慮したアプローチが不可欠です。本記事では、最適なシャードキーの選び方に焦点を当て、それらのキーがMongoDBのパフォーマンスにどのように影響するかを探ります。

## シャードキーとは
シャーディングはデータベースの水平分散を指し、データを異なるサーバーに分散させて負荷を軽減します。シャードキーはこのシャーディングプロセスにおいて、どのデータがどのシャードに割り当てられるかを決定する重要な要素です。

MongoDBでは、シャードキーによってデータは重複なく分割されます。分割されたデータ範囲を**チャンク**と呼び、MongoDBはこれらのチャンクを各シャードに均等に分配します。この均等なデータ分配プロセスを**オートバランシング**と称します。


## シャードキーの選び方アンチパターン
まずは、やってはいけない選び方を説明します。シャードキーの選び方はいろいろありますが、やらない方を先に分かっておくと選択肢が狭まり、選びやすくなります。

では、シャードキーのアンチパターンを３つ紹介します。

### アンチパターン１：検索に使用しないフィールド
検索に使用しないフィールドをシャードキーに設定してしまうと、サーバーに無駄な負荷をかけてしまいます。
シャーディングされたサーバーへデータを取得するときの流れを説明します。
1. mongosからconfigサーバーへ、データが格納されている場所を問い合わせます。
1. configサーバーは設定されたシャードキーから、データが格納されたシャードを見つけます
1. configサーバーからmongosへ格納場所（シャード）を渡します
1. mongosは指定されたシャードからデータを取得します

ここで、シャードキーのフィールドが検索クエリに指定されていないと、configサーバーがmongosへ格納場所を教えることができず、シャードを全検索します。

![スクリーンショット 2023-12-21 21.01.14.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1650886/26def120-f0f1-8e35-d8a8-2583a56925b7.png)

そのため、せっかくシャードを分散しているのに、負荷分散できなければシャーディングの意味がないため、検索に使わないフィールドはシャードキーに指定しないようにしましょう。

### アンチパターン2：単調増加するフィールド
単調増加するフィールド（例えば、タイムスタンプやID）は、新しいデータが特定のシャードに偏ることを引き起こすため、シャードキーとしては適していません。
例えばUserコレクションで、UserIDをシャードキーにしたとき、UserIDは001,002,003と単調増加していきます。多くのユーザーがいる場合、UserIDの値も大きくなり、片方のシャードに問い合わせが偏ります。

![スクリーンショット 2023-12-21 21.14.29.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1650886/5915c28c-3c4d-d225-c94d-390867aea19f.png)

これはMongoDBが各チャンクにminKey,maxKeyをいう値をもっており、単調増加した場合、maxKeyのみが増えていくためです。

単調増加するフィールドとしては、_idや、インクリメントだけする数値データ、日付データなどがあります。これらは、シャードキーに設定しないようにしましょう。

## シャードキーの選び方
アンチパターンがわかったところで、シャードキーの選び方を考えます。
適切なシャードキーを選ぶことは、システムのスケーラビリティとパフォーマンスに直接影響します。
以下に選び方の一種を載せます。

### 検索条件に使われるフィールド
「アンチパターン１：検索に使用しないフィールド」の逆で、検索によく使われるフィールドはシャードキーに適しています。


### カーディナリティの高いフィールド
シャードキーのカーディナリティによって、作成できるチャンクの最大数が決まります。
そのため、カーディナリティが高い、つまり多様な値を持つフィールドをシャードキーに選ぶことで、データの分散が均等になり、負荷分散に寄与します。

例として、投稿コレクションを例に、どのフィールドがシャードキーに適切か考えてみましょう。
投稿IDはシステムにより自動採番される値とします。

【投稿コレクション】
- _id
- 投稿ID
- ユーザーID
- 投稿日時
- 投稿内容
- いいね数

検索条件に使用されない、「_id」「いいね数」はシャードキーに適切ではありません。
単調増加する、「投稿ID」「投稿日時」はシャードキーに適切ではありません。

残ったのは「ユーザーID」「投稿内容」ですが、カーディナリティが高い「ユーザーID」が適切です。

## 終わりに
適切なシャードキーの選定は、MongoDBのパフォーマンスとスケーラビリティを最大化する上で重要です。これらのガイドラインを参考に、効果的なシャーディング戦略を立てましょう。

### 参考文献
- MongoDB公式ドキュメント: [シャードキーの選び方](https://www.mongodb.com/docs/manual/core/sharding-choose-a-shard-key/#std-label-sharding-shard-key-selection)
",0,0,0,MongoDB,DB,MongoDBシャードキーの選び方,"アイデアが浮かんだら個人開発してます。
PHP・Vueとか。",,0,2,,n_yamadamadamada,25,,東京,かのかの,,1650886,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/1650886/7fa7ef6ec69e39e5ba077c3017fb6aaf1d196326/x_large.png?1699109079,False,,,,設計,DB設計,
"Portainer is very well-known application that provides a web UI to manage containers. Before knowing more about it, I thought it was just a nice interface to manage Docker functionality graphically.

I'm not sure how it started, but Portainer is now a very comprehensive application that can be used to manage containers in Docker, Docker Swarm, Kubernetes and Azure ACI from one centralized interface.

In this article, I will do an overview of Portainer's functionality and try to manage a Kubernetes cluster in the local network with it.

# Requirements

The requirements to start using Portainer on top of Docker are very simple:

- Install the Docker Engine:

https://docs.docker.com/engine/install/ubuntu/

- Setup Docker management by a non-root user:

https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user

I did these steps on an Ubuntu Server installed on a PC in my local network.

# Install Portainer

https://docs.portainer.io/start/install-ce/server/docker/linux

Actually, there's not much in terms of installation since we are just starting the corresponding container:

```shell
$ docker volume create portainer_data # volume to hold Portainer's database
$ docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest
```

Now, we have Portainer up and running:

```shell
$ docker ps
CONTAINER ID   IMAGE                           COMMAND        CREATED          STATUS          PORTS                                                                                            NAMES
fdfbdb5273a4   portainer/portainer-ce:latest   ""/portainer""   27 seconds ago   Up 26 seconds   0.0.0.0:8000->8000/tcp, :::8000->8000/tcp, 0.0.0.0:9443->9443/tcp, :::9443->9443/tcp, 9000/tcp   portainer
```

# Access Portainer

With the installation complete, we can access it through the port `9443`:

```
https://${ip_address}:9443
```

You will be presented by a browser warning regarding Portainer's certificate, but it's safe to proceed. We first set the password for the `admin` user.

Because I left the `admin` user setup screen opened for a couple of minutes, I was shown the error below when trying to proceed:

`Your Portainer instance timed out for security purposes. To re-enable your Portainer instance, you will need to restart Portainer.`

So, I just did as per instructions:

```shell
$ docker restart portainer
```

And I was able to access the application:

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/509832/05d7e4f6-2835-fe0e-4c5c-ba96f681bc83.png)

I selected ""Get Started"" to start managing the Docker installation Portainer is running on, then selected the `local` environment to connect to it and I was presented with the screen below:

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/509832/47814675-84c4-0b7e-7c74-213276eeb30f.png)

From here, we can manage our Docker installation from Portainer's friendly interface. For example, we can use one of the built-in application templates to quickly start containers for commonly used projects. 

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/509832/e2e1e467-2a6c-db11-3f5a-111746b7c8d9.png)

# Manage a Kubernetes Cluster

In this step, we will try to manage a Kubernetes cluster in the local network with Portainer. I've created an Ubuntu virtual machine in my home server (separate from the PC Portainer is running on) and installed Minikube on it.

We have a couple of options for adding a Kubernetes cluster to be managed by Portainer as we can see in the following page:

https://docs.portainer.io/admin/environments/add/kubernetes

In this example, I will use the ""Edge Agent Standard"" option.

Portainer works through two elements. One is the Portainer Server we run in the previous step. We also need the Portainer Agent to be deployed to each environment we want to manage. These two components run as lightweight containers in our infrastructure.

Going back to the options we have to add a Kubernetes cluster to Portainer, the ""Agent"" option is used when we the server can access the environment we want to add. If it's not the case, we use one of the ""Edge Agent"" options as, in this case, it's the Agent that polls the Portainer Server periodically to see if there are any pending jobs to perform.

## Requirements

We just need the Agent to be able to access the UI port (`9443` by default) in the Portainer Server instance.

## Steps

We first go the ""Environments"" page and click the ""+ Add environment` button:

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/509832/22573a2c-72a4-b137-f35f-d8cc1b51d2b1.png)

Select ""Kubernetes"" and click ""Start Wizard"". In the next screen, just select ""Edge Agent Standard"", type a name for the environment and click ""Create"". In the ""More settings"" option, we can change the poll frequency and assign metadata such as group and tags.

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/509832/286c1d0e-e34b-d339-4b06-2802df691900.png)

A Linux command will be generated so we can run it on our node. In my case, I will run it on the VM where Minikube is running on.

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/509832/7acd4d7d-c15b-6300-c688-0270993f0cb3.png)

The command failed to me with the following error:

`Unable to find kubectl binary. Please ensure kubectl is installed before running this script.`

The issue was the fact that I was using `kubectl` as an alias of the `minikube kubectl` command: `alias kubectl=""minikube kubectl --""`. So, I disabled the alias and actually installed `kubectl` instead.

After that, the command run just fine:

```shell
$ curl https://downloads.portainer.io/ee2-19/portainer-edge-agent-setup.sh | bash -s -- ""a3865105-0217-47ca-b55a-ba1c31180de4"" ""aHR0cHM6Ly8xOTIuMTY4LjAuMTI6OTQ0M3wxOTIuMTY4LjAuMTI6ODAwMHxVVUN1ck5NZDRFNVpXYWNTMEJub01wRXBTOE1rNVJGcXFIS045SWhsbk1ZPXwz"" ""1"" """" """"
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  4160  100  4160    0     0  35406      0 --:--:-- --:--:-- --:--:-- 35254
Downloading agent manifest...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  2306  100  2306    0     0   5178      0 --:--:-- --:--:-- --:--:--  5182
Creating Portainer namespace...
namespace/portainer created
Creating agent configuration...
kubectl create configmap -n portainer portainer-agent-edge --from-literal=EDGE_ID=a3865105-0217-47ca-b55a-ba1c31180de4 --from-literal=EDGE_INSECURE_POLL=1
configmap/portainer-agent-edge created
Creating agent secret...
secret/portainer-agent-edge-key created
Deploying agent...
Warning: resource namespaces/portainer is missing the kubectl.kubernetes.io/last-applied-configuration annotation which is required by kubectl apply. kubectl apply should only be used on resources created declaratively by either kubectl create --save-config or kubectl apply. The missing annotation will be patched automatically.
namespace/portainer configured
serviceaccount/portainer-sa-clusteradmin created
clusterrolebinding.rbac.authorization.k8s.io/portainer-crb-clusteradmin created
service/portainer-agent created
deployment.apps/portainer-agent created
Portainer Edge agent successfully deployed
```

## Managing the Cluster

The new environment was added to Portainer and I was able to check it:

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/509832/3f99488e-b9a2-3a0f-5d85-293539643dc6.png)

From here, we can start managing our cluster through Portainer. We can, for example, deploy an application from a Git repository and have Portainer update the application whenever the application manifests in the repository are updated.

We can also install Helm charts through the available screen:

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/509832/1a224f9e-fc0f-2b5d-8cde-73cdf12fdd2d.png)

# Conclusion

I won't go any further with exploring the functionality provided by Portainer in this article, but you can check the YouTube video below where the author does a much more comprehensive overview of Portainer.

https://www.youtube.com/watch?v=FC8pABzxZVU

I have to explore Portainer much more to understand all of its benefits but, for now, at least I had a very good impression on how user-friendly is its user interface. 

# References

- https://docs.portainer.io/start/architecture
- https://docs.portainer.io/start/install-ce/server/docker/linux
- https://docs.portainer.io/admin/environments/add/kubernetes
- https://docs.docker.com/engine/install/ubuntu/
- https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user
",0,1,0,Docker,kubernetes,Experimenting with Managing Containers with Portainer,,,1,5,,dennistanaka,13,,,田中 デニス,株式会社リンクバル,509832,https://lh3.googleusercontent.com/a-/AAuE7mApwHG8iIipKcfZ3djaZWW0_X4mTUMQVT0QEAlgh6s=s50,False,,,,container,portainer,
"
## はじめに
エンジニア1年目を振り返った時に、とても印象に残った話が一つあるのでそれについて書きます。
社内業務システムの運用時にデータ修正を行うことがあるのですが、そこで起きた失敗と振り返りの話です。

## 背景
社内の1000人以上が利用する業務システムの運用の仕事の中に、ヘルプデスク対応というものがあります。
これは、事業部の方からプロダクトについての質問や依頼が開発部に寄せられ、その対応を行なう仕事です。
平均して週に10件ほど依頼が来て、チームメンバーで分担しながら対応していきます。

その中には、画面上から更新できないのでデータを直接修正して欲しいという依頼が来ることがあります。
運用で想定されていない何らかの特殊な操作をした場合、本来の想定と異なるデータが登録されてしまう場合があります。
そうなると、流入実績の計算等が異なるものになってくるので、事業部の方の評価や戦略に関わってくることになります。
そのため、開発部にヘルプデスクとしてデータ修正を依頼する運用フローになっています。

ちなみにデータベースはGoogle CloudのCloud SQLでPostgresを利用しています。

:::note warn
監査上の理由もあり、本来データ修正は積極的に行うべきことではないと言われています。
しかし、業務システムの複雑なデータ構造ゆえ、どうしてもせざるを得なくなる場合があります。
頻度が高いものに関しては、画面上からデータを直せるようにするといった改修をバックログに積んでいき、データ修正しなくて済むようにしていく必要があります。
事業部にとっても開発部にとっても余計な手間が無くなるのでWinwinですし、監査的にも楽になります。
:::

上記述べたようなデータ修正のフローがあり、運用ルールに従って定常タスクとして処理していました。
具体的には以下のようなフローになります。

1. ヘルプデスクが来て、データ修正が必要となった場合、対応するJiraチケットを作成する
2. 背景等を記入し、Jiraのコメントにクエリを書く
3. 他のチームメンバーにダブルチェックを依頼する。
4. ダブルチェック体制でクエリを確認してから、レビュワーと一緒に本番環境でクエリを実行する

この際、ダブルチェックの依頼された人がクエリのチェックも兼ねて見ることになります。
また、チームの共通ツールとしてDBeaver上で実行するルールとなっていました。

![dbeaver.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/614347/54291b5f-9934-b9ab-a891-aee5c6d38e56.png)

## 何が起きたか
結論、SQLのUPDATE文のWHERE句をつけ忘れて、あるテーブルの該当カラムの更新を全レコードに対して実行してしまいました。
状況としては、私がダブルチェックのレビュワーで、他のチームメンバー(先輩)のSQL実行を見守るような図式でした。

データの復旧に関しては、Cloud SQLのバックアップと別に存在する履歴テーブルを元にして、どうにか復旧することができました。
不幸中の幸いは、対象テーブルとその更新によって、事業の業務が止まらずに済んだことです。

しかし非常に重大なインシデントになりうるミスであることには変わりありません。
UPDATE文のWHERE句が無いという初歩的なミスをなぜ気付けなかったのか？
振り返りをすると、以下のような要因が挙げられました。

#### DBeaverのクライアントツール依存
本件のデータ修正は、実はDBeaver以外のクライアントツール、Table Plusを利用していました。
元々、DBeaverの設定では、手動コミットのチェックを外すことがチームルールとなっており、UI上からデフォルトでトランザクションを貼られることになります。
こうして、万一の時のために、意識的にコミットボタンを押さない限りデータ修正が反映されないような仕組みとなっていました。

しかし、実施時のTable PlusにはUI上でのトランザクションが設定されていませんでした。
私はてっきり、トランザクションが貼られているものと思い込んでいて、ヒューマンエラーがあってもROLLBACKできるだろうと気軽に構えていた節がありました。
「そういえばwhere句が無かったですね。rollbackの出番、いや？これもしかしてrollbackできない？あっ」

本来であれば、データ修正のためのSQL文は明示的にBEGIN~COMMITを書くことが必要です。
しかし、クライアントツールのDBeaverのUI設定に慣れていたため、その意識が希薄となっていました。

#### その他の要因
他にも細かい要因は幾つかあったように思います。
- データ修正自体は1レコード1カラムの更新のみのシンプルなパターンだったので大丈夫だろう、と逆に気楽に構えていた
- 先輩が書いたコードなので大丈夫だろうと、気楽に構えていた
- データ修正の背景理解が難しく、頭の片隅で逡巡していた
  - 次の予定(ミーティング)が有ったので、モヤモヤを抱えながらも何かしら仕様があるのだろうと区切りをつけデータ修正を開始した

## 振り返りを通して変わったこと
本件のインシデントを開発チーム全体で振り返り、運用ルールが刷新されました。
個人の意識で気をつけましょうではヒューマンエラーの防止にはならないので仕組みで解決することを目指します。
刷新された点は以下になります。

#### データ修正手順書のテンプレートを作る
今までは、担当者が背景やクエリをJiraのコメントに自由に書いていくスタイルでした。
そうすると、クエリの書き方なども人それぞれで異なってくるので、ミスに気づかない要因となります。
手順書を作成することで、クエリのフォーマットも統一できるのでルールを強制できます。例えば、トランザクションもBEGINを含めることが明文化されます。
また、フォーマットに沿うことで内容も伝えやすくなるのでレビュワーの負担も小さくすることができます。
以下のような手順書となりました。

```:〇〇のデータ修正手順書
# 概要

* Jiraチケット: (チケットのURL)
* クエリ作成者、実行者: (名前)
* レビュー、ダブルチェック担当者: (名前)
* 背景: (データ修正が必要となった経緯と理由)
* 対象テーブル: (対象のテーブルと修正件数)

# レビュー観点

* [ ] バックアップと確認用のselect文があること
* [ ] UPDATE/DELETE文にはWHERE句があり、一つのレコードに特定できること
* [ ] updated_atの更新が含まれること

# 手順

1. DBに接続する
psql ...

2. トランザクションを貼る
database_name=> BEGIN;

3. バックアップ用のSQL実行
database_name=> SELECT ...

4. データ修正のSQL実行
database_name=> UPDATE ...

5. 想定通りにデータが修正されたか確認する
database_name=> SELECT ...

6. 想定通りであればCOMMIT
database_name=> COMMIT;

7. 実行履歴のログを貼る
...

```

#### psqlコマンドで実行する
GUIのクライアントツールを使わずにpsqlコマンドでデータ修正を実行するようになりました。

GUIツールでデータ修正を実行すると以下のようなデメリットが挙げられました。
- UIに依存するので、バージョンアップのたびに手順書を更新する必要がある
- UI上で間違った操作をするリスクがある
- トランザクションを貼る意識が希薄になる
- 記録が残しづらい
  - 今までは実行履歴をツールのスクショで貼っていた

また、psqlコマンドを利用することで以下のメリットがあります
- レビューが通った手順書のコマンドをコピペして実行するだけなので、作業が明確になる
- コマンドラインの実行履歴を残せるので、誰が見ても操作が明確に分かる
- テキストベースで記録が残るので、後から検索もしやすくなる

このようなメリットが享受できるため、今後データ修正はGUIツールではなくpsqlコマンドで実行することになりました。
GUIツールは、あくまでRead ReplicaのDB専用にデータ閲覧のためだけに使うというルールとなりました。

改めて、データ修正の運用フローは以下のようになりました。
1. ヘルプデスクが来て、データ修正が必要となった場合、対応するJiraチケットを作成する
2. データ修正手順書のテンプレートに沿って、背景やクエリを埋めていく
3. 年次が高い他のチームメンバーにクエリレビューを依頼する
4. クエリレビューが通ったら、ダブルチェック体制でレビュワーと一緒に、手順書に沿って本番環境でクエリを実行する

:::note warn
欲を言えば、ステージング環境のような場所で全く同じレコードを持っているデータベースを複製しておき、クエリが本当に意図したものなのかの検証工程をフローに入れることが理想となります。
しかし、どこまで厳密にレビューするのかはコストもかかる話であり、ビジネス的な観点でリスクをどのように捉えるか次第だと思います。
:::

## まとめ
UPDATE文にWHERE句を書かずに実行してしまったインシデントと、その振り返りについて書きました。
SQLのUPDATEとDELETEは、事故の元になるので慎重に考える必要があるんだなということを痛感しました。

蛇足ですが、MySQLでは言語レベルでWHERE句の無いUPDATE文やDELETE文を弾くオプションをつけることができるようです。

MySQL
https://qiita.com/emacs_hhkb/items/c275cb69282ccc264307

振り返りにあたっては、新しい運用フローを制定する過程で、経験豊富な先輩方のアドバイスや議論が多くありました。
運用フロー刷新以降は、データ修正にまつわるミスやインシデントは一度も起きていません。
色々な議論の積み重ねでルールが定まっていくことを実感する機会となりました。
",0,0,0,SQL,PostgreSQL,データ修正で気をつけること-失敗を踏まえて,"現在、株式会社BuySell TechnologiesでWebエンジニアをしています。
大学院では自然現象のシミュレーションモデルの研究をしていました。
プログラミングスクールGeekSalonで長期インターンをしたことがあります。",,16,29,,MandoNarin,33,,埼玉県,Mando Narin,,614347,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/614347/a09c3f7254a77669999b8d3e3fe590c45368afbb/x_large.png?1637370884,False,MandeNaren,https://lapras.com/public/XT3QQON,,ポエム,運用,
"# 何が起こったか？
お勉強がてら作ったWebアプリにログインログアウト機能を作ろうと思って、とりま、paizaラーニング様の言う通り、settings.pyやらurls.pyやら修正したり、追加したりしていました。
login.htmlとlogged_out.htmlも作成し、テスト！

rogin.htmlはさっくり表示され、いいねぇ＾＾と喜んでいました。
そして、ログアウト！
・・・・・
「このページは機能していません　405エラー」

なんかあっさりした日本語のエラーが表示されました。
エラーが出るときって、なんか色々小難しい英語でまくしたてられるのに。

# ログインはうまくいくのにログアウトできないって
- ルーティングがうまくいってない？
- settings.pyがダメなん？
- ひょっとしてlogged_out.htmlに記述ミスが？
- ページのログアウトのリンクがNG？
- まさかのdjango.contrib.auth.urlsやviewsあたりにバグが！？（ぉぃｗ）

気になりだしたら先に進めなくなってしまい、1つづつ○○.pyやらXX.htmlやらを確認していきました。
時間はかかるし、一旦あきらめようと思いつつ、やっぱり気になり、また見直すという繰り返し。
そして・・・

# ターミナルを見た💦
Method Not Allowed (GET): /accounts/logout/
Method Not Allowed: /accounts/logout/
[21/Dec/2023 21:11:19] ""GET /accounts/logout/ HTTP/1.1"" 405 0
っていっぱい出てた。

これって、え、まさかのGETダメなやつ！？
そして、ググった。
LogoutViewはGETメソッド廃止されてるんだって。
えーーーーー・・・。

Logoutのリンクの部分をこんな風にしたら、あっさり解決しました。

```html
<form action=""{% url 'logout' %}"" method=""post"" name=""f_logout"">
    {% csrf_token %}
    <input type=""hidden"" value=""logout"">
    <a href=""javascript:f_logout.submit()"" class=""logout nav-link"">Logout</a>
</form>
                    
```

マジ、解決してよかった＞＜
何も手がつかなくなるところだった。
そして、色々反省した。
",0,0,0,"Django,logout,logged_out.html",,DjangoのカンタンLogout機能で2日間さまよった話,"python勉強中です。
Web開発ができるようになると楽しいかなって思ってます。
道は長い。",,5,1,,maimai3566,9,,,内緒です 本名は,,3556392,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3556392/04ccbb19a4809049d57ebee9b380df3dd027482e/x_large.png?1694469549,False,,,,,,
"Keep abreast on the ever evolving tech landscape. Examine the newest developments and trends in <a href=""https://atamjitsblog.com/"">Technology Blogs</a>.
",0,0,0,in,life,Discovering the amazing things in life on Atamjit's blog.,,,1,0,,atamjitsblog,1,,,,,3658963,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3658963/8dd3abae94bae90ec19fb21f7a958d8990111535/large.png?1703162635,False,,,,Amazing,Things,
"# はじめに
こんにちは。[ymurao2](https://twitter.com/ymurao2)です！
Viewのグループ化をSectionを利用して行う際、HeaderとContentのスペースの調整方法が分からなかったので、記事に残しておきます

#### 想定する画面
想定する画面は以下のようなものです。
Contentの上にHeaderを表示しています。

![CleanShot 2023-12-21 at 21.38.18.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/529173/62ac14a4-5d89-f2a1-b70f-14d66e88dd89.png)

# 実装
```swift
var body: some View {
    VStack(spacing: 0) {
        Section {
            Text(""Content"")
                .font(.title)
                .frame(maxWidth: .infinity)
                .frame(height: 300)
                .background(Color.gray.opacity(0.2))
        } header: {
            Text(""Header"")
                .font(.caption)
                .frame(maxWidth: .infinity, alignment: .leading)
                .background(Color.gray.opacity(0.4))
        }
    }
}
```
`Section`を`VStack`で囲んで、`spacing`を付与することでContentとHeaderのスペースを調整できることがわかりました。
0を指定することで、ContentとHeaderがピッタリくっついています。

```swift
var body: some View {
    VStack(spacing: 8) {
        Section {
            // 省略
        } header: {
            // 省略
    }
}
```
spacingに8を指定したときは以下のとおりです


![CleanShot 2023-12-21 at 21.40.32.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/529173/b2668381-0423-4edc-2556-24f93dbc376b.png)

# おわりに
当然と言えば当然かもしれませんが、簡単に実装できました
（もっと早く知りたかった...）
",0,0,0,Section,Swift,【SwiftUI】SectionのHeaderとContentのspacingを調整する,Y!でiOSエンジニアをしています！新米ですがよろしくお願いします！！,,8,4,ymurao4,ymurao,12,,,,,529173,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/529173/profile-images/1701585742,False,ymurao2,,,spacing,SwiftUI,
"# はじめに
これは[KMC Advent Calender 2022](https://adventar.org/calendars/8005)の23日目の記事です。実に1年越しの投稿です。

突然KVMのゲストOSが起動しなくなった！
バックアップも取っていない！

......となったときに手持ちの仮想ディスクをホストOSにマウントして中身だけ救出したいという記事です。
バックアップは取っておきましょう。

# TL;DR
```
sudo modprobe nbd
sudo qemu-nbd --connect=/dev/nbd0 root.img
ls /dev/nbd0*
sudo vgscan
sudo lvdisplay → NOT available
sudo lvchange -ay /dev/ubuntu-vg/ubuntu-lv
sudo lvdisplay → available
sudo mount /dev/ubuntu-vg/ubuntu-lv /mnt/vm
```

# 環境
- ゲストOS
Ubuntu 22.04
インストール時にLVMを設定しており、パーティション構成は以下の通り
```
vda                       252:0    0    30G  0 disk
|-vda1                    252:1    0     1M  0 part
|-vda2                    252:2    0     2G  0 part /boot
`-vda3                    252:3    0    28G  0 part
  `-ubuntu--vg-ubuntu--lv 253:0    0    14G  0 lvm  /
```

# 手法
基本的には[【Linux】KVMの仮想ハードディスクイメージをマウントする](https://oplern.hatenablog.com/entry/2017/07/08/200228)に従いました。
```bash
sudo modprobe nbd
sudo qemu-nbd --connect=/dev/nbd0 root.img
```
として、
`ls /dev/nbd0*` を実行すると
```bash:ls /dev/nbd0*
/dev/nbd0  /dev/nbd0p1  /dev/nbd0p2  /dev/nbd0p3
```
となりました。
各ファイルがどのパーティションに当たるか確認します。
```bash:sudo file -s /dev/nbd0
/dev/nbd0: DOS/MBR boot sector, extended partition table (last)
```
```bash:sudo file -s /dev/nbd0p1
/dev/nbd0p1: data
```
```bash:sudo file -s /dev/nbd0p2
/dev/nbd0p2: Linux rev 1.0 ext4 filesystem data, UUID=9eb83deb-0c7a-456b-aa40-c83d01a4e2cf (extents) (64bit) (large files) (huge files)
```
```bash:sudo file -s /dev/nbd0p3
/dev/nbd0p3: LVM2 PV (Linux Logical Volume Manager), UUID: RQ0pW0-G6F5-424u-qPy0-PElY-ueeg-n6KGLv, size: 105223553024
```
番号はもとのファイルシステムに対応するようです。
`/`のデータが欲しいので今回マウントする対象は`/dev/nbd0p3`になります。`LVM2 PV`と記載があります。

ではこれをマウントしてみましょう。
コマンドは`sudo mount /dev/ubuntu-vg/ubuntu-lv /mnt/vm`です。
```bash:sudo mount /dev/ubuntu-vg/ubuntu-lv /mnt/vm
mount: /mnt/vm: special device /dev/ubuntu-vg/ubuntu-lv does not exist.
       dmesg(1) may have more information after failed mount system call.
```
`does not exist.`と出たのでLVの情報を見てみましょう。
```bash:sudo vgscan
  Found volume group ""ubuntu-vg"" using metadata type lvm2
```
```bash:sudo lvdisplay
  --- Logical volume ---
  LV Path                /dev/ubuntu-vg/ubuntu-lv
  LV Name                ubuntu-lv
  VG Name                ubuntu-vg
  LV UUID                fyPl34-vdGG-J4WA-ubDw-Xbq0-QfyD-DRpnxN
  LV Write Access        read/write
  LV Creation host, time ubuntu-server, 2023-12-06 13:57:52 +0900
  LV Status              NOT available
  LV Size                <98.00 GiB
  Current LE             25087
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
```
以下の部分が原因です。
```bash
  LV Status              NOT available
```
そこで、LVをActivateします。
```bash
sudo lvchange -ay /dev/ubuntu-vg/ubuntu-lv
```
結果、availableになっているのを確認できます。
```bash:sudo lvdisplay
  --- Logical volume ---
  LV Path                /dev/ubuntu-vg/ubuntu-lv
  LV Name                ubuntu-lv
  VG Name                ubuntu-vg
  LV UUID                fyPl34-vdGG-J4WA-ubDw-Xbq0-QfyD-DRpnxN
  LV Write Access        read/write
  LV Creation host, time ubuntu-server, 2023-12-06 13:57:52 +0900
  LV Status              available
  # open                 0
  LV Size                <98.00 GiB
  Current LE             25087
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     256
  Block device           254:0
```
これでmountできるようになります。
```bash
sudo mount /dev/ubuntu-vg/ubuntu-lv /mnt/vm
```
の結果、
```bash:df -TH
/dev/mapper/ubuntu--vg-ubuntu--lv ext4      103G   31G   68G  32% /mnt/vm
```
無事mountされました。

# おわりに
バックアップは必ずしましょうね！

Advent Calenderもちゃんと期日通りに投稿しましょうね。
",0,0,0,KVM,lvm,KVMのディスク内のLVをディスク外でマウントする,,,3,3,segre5458,segre5458,6,,,,,3245951,https://avatars.githubusercontent.com/u/84152320?v=4,False,,,,QEMU,qcow2,
"# はじめに

お疲れさまです！
おおくまです！

今回は、**Docker + Ruby 3.2.2 + Rails 7.0.8 + React 18.2.0 + Node.js 21.5.0 + TailwindCSS + daisyUI + PostgreSQL**で環境構築してみました！

個人的に苦戦したので、備忘録として残したいと思います！

# 注意点

:::note warn
内容に誤りがある場合があります！
コメント等で教えていただけると幸甚です！
:::

# 環境

:::note
- Docker
- Ruby3.2.2
- Rails7.0.8
- React18.2.0
- Node.js21.5.0
- TailwindCSS
- daisyUI
- PostgreSQL
:::

# 手順

まずは作業フォルダやファイルを作っていきます！

```:ターミナル
mkdir test_app

cd test_app

mkdir back front

touch back/Dockerfile back/Gemfile back/Gemfile.lock back/entrypoint.sh

touch front/Dockerfile

touch compose.yaml
```

<br>

次に、Dockerでアプリを立ち上げるためにファイルにコードを書いていきます！

```yaml:compose.yaml
services:
  db:
    image: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - db:/var/lib/postgresql/data
    ports:
      - '3306:3306'
  back:
    build:
      context: ./back/
      dockerfile: Dockerfile
    stdin_open: true
    tty: true
    volumes:
      - ./back:/test_app
      - bundle:/usr/local/bundle
    command: bash -c ""rm -rf tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'""
    depends_on:
      - db
    ports:
      - ""3001:3000""
    environment:
      TZ: Asia/Tokyo
  front:
    build:
      context: ./front/
      dockerfile: Dockerfile
    volumes:
      - ./front:/usr/src/app
    command: sh -c ""cd app && npm start""
    ports:
      - ""3000:3000""
volumes:
  db:
    driver: local
  bundle:
    driver: local
```

<br>

```dockerfile:back/Dockerfile
FROM ruby:3.2.2

RUN apt-get update -qq && apt-get install -y build-essential libpq-dev nodejs

WORKDIR /test_app

COPY Gemfile /test_app/Gemfile

COPY Gemfile.lock /test_app/Gemfile.lock

RUN bundle install

COPY . /test_app

COPY entrypoint.sh /usr/bin/

RUN chmod +x /usr/bin/entrypoint.sh

ENTRYPOINT [""entrypoint.sh""]

EXPOSE 3000

CMD [""rails"", ""server"", ""-b"", ""0.0.0.0""]
```

<br>

```:back/Gemfile
source 'https://rubygems.org'
gem 'rails', '7.0.8'
```

<br>

```:back/Gemfile.lock
何も書かない
```

<br>

```sh:back/entrypoint.sh
#!/bin/bash

set -e

rm -f /sample/tmp/pids/server.pid

exec ""$@""
```

<br>

それでは、RailsをAPIモードで立ち上げます！

```:ターミナル
docker-compose run --no-deps back rails new . --force -d postgresql --api --skip-test
```

<br>

次に、データベース周りのコードを修正します！

```yml:back/config/database.yml
default: &default
  adapter: postgresql
  encoding: unicode
  host: db
  username: user
  password: password
  pool: <%= ENV.fetch(""RAILS_MAX_THREADS"") { 5 } %>

development:
  <<: *default
  database: test_app_development

test:
  <<: *default
  database: test_app_test

production:
  <<: *default
  url: <%= ENV['DATABASE_URL'] %>
```

<br>

次に、フロント側のファイルにコードを書いていきます！

```dockerfile:front/Dockerfile
FROM node:21.5.0-alpine

WORKDIR /usr/src/app

ENV CI=true
```

<br>

ここで1度、Dockerでアプリを立ち上げ、データベースも作成します！

```:ターミナル
docker-compose up -d --build

docker compose exec back rails db:prepare
```

<br>

次に、Reactアプリを立ち上げます！
そして、TailwindCSSとdaisyUIをインストールします！

```:ターミナル
docker-compose run --rm front sh -c ""npx create-react-app app --template typescript""

docker-compose up -d --build

docker compose exec front sh

/usr/src/app # cd app

/usr/src/app/app # npm install -D tailwindcss postcss autoprefixer

/usr/src/app/app # npx tailwindcss init -p

/usr/src/app/app # npm i -D daisyui@latest

/usr/src/app/app # exit
```

<br>

TailwindCSSとdaisyUIを使えるようにコードを書いていきます！

```diff_javascript:front/app/tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
+   ""./src/**/*.{js,jsx,ts,tsx}"",
  ],
  theme: {
    extend: {},
  },
+ plugins: [require(""daisyui"")],
}
```

<br>

```diff_css:front/app/src/index.css
+ @tailwind base;
+ @tailwind components;
+ @tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
```

<br>

```diff_tsx:front/app/src/App.tsx
import React from 'react';
import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className=""App"">
      <header className=""App-header"">
        <img src={logo} className=""App-logo"" alt=""logo"" />
+       <p className='btn text-5xl underline'>
          Edit <code>src/App.tsx</code> and save to reload.
        </p>
        <a
          className=""App-link""
          href=""https://reactjs.org""
          target=""_blank""
          rel=""noopener noreferrer""
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;
```

<br>

Dockerでアプリを立ち上げ直します！

```:ターミナル
docker-compose down

docker-compose up -d --build
```

# 動作確認

http://localhost:3000 にアクセスし、下記のように表示されていれば、フロントの設定はOKです！

<img width=800 src=""https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3348444/5e6443fb-f6d5-502e-92b1-276d95e5ecf5.jpeg"">

<br>

<br>

http://localhost:3001 にアクセスし、下記のように表示されていれば、バックの設定はOKです！

<img width=800 src=""https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3348444/d4dccc35-a830-39d6-6afc-fc43cb58a07c.jpeg"">

# さいごに

本記事が何かのお役に立てれば幸甚です！
最後まで読んでいただきありがとうございました！
",0,1,2,Rails,PostgreSQL,【初学者】環境構築備忘録【Docker + Ruby 3.2.2 + Rails 7.0.8 + React 18.2.0 + Node.js 21.5.0 + TailwindCSS + daisyUI + PostgreSQL】,RUNTEQ44期 / RubySilver,61552740637853,60,47,kumaryoya,kumaryoya,25,kumaryoya,Tokyo,Ryoya Okuma,株式会社リンクエッジ,3348444,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3348444/profile-images/1685805129,False,kumaryoya,https://bento.me/kumaryoya,,Docker,React,tailwindcss
"# はじめに
MATLAB/Simulink Advent Calendar 2023 21日目の記事になります。前日は、@shinji00qさんから非常に役立つfrdについてご紹介いただきました。こちらは不真面目なネタ記事です。

皆様ご存知の通り、MATLAB/Simulinkは制御系を設計することがメインのツールです。そんなSimulinkを今回は、制御盤設計に使いましたのでその方法を紹介いたします。
筆者は[CoRE](https://core.scramble-robot.org)という社会人/学生を問わず参加できるロボコンにチームTKGの一員として参加しますので、その制御盤を設計した例を画像として都度掲載します。

# 設計手順
## 制御機器をブロック化する
必要な制御機器類を全部ブロックにします。
最初は入出力を考えず、要素を全部書き出します。
盤外のアクチュエータもブロック化しておくことで、盤の入出力を容易に把握できるようになります。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/203155/1cf9962b-6830-4279-2ecb-7dc67261bb1a.png)

## 購買品の仕様を設定する
説明書や仕様書に沿って、入出力を定義しましょう。
設計上のメモなどあればブロック内に記載するか、画像を張り付けます。

例えば1ステップ前に記載したモータドライバMD30Cであれば、下図の真ん中のように入出力を設定します。実際にブロック内は図の右側のようにしました。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/203155/f8519df3-4743-1013-6b9f-84dfa5352830.png)

## 自作品の設計
自作品の仕様を設計していきます。
前工程で購買品の入出力仕様が決まっていますので、それに応じてIOを決めることができます。コネクタ形式や、詳細設計上の注意点も記入しておくと機器間での不整合を予防できます。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/203155/24fcf117-a4f7-c86d-b1ff-7ac25df431a9.png)

## ブロック間をつなぐ
前工程までで、各機器が出そろったので、要素間をつないでいきます。
実際の配線とブロック図上での配線をそろえることで、そのまま実態配線図が出来上がります。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/203155/f92f5f13-1c23-e881-65af-259fb3779990.png)

## いい感じに調整する
ここまで来て、ブロック全体を見返してみると、配線の本数が予想以上に多かったり、制御盤のサイズが大きくなりそうだったりと、課題が見えてきます。それに応じて、入出力を修正したり、複数の配線を１本にするよう設計を変更したりと、修正します。

## 完成
最終的に全部繋げた例が下図の通りです。実際の制御盤は中央の色付きのブロックで囲った部分で、それ以外はアクチュエータ等になります。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/203155/4fe5aac5-8e64-965a-64ca-75bcbcc8e469.png)


# 終わりに
Simulinkはブロックのインターフェースを容易に作ることができる上、ブロック内に画像や文字を簡単に入れ込めるので、簡易の仕様を記載することもできます。今回初めてSimulinkで制御盤を設計してみましたが、構想設計→外部仕様設計→詳細設計をシームレスにつなげることができ、非常に便利でした。
",0,1,0,MATLAB,ハードウェア,Simulinkで簡単、制御盤の設計！,"某工作機械メーカーでサーボ屋さんしてます

電源装置やインバータやなんやらの組込みとか制御とか

エンベデッド持ちですが組込みなにもわかりません",,32,35,,fumiya_sato,13,,愛知,佐藤 郁弥,オークマ株式会社,203155,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/203155/profile-images/1648353120,False,fumiya_sato,,,ロボット,Simulink,制御盤
"今週私のハニーポットにLINUXのマルウェアを見つけったよ！そのマルウェアは他のハニーポットマルウェアのと似ていませんそれだからそのマルウェアを見つめ直った


## 免責
* サイバーセキュリティの玄人ですけどリバースエンジニアリンの玄人ぜんぜnですよそれだから私の方法論は略式
* 日本語の学生ですからこれを書くけど私の母語は全然日本語じゃないでしょから誤字ごめん ☻

![](https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExcXk2bWRnZzlwOTBhem84ZnhoMzNjbXlkNjRqdnE3dmZzOHMwczdndSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/xT9IgwSXBlNzFYobny/giphy.gif)

## 解析
 ハニーポットのジャーナルにこれを見って

 ![](https://res.cloudinary.com/practicaldev/image/fetch/s--BV59vbRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f73zx7viw1vc1na49zi4.png)
サイバー攻撃の演算子は「SFTP」プロトコルと使うけどファイル リトリーブと富ってから初めに[RADARE2](https://github.com/radareorg/radare2)を使ういましょ

 ```
 rabin2 -I mymalware

 arch     x86
baddr    0x400000
binsz    30048232
bintype  elf
bits     64
canary   false
injprot  false
class    ELF64
crypto   false
endian   little
havecode true
intrp    /lib64/ld-linux-x86-64.so.2
laddr    0x0
lang     c
linenum  false
lsyms    false
machine  AMD x86-64 architecture
nx       true
os       linux
pic      false
relocs   false
relro    partial
rpath    NONE
sanitize false
static   true
stripped true
subsys   linux
va       true
 ```
もこれ

```
rabin2 -Ir mymalware

e cfg.bigendian=false
e asm.bits=64
e asm.dwarf=true
e asm.codealign=1
e bin.lang=c
e file.type=elf
e asm.os=linux
e asm.arch=x86
```

このマルウェアは屹度x86-64LINUXのマルウェア「ELF」ですねでも何れですか

このみってください

```
strings mymalware | grep golang
```

![](https://res.cloudinary.com/practicaldev/image/fetch/s--WWaFRN5N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3c99y5c5dbc8g1oodx9.png)

これはGolangのファイルですからradare2と使うのためにredressのパイプを 要すてでもradare2に関数のなまえがまだが見れない

それは問題ではありません ☻
`binwalk`と`strings`と使ういましょ

それから`etc/services`に組み込み怪しいサービス見った

```
100.64.0[.]0 
```
VIRUSTOTALのIPの審査はOPENSCANSSHを指し示て
なるほどうでもIPは頼もしい情報源じゃないのためにそれはじゃない十分



このマルウェアは[データ引き出し](https://www.ibm.com/docs/ja/qradar-common?topic=extensions-data-exfiltration)が使って
そのためにそれはIPのデータ集まってとZIP新規保管

```
http://ipgrab[.]io
https://ident[.]me
https://ip.seeip[.]org
http://inet-ip[.]info
```
このマルウェアはDISCORDにそれを届けをはかった

![](https://res.cloudinary.com/practicaldev/image/fetch/s--8nwfOhJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3wlww0pf7hawqa6rb61r.png)

それから人目を引くコマンドを見った

```
service systemd-worker enable || systemctl enable systemd-worker.service
```

あ、ぴんと来る!ある[記事](https://www.bleepingcomputer.com/news/security/new-peer-to-peer-botnet-infects-linux-servers-with-cryptominers/)を思い出します

そうです！[パんちゃん](https://www.akamai.com/blog/security-research/new-p2p-botnet-panchan)ですよ

見ってください

![](https://res.cloudinary.com/practicaldev/image/fetch/s--G0x2hGo---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucyivj815u4g5ipj8oxt.png)

まだ形跡を探ってたとえば特定SIGNALコマンド

```
SIGKILL: kill
SIGQUIT: quit
```

![](https://res.cloudinary.com/practicaldev/image/fetch/s--EV_j--Gs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_800/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wcrlbove8s6j8mp0suj.jpg)

とにかくこれは私の[英語の記事](https://dev.to/terceranexus6/analyzing-a-linux-malware-binary-4b2g) 

**ありがとう**！またね

",0,0,0,Linux,マルウェア,LINUXのマルウェアの解析,"パウさんです。
私の仕事はサイバー脅威の研究についてのものです。LINUXとてもすきです！ ",,14,3,terceranexus6,terceranexus6,7,pauladelahozgarrido/,,ホス パウラ,,233436,https://avatars0.githubusercontent.com/u/9094121?v=4,False,,https://mi-wo.site/@alien,,Malware,リナックス,マルウェアの解析
"The Flat Glass Market has been a fundamental segment of the global glass industry, showcasing steady growth and innovative applications across various sectors. Flat glass, known for its versatility and widespread use in construction, automotive, electronics, and other industries, has played a significant role in shaping modern architecture and manufacturing processes.

Versatility in Applications:

Flat glass is a vital material in diverse industries. From architectural applications like windows, facades, and interior designs to automotive windshields, electronic displays, and solar panels, its versatility enables its use across a broad spectrum of applications.

Technological Advancements:

The market witnesses continual advancements in glass manufacturing technologies. Innovations in float glass production, coatings, and laminating techniques enhance functionalities such as thermal insulation, soundproofing, and strength, meeting the evolving demands of various industries.

Sustainability and Energy Efficiency:

Sustainability remains a focal point in the Flat Glass Market. Energy-efficient glass solutions contribute to green building certifications by optimizing natural lighting, reducing heat transfer, and promoting energy savings, aligning with environmental initiatives.

Architectural Advancements:

In the architectural sector, flat glass drives modern designs and innovative structures. Innovations in smart glass technologies, such as switchable or self-tinting glass, offer enhanced control over light transmission and privacy, shaping contemporary building designs.

Automotive and Electronics:

The automotive and electronics industries rely on flat glass for safety, aesthetics, and functionality. Advanced glass solutions enhance vehicle safety, reduce glare, and support electronic displays, contributing to modern automotive design and gadget manufacturing.

For More Info@ https://www.gmiresearch.com/report/flat-glass-market-share-analysis-industry-research/

Future Trajectories:

The Flat Glass Market anticipates further advancements. Potential trends include increased adoption of specialty glass for smart cities, advancements in glass coatings for improved durability and self-cleaning properties, and the integration of glass in emerging technologies like augmented reality.

Conclusion:

Up until my last update in early 2023, the Flat Glass Market had continued its trajectory of innovation and versatility. As industries increasingly prioritize sustainability, energy efficiency, and advanced functionalities, flat glass plays an integral role in enabling modern solutions across multiple sectors. The market's impact on architecture, automotive design, electronics, and sustainable construction remains pivotal, paving the way for continued innovation and advancement in the use of flat glass across diverse industries.
",0,0,0,glass,size,Next-Gen Glass Materials: Delving into Technological Advancements and Market 2023 Expansion,,,1,0,,pkp9,1,,,,,3658952,https://lh3.googleusercontent.com/a/ACg8ocKASO03AypASorHCAGnvncWpZMYNR-GCf9onwFBSm4a=s96-c,False,,,,SharePoint,Flat,Market
"株式会社やどかりの平山です。
パスワード変更画面での実装について書かせていただきます。

<br>
〜やりたいこと〜
【現在のパスワード】が正しいものか検証し、
正しくなければバリデーションメッセージを表示したい

![552c3a971ec10167a0b72e35b2eace93.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3657995/f18718e5-54fc-e5f3-a4a3-5bac9d215325.png)

<br>
<br>
①ターミナルに下記を入力

```php:ターミナル
php artisan make::rule CurrentPasswordRule
```

② ①で作成したCurrentPasswordRule.phpに必要事項を記述
（パスワードはセキュリティの観点からHash化しています）
```php:CurrentPasswordRule.php
<?php

namespace App\Rules;

use Illuminate\Contracts\Validation\Rule;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth;

class CurrentPasswordRule implements Rule
{
    public function passes($attribute, $value)
    {
        // ユーザーがログインしているかを確認
        if (Auth::check()) {
            // ユーザーの現在のパスワードを取得
            $currentPassword = Auth::user()->password;

            // 入力されたパスワードが現在のパスワードと一致するかどうかを確認
            return Hash::check($value, $currentPassword);
        }

        return false;
    }

    public function message()
    {
        return '現在のパスワードが正しくありません。';
    }
}
```

③エラーメッセージを表示したい箇所（bladeファイル内）に記述
```php:password_change.php
//見出し部分
<th>{!! Form::label('currentPassword', '現在のパスワード') !!}</th>
<td>
    //フォーム部分
    {!! Form::password('currentPassword', ['id' => 'currentPassword', 'class' => 'col-12 form-control border', 'placeholder' => '現在のパスワードを入力してください']) !!}
    //エラーメッセージ部分
    @error('newPasswordConfirm')
        <div class=""text-danger"">
            {{ $message }}
        </div>
    @enderror
</td>
```

④Controllerに記述
```php:SettingController.php
use App\Rules\CurrentPasswordRule;

public function passwordChange(Request $request)
{
    $request->validate([
        'current_password' => ['required', new CurrentPasswordRule],
        // 他のバリデーションルールを追加
    ]);

    // パスワードを更新する処理などを記述
}
```

⑤routeを設定
```php:web.php
Route::post('setting/password_change', [SettingController::class, 'passwordChange'])->name('setting.change_password.update');
```

",0,0,0,PHP,Laravel,【PHP / Laravel】現在のパスワードと一致するか確認するバリデーション,,,1,0,,yado_hirayama,1,,,,,3657995,https://secure.gravatar.com/avatar/a6c5ac7cc8c4e0a65fbc6c75d085974b,False,,,,バリデーション,パスワード変更,
"# はじめに
はじめまして。えか太郎という人です。本日はこれまでデスクトップパソコンでプログラミングしてましたがThinkPadにしてわかったことを書いていきます。もうThinkPad以外のWindowsノートは使えないかもしれません。

# 具体的な効果
## 私の環境
* ThinkPad 13 Gen2
* CPU：Celeron
* RAM：12GB
* ROM：120GB
* FullHDのIPS液晶
* Windows10 Pro

ヤフオクで6000円で購入しました。格安だと私は思ってます。

## メリット
### 特徴的なトラックポイント
タッチパットorマウスに手を動かす手間がいらなくなるのが画期的です。一度使うと離れれられないと聞いてはいましたが想像以上でした。
### 打ちやすいキーボード
程よい押し心地としか形容できません。タンタンターンとタイピングが止まりません。ファンクションキーがどれがどれなのかわかりやすく、また、打鍵音が静かなのもグッドだドン。
### ベッドの上でも使える（ThinkPadに限らず）
### カスタマイズ性の高さ
ノート用DDR4のメモリスロットが2本あってデュアルチャネルで増設ができます。さらに、公式が分解手順を詳しく書いており、Aliexpressなどで格安で交換用に部品を買うことができます。
### 入出力系統が優秀
type-cだけでなくtype-Aも3個、フルサイズのHDMIにSDカードスロットとヘッドフォンの穴が付いているのが非常に高評価！
## デメリット
特になし！強いて言うならストレージが一個しか使えない。デュアルブートにしたい場合、できればドライブは分けておきたい。

# おわりに
Celeronではない高性能なThinkPadに早く買い替えたいですね。
#### 追記
トラックポイントの操作も意外とすぐに使いこなせるようになった話を書いた記事もあります（宣伝）。駄文なので見ないでください。

https://qiita.com/EkaTaro3/items/9d3676a79885456ce634
",0,0,0,開発環境,thinkpad,開発環境をThinkPadにして変わったこと ,徳の高い現役JK（情報に興味ある高校生）。カフェイン依存を治したい。現在高校二年生なのでそろそろ受験を考えなければならない...九州大学工学部志望。,,1,1,KotaroUehara,EkaTaro3,21,,"Fukuoka,Japan",えか太郎,高校二年生,3120367,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3120367/profile-images/1701261013,False,,,,効率化,JK,生産性向上
"The serene landscape of a farm often belies the constant battle against pests. <a=href""https://kitbuildings.ca/pages/agricultural-buildings"">Farm buildings<a/>, from barns to storage sheds, serve as havens not only for agricultural tools and produce but also for unwelcome visitors—critters of all shapes and sizes. These pests, if left unchecked, can wreak havoc on the farm's operations and resources. To maintain a thriving agricultural environment, safeguarding farm buildings from these intruders is paramount.
![Field shelter.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3632141/b59430ef-ae82-cf33-362f-49426790f758.png)


Understanding the Threat
Pests come in various forms—rodents, insects, birds, and even larger wildlife. Their entry into farm buildings can result in extensive damage. Rodents gnaw through packaging, contaminate food supplies, and pose a health risk through the spread of diseases. Insects, such as beetles and moths, can swiftly infest stored grains, causing substantial financial losses. Birds and larger animals can harm crops, equipment, and infrastructure.

Prevention Strategies
1. Seal Entry Points
The first line of defense is securing entry points. Inspect <a=href""https://kitbuildings.ca/pages/agricultural-buildings"">agricultural buildings<a/>  for gaps in walls, floors, and ceilings. Seal cracks and crevices using durable materials like steel wool, concrete, or caulk. Ensure windows, doors, and vents have tight-fitting screens or covers to prevent pests from entering.

2. Maintain Cleanliness
Pests are attracted to clutter and debris. Regularly clean and organize farm buildings, eliminating potential hiding spots and food sources. Dispose of waste properly and keep stored items elevated off the ground to reduce hiding spots.

3. Implement Monitoring Measures
Install traps, baits, and monitoring devices strategically throughout buildings to detect and control pest populations. Regularly check these devices and take prompt action if pests are detected.

4. Consider Natural Deterrents
Explore natural deterrents such as planting aromatic herbs or installing predator decoys to deter pests. Some farms also use ultrasonic devices or light traps to discourage unwanted critters.

5. Routine Inspections and Maintenance
Scheduled inspections of buildings are crucial. Conduct routine checks to identify and address any vulnerabilities or signs of pest activity promptly.

Integrated Pest Management (IPM)
An effective approach to pest control on farms is Integrated Pest Management (IPM). This holistic strategy combines various methods to minimize pests while minimizing harm to the environment and human health. IPM involves identifying pests, understanding their lifecycle, implementing preventive measures, and using pesticides only when necessary and in a targeted manner.

Conclusion
Preserving the integrity of farm buildings by keeping pests at bay is a continuous effort that requires diligence and proactive measures. By implementing preventive strategies, maintaining cleanliness, and adopting integrated pest management practices, farmers can protect their buildings, crops, and resources from the damaging effects of unwanted critters. Ultimately, safeguarding farm buildings ensures a healthier and more productive agricultural environment.
",0,0,0,fabric,Building,Pest Protection: Keeping Critters Out of Farm Buildings,"At Kit Buildings, we provide a comprehensive range of prefabricated high-tensile buildings, both temporary and permanent structures.",https://www.facebook.com/kitbuildingsystems,1,0,,kitbuildingsca,1,,330 Avro Ave  Pointe-Claire  Quebec  H9R 5W9  Canada,Kit Building Systems,"At Kit Building Systems, we offer temporary buildings",3632141,https://lh3.googleusercontent.com/a/ACg8ocLcG2GW1Ss8MVntNsqjfF6_qwZCTBnS9fw5A7vvepmx=s96-c,False,,https://kitbuildings.ca/,,Temporary,agriculturalbuilding,farmbuilding
"# はじめに
こんにちは。えか太郎と申します。本記事ではThinkPad初心者のわたしがトラックポイントを使いこなせるようになるのにどれくらいかかったかを話したいと思います。
# 結論 
一日5時間位はパソコンで作業をするのですが、
一週間とかからずに使えるようになりました。正確には多少エイムは悪いです。8割くらいは狙ったところにカーソルを乗せることができるように。2割はもう一度チャレンジ。
## 練習方法は？
とくにありません。一日5時間くらい。Qiitaの記事を書いて、ちょこっとプログラム組んだくらいです。日常的な用途をしているとそのうち慣れて来て呼吸をするように無意識に操作できるようになります。
# おわりに
ThinkPadのトラックポイントへハードルを感じている人のハードルを下げることができたら嬉しいです。
家電量販店でThinkPadを触ったときはなかなか難しいと感じましたが今では便利すぎてやめられなくなってます。
",0,0,0,thinkpad,トラックポイント,ThinkPadのトラックポイントになれるのにかかる時間,徳の高い現役JK（情報に興味ある高校生）。カフェイン依存を治したい。現在高校二年生なのでそろそろ受験を考えなければならない...九州大学工学部志望。,,1,1,KotaroUehara,EkaTaro3,21,,"Fukuoka,Japan",えか太郎,高校二年生,3120367,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3120367/profile-images/1701261013,False,,,,練習,生産性,JK
"## **はじめに**

ReactのHooksは関数コンポーネントでの状態管理やライフサイクルの機能を使えるようにする、React 16.8で導入された機能です。

この記事では、Reactの主要なHooksを紹介し、それぞれの基本的な使い方を解説します。

## **Hooksとは**

Hooksは、クラスコンポーネントを書かずに、状態や他のReactの機能を関数コンポーネントで使えるようにする関数です。これにより、より読みやすく、再利用しやすいコンポーネントを作成できます。

## useStateについて

**`useState`** は、関数コンポーネントでstateを持たせるためのHookです。

これにより、以前はクラスコンポーネントでしか利用できなかったstateを、関数コンポーネントでも使うことができるようになります。

```jsx
import React, { useState } from 'react';

function Counter() {
  // useStateを使ってstate変数を宣言します
  // ここでは`count`というstate変数を0で初期化しています
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>You clicked {count} times</p>
      // setCountを使ってcountを更新します
      <button onClick={() => setCount(count + 1)}>
        Click me!
      </button>
    </div>
  );
}

export default function App() {
  return (
    <div className=""App"">
      <Counter />
    </div>
  );
}
```

この例では、**`useState`** を使って **`count`** という名前のstate変数を作成し、初期値として **`0`** を設定しています。
**`setCount`** はこの **`count`** を更新するための関数です。ボタンをクリックすると、 **`count`** が1増えるようになっています。

### 注意点

- **`useState`** は、コンポーネントのレンダリングごとに同じ順序で呼び出される必要があります。そのため、条件分岐やループの中で **`useState`** を呼び出すことはできません。
- **`useState`** に渡す初期値は、コンポーネントの最初のレンダリング時にのみ使用されます。それ以降のレンダリングでは無視されます。

## useEffectについて

**`useEffect`** は、コンポーネントがレンダリングされた後に何かしらの処理を行いたい場合に使用します。

これにより、クラスコンポーネントの **`componentDidMount`**、**`componentDidUpdate`**、**`componentWillUnmount`** に相当する処理を実装できます。

```jsx
import React, { useState, useEffect } from 'react';

function Counter() {
  const [count, setCount] = useState(0);

  // カウントが更新された後に実行される
  useEffect(() => {
    document.title = `You clicked ${count} times`;
  }, [count]); // 依存配列にcountを指定

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me!
      </button>
    </div>
  );
}

export default function App() {
  return (
    <div className=""App"">
      <Counter />
    </div>
  );
}
```

**`useEffect`** は、第一引数に関数を、第二引数に依存配列（dependency array）を取ります。依存配列に指定された値が変更されたとき、またはコンポーネントがマウントされたとき（依存配列が空の場合）、第一引数の関数が実行されます。

### **依存配列の使用**

**`useEffect`** の第二引数に配列を渡すことで、配列内の値が変更された場合のみエフェクトが実行されるようになります。

```jsx
useEffect(() => {
  // APIを呼び出すなどの副作用を実行
}, [dependency]); // このエフェクトはdependencyが変更されたときのみ実行されます
```

## useContextについて

**`useContext`** はコンテキストオブジェクトを受け取り、そのコンテキストの現在値を返します。これにより、コンポーネントツリー内のどこからでもコンテキストを参照できるようになります。

```jsx
// ステップ1: ユーザー設定のためのコンテキストを作成
const UserSettingsContext = createContext();

// ステップ2: ユーザー設定を提供するプロバイダーコンポーネント
function UserSettingsProvider({ children }) {
  const userSettings = {
    username: 'Taro',
    theme: 'test'
  };

  return (
    <UserSettingsContext.Provider value={userSettings}>
      {children}
    </UserSettingsContext.Provider>
  );
}

// ユーザープロファイルコンポーネント
function UserProfile() {
  // ステップ3: useContextでユーザー設定を取得
  const settings = useContext(UserSettingsContext);

  return (
    <div>
      <h1>{settings.username}'s Profile</h1>
      <p>Current Theme: {settings.theme}</p>
    </div>
  );
}

export default function App() {
  return (
    <div className=""App"">
      <UserSettingsProvider>
        <UserProfile />
      </UserSettingsProvider>
    </div>
  );
}
```

- **ステップ1:** **`createContext()`** を使用して、新しいコンテキスト **`UserSettingsContext`** を作成します。これはユーザー設定を格納するためのものです。
- **ステップ2:** **`UserSettingsProvider`** というプロバイダーコンポーネントを作成し、**`UserSettingsContext.Provider`** を使用して、ユーザー設定の値をコンポーネントツリーに提供します。このコンポーネントはどの子コンポーネントも受け取ることができます。
- **ステップ3:** **`useContext(UserSettingsContext)`** を使用して、ユーザー設定の現在の値にアクセスします。これにより、**`UserProfile`** コンポーネント内でユーザー設定が直接使用できます。

**`useContext`** を使用することで、コンポーネントツリーを通じてデータを簡単に渡すことができます。これにより、propsのドリリング（親コンポーネントから子コンポーネントへと、多層にわたってpropsを渡していくプロセス）を避けることができ、コードの可読性と保守性を向上させることができます。

## useReducerについて

**`useReducer`** は、状態管理に関して **`useState`** よりも柔軟なアプローチを提供します。特に大規模なコンポーネントや複雑な状態ロジックを持つ場合に便利です。このフックを使うと、状態の更新ロジックをコンポーネントから分離し、よりテストしやすく、読みやすいコードを書くことができます。

### 基本的な使い方

**`useReducer`** は、現在の状態とそれを更新するためのアクションを引数に取る **`reducer`** 関数を使用します。これはReduxのreducerに似ていますが、Reduxを使うほどではない小規模なケースに適しています。

```jsx
import React, { useReducer } from 'react';

// 初期状態を定義
const initialState = { count: 0 };

// reducer関数を定義
// stateとactionを受け取り、新しい状態を返す
function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    default:
      throw new Error();
  }
}

function Counter() {
  // useReducerを使って状態とディスパッチ関数を取得
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <>
      Count: {state.count}
      <button onClick={() => dispatch({ type: 'increment' })}>+</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
    </>
  );
}

export default function App() {
  return (
    <div className=""App"">
      <Counter />
    </div>
  );
}
```

この例では、**`Counter`** コンポーネント内で **`useReducer`** を使っています。

**`reducer`** 関数は、現在の状態とアクションオブジェクトを受け取り、新しい状態を返します。

このパターンはReduxで一般的ですが、ここではReactのコンテキスト内で完結しています。

## 最後に

ここまで読んでくださってありがとうございました。

ここで紹介できたのは一部のみですが、少しでもお役に立てば幸いです。

他にもHooksはたくさんありますので、気になった方はぜひ調べてみてください！

https://ja.react.dev/reference/react/hooks
",0,0,0,hooks,React,ReactのHooks入門,,,1,3,,h-i-ist,8,,,,,3330132,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3330132/42ae3f2a8e4187f4c540651d9e0530df32c6390b/large.png?1685062294,False,,,,,,
"# 電卓をデスクトップアプリにしたい

　13日目の記事で電卓を作りました（改造ですが）

https://qiita.com/snowdrops89/items/452b5f7191ac9adae401

　その後、コメントに「デスクトップアプリへの展開記事などいかがでしょう？」とのお言葉を賜りました。
　wnako3で作成したプログラムをデスクトップアプリにするのは、なでしこ3配布キットを使うのが簡単です。

https://nadesi.com/doc3/index.php?%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%82%92PC%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A8%E3%81%97%E3%81%A6%E9%85%8D%E5%B8%83

　一昨年のアドベントカレンダーで、既にお試し記事も書きました。

https://qiita.com/snowdrops89/items/580e3b8a6b3383d64311

　違うことがしたい！

# なでしこ3配布キット(Electron版)とは
　
🍜 **[なでしこ3配布キット(Electron版) - enako ](https://nadesi.com/v3/doc/index.php?FAQ%2F%E3%83%A9%E3%83%B3%E3%82%BF%E3%82%A4%E3%83%A0%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6&show#h73848984)**

　先のなでしこ3配布キットは、マニュアルによれば（軽量版）となっています。
　OSにインストールされているブラウザコンポーネントを使って動かすため配布サイズが小さく出来る一方で、依存の問題が生じる可能性があるということで、実際Chomeランタイム版は、いつぞやchromeさんがばーじょんあっぷして以降、起動時に「Chromeは自動テストソフトウェアによって制御されています」なるお知らせが表示されることになってしまいました。
　まあまあ邪魔くさいです。
　マニュアルでオススメされているのはChrome版だというのになんということでしょう:cry:
 （WebView(Edge)ランタイムの方は大丈夫です☆）

　そこで！
　Electron版はブラウザ機能全部入りで配布するので、サイズが大きくなるけど依存の問題は少ないというコトなんですね。

# ダウンロード

　マニュアル上に詳しい解説は無く、直接配布先であるGitHubへと誘われますよ。

👉 **[配布キットElectron版直接ダウンロード](https://github.com/kujirahand/nadesiko3electron)**

　こちらに簡単な説明があります。
　軽量版同様、リリースから配布パッケージをダウンロードすれば良いようです。
　ウチはWindowsなので、`nadesiko3-win32-x64.zip`の方をダウンロードします。

# サンプルをお試し
　解凍して開いてみると、ファイルがいっぱい！
　しかし、`nadesiko3.exe` を実行すればデモプログラムが走るのは一緒です。

　軽量版は開いてすぐの所に nadesiko3.exe と README.md のみでスッキリしていたのに比べると、nadesiko3.exe どこー？　ってなりますが、良きところにショートカットを作れば良いだけなので問題はありません。

　実行すると、「WindowsによってPCが保護されました」のお知らせが出ます。
　大丈夫ですよ～とばかりに詳細情報をクリックして、実行します。
　お知らせが出るのは最初の一回だけなので、そう邪魔くさいことはありません。

![エレクトロン版実行画面.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/561177/107976a1-0084-2695-1f0a-8491f6d4cb63.jpeg)

　デモは軽量版と同じようですね。
　カメさんがお絵かきしてくれるほか、起動、ファイル入出力、環境変数の取得など、配布キットならではの命令をお試し出来るボタンがあります。
　「説明確認」のボタンがエラーなりますね:sweat:
　軽量版ですと、ブラウザでマニュアルのなでしこ3配布キットのページが開かれるのですが、エレクトロン版のページはまだないためでしょうか。そのうち書く～とゆう心意気の表れなんでしょうかね？

　軽量版にないものとして、メニューバーがありますね❗️
　ｖ１を始めた頃、メニューバーがあると本物っぽく見えるとうれしがって一生懸命作っていたのを思い出すよね🎶
　なんと開発者ツールが開けるんですね。ブラウザだとF12で出てくるアレですね。軽量版だとコンソールのエラーとか見れないからあると便利ですよね。

 # プログラムを差し替えます
　編集するファイルのありかは`resources/app/webapp/main.nako3`と、階層が深くなってはいますが、やること自体に変わりはありません。
　`main.nako3`を、まるっと自分のプログラムに書き換えれば良いだけです。
　あと必要に応じて`index.json`を編集します。
　注意点も、軽量版と同様です。

### index.jsonでウィンドウサイズを電卓のサイズに設定。
```JSON
{
    ""title"": ""電卓"",
    ""width"": 345,
    ""height"": 530,
    ""port"": 0,
    ""appid"": ""nadesiko3app""
}
```
### タイトルの設定
　タイトルは、やっぱりなぜか index.json に設定しても反映されないので、「なでしこ3」以外に変更したい場合は、なでしこ側で「title」にテキスト設定してやります。

<!--
# タイトル設定
「title」に「電卓」をテキスト設定。
-->
<blockquote><font color=""green"">#&nbsp;タイトル設定</font><br><font color=""maroon"">「title」</font><font color=""black"">に</font><font color=""maroon"">「電卓」</font><font color=""black"">を</font><font color=""#7f00ff"">テキスト設定</font>。</blockquote>

　または、index.html の `<title>` タグに指定したものがタイトルバーに表示されるので、htmlを直接編集してもよいでしょう。

```html
<head>
  <meta charset=""utf-8"">
  <meta name=""viewport"" content=""width=device-width,initial-scale=1"">
  <title>電卓</title>
  <link rel=""stylesheet"" type=""text/css"" href=""extlib/pure-min.css"">
  <link rel=""stylesheet"" type=""text/css"" href=""css/common.css"">
</head>
```

### キャンバスのサイズ
　今回キャンバスは使わないので、幅と高さに0を設定。
<!--
# キャンバス使わない
描画中キャンバスの「幅」に0をDOM属性設定。
描画中キャンバスの「高さ」に0をDOM属性設定。
-->
<blockquote><font color=""green"">#&nbsp;キャンバス使わない</font><br><font color=""#7f00ff"">描画中キャンバス</font><font color=""black"">の</font><font color=""maroon"">「幅」</font><font color=""black"">に</font><font color=""red"">0</font><font color=""black"">を</font><font color=""#7f00ff"">DOM属性設定</font>。<br><font color=""#7f00ff"">描画中キャンバス</font><font color=""black"">の</font><font color=""maroon"">「高さ」</font><font color=""black"">に</font><font color=""red"">0</font><font color=""black"">を</font><font color=""#7f00ff"">DOM属性設定</font>。</blockquote>

### ローディング消すの忘れず。
　`index.html` の `header` という id の div にローディングのメッセージと gif が設定されていますので、それを消してやります。
<!--
# ローディング終了
「#header」に「」をテキスト設定。
-->
<blockquote><font color=""green"">#&nbsp;ローディング終了</font><br><font color=""maroon"">「#header」</font><font color=""black"">に</font><font color=""maroon"">「」</font><font color=""black"">を</font><font color=""#7f00ff"">テキスト設定</font>。</blockquote>

## できました
　あとは、作成したプログラムをまるっと貼っつけてやるだけです！
　で、こんな感じ？
 
![電卓.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/561177/927d104d-1d1a-48a6-c94d-0d0e1c056a61.jpeg)

　高さをギリに設定しようとするとなぜだかスクロースバーがでちゃう💧

　貯蔵庫で使う前提だったので、角丸にしたりボーダーを付けたりして電卓っぽく見えるようにしましたが、こうしてウィンドウに収まるとかえってイマイチな感じになっちゃっていますが気にしないで！
　とりあえず元のままをまるっと貼り付けていますが、ボーダーを消して body にでも同じ背景色を設定すれば、下の余白も気にならなくなることでしょう。

　なんだ簡単じゃん🎵　めでたしめでたし🎶
 
　・・・と、ここでやめておけば良かったのですが・・・

# 折角なのでElectron版にしか出来ないことをしたい
　と思ったのが運の尽きですよ:persevere:
　
 
　マニュアルを見ると、エレクトロン版の命令が追加されています。

👉 **[ なでしこ3 マニュアル > plugin_electron_node](https://nadesi.com/v3/doc/index.php?plugin_electron_node&show)**

　まだ、個々の命令の説明はありませんが、メニュー作ったりとかできそうな？

　ところがよく見るとダウンロードしたファイルの中に `plugin_electron_node.mjs` は、ありません。
　どうやら、v3.4.21 がリリースされた後に追加されたものラシイ。

## コマンドラインから最新版をビルドする？
　ならば、[(詳細な方法) コマンドラインから最新版をビルドする方法](https://github.com/kujirahand/nadesiko3electron#%E8%A9%B3%E7%B4%B0%E3%81%AA%E6%96%B9%E6%B3%95-%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%8B%E3%82%89%E6%9C%80%E6%96%B0%E7%89%88%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95)で、最新版を入手するしかない？

> 最初に、Node.jsをインストールしてください。

　はーい。入ってまーす。

> コマンドライン(PowerShellまたはTerminal.app)で以下を実行しましょう。
```
git clone https://github.com/kujirahand/nadesiko3electron.git
cd nadesiko3electron
npm install
```
　・・・っ！
　git 入ってなかった～orz。
　heroku でLINEボット作ってみたりなんだりしていた時に入れたのですが、その後PCが変わった時に、入れてなかった。
 
　**[ここ](https://git-scm.com/download/win)** からダウンロードしてインストールします。
　英語だよ～😭　と泣きながらウチは64ビットだから、`64-bit Git for Windows Setup`をダウンロードして、読みもせずにはいはいとインストール💧

　さて、改めて・・・
```
git clone https://github.com/kujirahand/nadesiko3electron.git
```
```
Cloning into 'nadesiko3electron'...
remote: Enumerating objects: 204, done.
remote: Counting objects: 100% (204/204), done.
remote: Compressing objects: 100% (114/114), done.
Receiving objects:  95% (194/204)used 171 (delta 87), pack-reused 0
Receiving objects: 100% (204/204), 1017.97 KiB | 4.82 MiB/s, done.
Resolving deltas: 100% (112/112), done.
```
　できたっぽい。

```
cd nadesiko3electron
npm install
```
```
added 183 packages, and audited 184 packages in 16s

37 packages are looking for funding
  run `npm fund` for details

1 moderate severity vulnerability

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
```
　無事できたっぽい？

> そして、webapp/main.nako3 を編集します。これがメインファイルです。 このファイルに実行したいなでしこのプログラムを記述します。

　main.nako3 の中身は例のデモプログラムです。
　とりあえずコレは触らずにビルドしてみます。
　それで、例のデモが動くnadesiko3.exe が出来たら成功ってことですよね？

　Windowsなので、
```
npm run build:win
```
```
> nadesiko3electron@3.4.21 build:win
> electron-packager . --icon=res/nako.ico --platform=win32 --arch=x64,ia32 --overwrite

Packaging app for platform win32 ia32 using electron v23.3.13
Packaging app for platform win32 x64 using electron v23.3.13
Wrote new apps to:
C:\Users\(ユーザー名)\nadesiko3electron\nadesiko3-win32-x64
C:\Users\(ユーザー名)\nadesiko3electron\nadesiko3-win32-ia32
```
　できた？
　`nadesiko3-win32-x64` と `nadesiko3-win32-ia32` とゆうフォルダができています。
　ia32が32ビットでx64が64ビットという考えでいいんでしょうか。
　とりあえず、nadesiko3-win32-x64 が、ダウンロードしてきたヤツと同じなので、コレで良さそう。

　ところが！
　nadesiko3.exeをクリックしてみても、何も起こりません。
　なんでー？😭

　タスクマネージャーを見ると、nadesiko3 が３つもいますよ？
　しかも、タスクの終了をしても消えないという⁉️　ミステリー😱
（メモリの多いいっこが親で、ソレを終了すれば全部消えましたｗ）
（実際には「あれー？」と何度もクリックした後に開いたので、nadesiko3の大行列でビビりましたｗｗｗ　しかもタスクの終了が出来なかったのでめっちゃ焦って再起動しました😅）
　
　その後、１からやり直してみたりしたんですがうまくいかずタイムアップ！
　この時点ですでに21日の0時を回っていますです。そして、文章は一行も書いてないとゆう💧
　ま、当日の23:59までに提出すればギリセーフでしょ（ダメ人間）

# なでしこさんじゃないけどElectron版にしか出来ないことをする
　敗北して残念なまま終わるのもなんですからねー。
## メニュー
　開発者ツールね。開発する時にはあるととっても便利だけど、配布する時にはいらないってこともあるんじゃないの？　て思ったワケですよ。
　うっかりこうゆう画面が出たらそれだけでキャー😱　てなる人もいるでしょｗ

　メニューは、app の中にある menu.js で作られているようです。
　メニューをアプリケーションに追加で、`Menu.buildFromTemplate` に配列で項目を指定しているだけなので、作るのはともかく、消すのはたやすい。
　ツールの項目をまるっと削除して実行したら、無事ツールメニューの無いメニューバーで起動しました☆

　また、バージョン情報開いても空ウィンドウしか表示されない？　と思ってましたが、webapp フォルダの version.html を開くことになってることが判明。
　これは、なでしこさんのバージョンじゃなく、作ったアプリのバージョンってことなんですね。
　そして、version.html は無いので自分で作らなきゃってことなんですね。分からんわー💧
```html:version.html
<!DOCTYPE html>
<html lang=""ja"">
<head>
  <meta charset=""utf-8"">
  <meta name=""viewport"" content=""width=device-width,initial-scale=1"">
  <title>バージョン</title>
  <link rel=""stylesheet"" type=""text/css"" href=""extlib/pure-min.css"">
  <link rel=""stylesheet"" type=""text/css"" href=""css/common.css"">
</head>
<body>
<h1>v1.0.0</h1>
</body>
</html>
```
　とりあえずこんなの作って置いてみたら、無事バージョンが表示されました☆

![電卓２.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/561177/b152fdcd-810c-9aaa-a0d3-8b8ce0181969.jpeg)

　メニューも減っているのが分かりますか？

## 枠無し透過ウィンドウ
　という裏技（？）がエレクトロンさんにはあるようです。
　ちょっと奥さん‼️（誰💧）
　これでｖ１のデスクトップマスコットみたいなことが出来るんじゃないですか⁉️✨
　楽しげなのでやってみます。
　メニューをあれこれしたのが無になりますけどね😅

　app の index.js の中でウィンドウが作られています。
　`new BrowserWindow` に フレームレスにする呪文`frame: false` と、透過ウィンドウにする呪文`transparent: true` を追加してやります。
```Javascript
function createWindow() {
  // ブラウザ (Chromium) の起動, 初期画面のロード
  let win = new BrowserWindow({
    width: config.width,
    height: config.height,
    frame: false,//フレームレスにする呪文
    transparent: true,//透過ウィンドウの呪文
    title: config.title,
```
　これだけでもう、タイトルバーやメニューバーやウィンドウの外枠が無く、電卓の角丸部分が透過された、電卓だけの状態で開きますよ！

　でもこれだけだと出た位置に出っぱなしでマウスで移動させることが出来ないし、終了させるのもタスクバーからしかできません。
　そこで、今度はなでしこのプログラムの方で

<!--
# ドラッグ出来るようにする
DOM親要素の「-webkit-app-region」に「drag」をDOMスタイル設定。
-->
<blockquote><font color=""green"">#&nbsp;ドラッグ出来るようにする</font><br><font color=""#7f00ff"">DOM親要素</font><font color=""black"">の</font><font color=""maroon"">「-webkit-app-region」</font><font color=""black"">に</font><font color=""maroon"">「drag」</font><font color=""black"">を</font><font color=""#7f00ff"">DOMスタイル設定</font>。<br></blockquote>

　を追加。
　これで、電卓をマウスで自由に動かすことが出来るようになり、右クリックで閉じるメニューが出るようにもなったのですが、なんとボタンが効かなくなっちゃった💧
　子要素全てに継承されているのねん。
　ボタンをまとめて作っているところや表示エディタ、ラジオボタンには全部「-webkit-app-region」に「なし」を設定。
　コレで、ボタンも押せるようになり、それ以外の所では電卓をドラッグ出来るようになりました☆

![電卓４.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/561177/4a05f44a-bf26-3907-c637-d7788d10bdfa.jpeg)

　どうでしょう～。角が透過されてるって分かりますか～？
　分かりやすいよう、角丸を強くしてみたんですが～。
　ウチのニャンコを見せたい画像でなんかスミマセン😅🙏

# （おまけ）テンキーで操作したい
　でもなー、ワタクシこれはスマホで使うつもりでアレしてたわけですよ。
　デスクトップで使うなら、やっぱりテンキーで打てなきゃね！
　というわけで、`キー押した時`のイベントを使います。

👉 **[なでしこ3 マニュアル > plugin_browser/キー押時](https://nadesi.com/v3/doc/index.php?plugin_browser%2F%E3%82%AD%E3%83%BC%E6%8A%BC%E6%99%82&show)**

　キーボードの並びとかもあるので、対応表で任意に設定出来るようにしておきます。

<!--
# キーボード操作用
キー対応表＝{
　""+"":""＋"", ""-"":""−"", ""*"":""×"", ""/"":""÷"", ""Enter"":""＝"", ""."":""."",
　""Home"":""+/-"", ""End"":""％"", ""PageUp"":""税抜"", ""PageDown"":""税込"",
　""Escape"":""AC"", ""Delete"":""CE"", ""Backspace"":""▶""
}

DOCUMENTをキー押した時には、
　S＝押されたキー。
　もし、（Sを数字か判定）＝はいならば、
　　　Sのキー処理。直前キー＝S。
　ここまで。
　キー対応表を反復
　　もし、S＝対象キーならば、
　　　　対象のキー処理。直前キー＝対象。
　　ここまで。
　ここまで。
ここまで。
-->
<blockquote><font color=""green"">#&nbsp;キーボード操作用</font><br><font color=""blue"">キー対応表</font><font color=""magenta"">＝</font><font color=""magenta"">{</font><br>　<font color=""maroon"">""+""</font><font color=""magenta"">:</font><font color=""maroon"">""＋""</font>,&nbsp;<font color=""maroon"">""-""</font><font color=""magenta"">:</font><font color=""maroon"">""−""</font>,&nbsp;<font color=""maroon"">""*""</font><font color=""magenta"">:</font><font color=""maroon"">""×""</font>,&nbsp;<font color=""maroon"">""/""</font><font color=""magenta"">:</font><font color=""maroon"">""÷""</font>,&nbsp;<font color=""maroon"">""Enter""</font><font color=""magenta"">:</font><font color=""maroon"">""＝""</font>,&nbsp;<font color=""maroon"">"".""</font><font color=""magenta"">:</font><font color=""maroon"">"".""</font>,<br>　<font color=""maroon"">""Home""</font><font color=""magenta"">:</font><font color=""maroon"">""+/-""</font>,&nbsp;<font color=""maroon"">""End""</font><font color=""magenta"">:</font><font color=""maroon"">""％""</font>,&nbsp;<font color=""maroon"">""PageUp""</font><font color=""magenta"">:</font><font color=""maroon"">""税抜""</font>,&nbsp;<font color=""maroon"">""PageDown""</font><font color=""magenta"">:</font><font color=""maroon"">""税込""</font>,<br>　<font color=""maroon"">""Escape""</font><font color=""magenta"">:</font><font color=""maroon"">""AC""</font>,&nbsp;<font color=""maroon"">""Delete""</font><font color=""magenta"">:</font><font color=""maroon"">""CE""</font>,&nbsp;<font color=""maroon"">""Backspace""</font><font color=""magenta"">:</font><font color=""maroon"">""▶""</font><br><font color=""magenta"">}</font><br><br><font color=""#7f00ff"">DOCUMENT</font><font color=""black"">を</font><font color=""#7f00ff"">キー押した時</font><font color=""black"">には</font>、<br>　<font color=""blue"">S</font><font color=""magenta"">＝</font><font color=""#7f00ff"">押されたキー</font>。<br>　<font color=""magenta"">もし</font>、<font color=""magenta"">（</font><font color=""blue"">S</font><font color=""black"">を</font><font color=""#7f00ff"">数字か判定</font><font color=""magenta"">）</font><font color=""magenta"">＝</font><font color=""#7f00ff"">はい</font><font color=""black"">ならば</font>、<br>　　　<font color=""blue"">S</font><font color=""black"">の</font><font color=""blue"">キー処理</font>。<font color=""blue"">直前キー</font><font color=""magenta"">＝</font><font color=""blue"">S</font>。<br>　<font color=""magenta"">ここまで</font>。<br>　<font color=""blue"">キー対応表</font><font color=""black"">を</font><font color=""magenta"">反復</font><br>　　<font color=""magenta"">もし</font>、<font color=""blue"">S</font><font color=""magenta"">＝</font><font color=""magenta"">対象キー</font><font color=""black"">ならば</font>、<br>　　　　<font color=""magenta"">対象</font><font color=""black"">の</font><font color=""blue"">キー処理</font>。<font color=""blue"">直前キー</font><font color=""magenta"">＝</font><font color=""magenta"">対象</font>。<br>　　<font color=""magenta"">ここまで</font>。<br>　<font color=""magenta"">ここまで</font>。<br><font color=""magenta"">ここまで</font>。</blockquote>

　できました。いい感じ？
　・・・と、思ったら！

　キーだけで打っている時には一見良いのですが、「＝」をENTERに割り当てているため、ひとたびマウスを使ってボタンを押すと、そのボタンにフォーカスが行くためエンターキーを押した時、そのボタンが押ささってしまうのねん😓
　でも、テンキーの配置から言って、「＝」はエンター以外あり得ないでしょ？！

　なにやってんだよワタシ💧
　さっさと終了にしとけば良かったんだよワタシ💧💧
　時間が無いんだって言ってんじゃん～💦💦💦

　とりあえず、`マウス離した時`で、そのボタンからフォーカスが外れればいいんだよね。
　ケンサクしてじゃばすくりぷとのじゅも～ん。

<!--
　　ボタン一覧[I]をマウス離した時には、
　　　　対象の「blur」を[]でJSメソッド実行。
　　ここまで。
-->
<blockquote>　　<font color=""blue"">ボタン一覧</font><font color=""magenta"">[</font><font color=""blue"">I</font><font color=""magenta"">]</font><font color=""black"">を</font><font color=""#7f00ff"">マウス離した時</font><font color=""black"">には</font>、<br>　　　　<font color=""magenta"">対象</font><font color=""black"">の</font><font color=""maroon"">「blur」</font><font color=""black"">を</font><font color=""magenta"">[</font><font color=""magenta"">]</font><font color=""black"">で</font><font color=""#7f00ff"">JSメソッド実行</font>。<br>　　<font color=""magenta"">ここまで</font>。</blockquote>

　`focus`をオンオフするのかと思ったら違った😅
　なんて読むんだ`blur`。ぶるる（違）

　表示用エディタはどうすっかな。
　キーボードで入力出来るようになった以上、ここに直接数値を入力することは考えられない。
　キー離した時に、テキスト取得して表示用に代入することになっているのは、どっかから数値をコピペすることを想定しているものと思う。
　クリックしたら選択状態にしちゃっていいかな？
　そして、キー離した時にフォーカスを外せばＯＫ？

<!--
表示用エディタのキー離した時には
　　F表示用＝表示用エディタからテキスト取得。
　　対象の「blur」を[]でJSメソッド実行。
ここまで
表示用エディタをクリックした時には
　　対象の「select」を[]でJSメソッド実行。
ここまで
-->
<blockquote><font color=""blue"">表示用エディタ</font><font color=""black"">の</font><font color=""#7f00ff"">キー離した時</font><font color=""black"">には</font><br>　　<font color=""blue"">F表示用</font><font color=""magenta"">＝</font><font color=""blue"">表示用エディタ</font><font color=""black"">から</font><font color=""#7f00ff"">テキスト取得</font>。<br>　　<font color=""magenta"">対象</font><font color=""black"">の</font><font color=""maroon"">「blur」</font><font color=""black"">を</font><font color=""magenta"">[</font><font color=""magenta"">]</font><font color=""black"">で</font><font color=""#7f00ff"">JSメソッド実行</font>。<br><font color=""magenta"">ここまで<br></font><font color=""blue"">表示用エディタ</font><font color=""black"">を</font><font color=""#7f00ff"">クリックした時</font><font color=""black"">には</font><br>　　<font color=""magenta"">対象</font><font color=""black"">の</font><font color=""maroon"">「select」</font><font color=""black"">を</font><font color=""magenta"">[</font><font color=""magenta"">]</font><font color=""black"">で</font><font color=""#7f00ff"">JSメソッド実行</font>。<br><font color=""magenta"">ここまで</font></blockquote>

　ラジオボタンはフォーカスが当たっていても入力に影響しないようなので、そのまま。

# おわります！
　できました！！
　なんとか間に合いそう！！！

　とゆうかんじでうやむやになりかかっていますが、コマンドラインから最新版をビルドするのはうまくいきませんでしたorz
　ワタクシが無能なのか、あるいは最新版に何か不備があるのか？　よく分かりませんが、リリースされた物をダウンロードして使う分には軽量版とほとんど変わらず、とっても簡単であるということが分かりました☆
",1,1,0,なでしこ,Electron,なでしこ3配布キット(Electron版)を試してみるよ！,こんぴゅぅたぁのこともぷろぐらむのこともよく分からないけど、日本語プログラミング言語「なでしこ」のおかげでプログラムが出来るようになって、毎日が楽しいドシロウト。,,5,15,snowdrops89,snowdrops89,64,,,雪乃 雫,,561177,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/561177/profile-images/1581940584,False,snowdrops89,,,デスクトップアプリ,なでしこ3,なでしこさん
"この記事は [グラフィックス全般 Advent Calendar 2023](https://qiita.com/advent-calendar/2023/graphics) 21日目の記事です。

# 可変サイズにしてみた

[旋回](https://qiita.com/warotarock/items/80fd6921d9b1f793637b)の続きで、SVGのフキダシをのサイズを可変にしてみました。

<p class=""codepen"" data-height=""400"" data-default-tab=""result"" data-slug-hash=""ExrzeWG"" data-user=""warotarock"" style=""height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"">
  <span>See the Pen <a href=""https://codepen.io/warotarock/pen/ExrzeWG"">
  アドベントカレンダー２０２３「SVGとReactで可変サイズのフキダシ」</a> by 柏崎ワロタロ (<a href=""https://codepen.io/warotarock"">@warotarock</a>)
  on <a href=""https://codepen.io"">CodePen</a>.</span>
</p>
<script async src=""https://cpwebassets.codepen.io/assets/embed/ei.js""></script>

やっていることは簡単で、インラインSVGのpathをテキストのdivに合わせサイズを調整して生成しています。

divのサイズはgetBoundingClientRectで取得しています。この関数で返ってくるサイズは単位がpxなのでSVG内でそのまま使うことができました。px以外の単位を使う場合はちょっと大変になるかもしれません。

# まとめ

SVGでできることは多いですが、パスとテキストだけでも相当に使いでがあります。オススメです。
",0,0,0,HTML,SVG,SVGとReactで可変サイズのフキダシ,個人でゲームを作ってました。今はツールやら何やら作ってます。,,27,17,,warotarock,28,,"Niigata, Japan",柏崎 ワロタロ,,59191,https://qiita-image-store.s3.amazonaws.com/0/59191/profile-images/1473694852,False,warotarock,https://warotarokz.sakura.ne.jp/,,React,,
"Red Hat OpenShift on IBM Cloud (ROKS) では、ワーカー・ノードに vGPUサポート付きのフレーバーを使用することができます。

以下のリリース情報には、`使用可能なワーカー・ノード・フレーバーについて詳しくは、 VPC 第 2 世代フレーバー を参照してください。`と書かれていますが、2023年12月現在、vGPUサポート付きのフレーバーは[VPC フレーバー](https://cloud.ibm.com/docs/openshift?topic=openshift-vpc-flavors)にリストされていません。vGPUサポート付きのフレーバーを使用（表示も含め）するには、アカウントが許可リストに登録されている必要があります。


[2022年9月13日のリリース情報](https://cloud.ibm.com/docs/openshift?topic=openshift-openshift-relnotes&locale=ja#openshift-sep1322)抜粋：
> **New! vGPU ワーカー・ノード・フレーバーが VPC 第 2 世代で使用可能になりました。**
    使用可能なワーカー・ノード・フレーバーについて詳しくは、 VPC 第 2 世代フレーバー を参照してください。 vGPU サポート付きのワーカー・ノード・フレーバーは、 `gx2` フレーバー・クラスです (例: `gx2.16x128.2v100`)。 IBM Cloud VPC GPU 付きのワーカー・ノードは、許可リストに登録されたアカウントでのみ使用可能です。 アカウントの許可リスト登録を要求するには、 許可リストに登録されている機能へのアクセスの要求 を参照してください。 必ず、データ・センター、VPC インフラストラクチャー・プロファイル、および使用したいワーカーの数を含めてください。 例えば、 `12 worker nodes in us-east-1 of VPC profile gx2-16x128xv100` などです。


[VPC フレーバー](https://cloud.ibm.com/docs/openshift?topic=openshift-vpc-flavors)ページに以下のヒントが書いてあります。
![roks_flavor_hint.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2164968/540e5fa2-0c33-4f2e-186a-4afec3a8b556.png)

## 許可リストに登録されていない状態

許可リストに登録されていない場合（デフォルトの状態）は、フレーバーの選択画面で`GPU`にチェックすると、何も表示されません。
![roks_worker_flavor_original.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2164968/dbcd8fa8-0692-fb2f-d364-b735b9d3b84c.png)

## 許可リストに登録されている機能へのアクセスの要求


[許可リストに登録されている機能へのアクセスの要求](https://cloud.ibm.com/docs/openshift?topic=openshift-get-help#allowlist-access-request)の手順にしたがってチケットを起票します。

許可リストに登録されている機能へのアクセスの要求

1.   チケットを作成します。
2.  「カテゴリー」 タブで、 「アカウント」 を選択します。
3.  「トピック」 タブで、 「その他」 サブトピックを選択し、「次へ」をクリックします。
4.  「詳細」 タブの 「件名」 フィールドに Allowlist request for <FEATURE> for account <ACCOUNTID> と入力し、フィーチャー名とアカウント ID を含めます。
5.  「説明」 フィールドに、アクセスする機能の詳細を入力します。
6.  「次へ」 をクリックして、選択したチケットを確認します。
7.  「Case の送信」をクリックします。
8.   サポートがチケットを処理した後、アカウントが更新されたことを示す通知を受け取ります。

## 許可リストに登録された状態
リクエストが承認され、許可リストにアカウントが登録されると、リクエストしたvGPUサポート付きのフレーバーが表示されるようになります。
＊ NVIDIA V100 GPUの許可リストに登録された場合の例です。
![roks_worker_flavor_allowlisted.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2164968/63337241-0ad3-92d6-f51f-947fb70b34bc.png)
",0,0,0,GPU,ibmcloud,ROKSでvGPUサポート付きワーカー・ノードを使用できます,投稿した内容は私自身の見解であり、必ずしも所属組織の立場、戦略、意見を代表するものではありません。,,0,2,,mizutan,24,,,Yasuko Mizutani,,2164968,https://secure.gravatar.com/avatar/fb5df5ff5d0e127031bb5ab5df9ad6aa,False,,,,roks,,
"有人チャットのツールを普段つくっている身として、AIによる無人チャットボットの知見をもっておく必要があると常々思っていたので、ここ最近LangChainをいじっています。

[ChatGPTでの業務効率化を“断念”──正答率94％でも「ごみ出し案内」をAIに託せなかったワケ 三豊市と松尾研の半年間](https://www.itmedia.co.jp/news/articles/2312/15/news158.html)という記事に、「返答のリアルタイム(ストリーミング)表示に切り替えられるようにした」という改善内容があったので、今回はこちらを試しに実装してみました。

# 実装の概要
この実装ではLangChainを使用し、LLMに基づく応答をリアルタイムで処理し表示します。

以下が主な構成要素です。

- `ChatOpenAI`: OpenAIのモデルを利用するためのクラス。
- `ChatPromptTemplate`: チャット入力をフォーマットするためのテンプレート。
- `LLMChain`: LLMを使用した処理のチェーン。
- `StreamingHandler`: LLMからの応答をリアルタイムで処理するためのコールバックハンドラ。
- スレッドとキュー: 非同期処理とデータのやり取りを行うための要素。

# 設計
リアルタイム表示を実現するために、設計には以下の要素を入れました。

1. 非同期処理: Pythonのスレッドを使用して、LLMの処理を非同期に実行するようにしました。これによって、LLMからの応答を待つ間にもUI(今回は未実装)がフリーズすることなく、他の処理を続けられるようにしました。

2. キューの利用とデータ整合性: スレッド間でのデータの受け渡しにキューを用いることで、複数のスレッドが同時にアクセスする際の競合を避け、データの整合性を保つようにしました。これはリアルタイムシステムにおいて重要で、データの不整合や予期せぬエラーを防ぎ、全体的なシステムの信頼性を高める役割を果たします。

3. ストリーミング処理: LLMからの応答をトークン単位で取得し、その都度処理することで、リアルタイムのフィードバックがユーザーに提供されるようにしました。

# 実装
コードの中身を解説します(GitHubは[こちら](https://github.com/suzuki0430/langchain-streaming-chain-test))。
`OPEN_API_KEY`を取得済であれば、Dockerで挙動を確かめていただくこともできます。

## 基本セットアップ
必要なライブラリをインポートし、環境変数を読み込むために`load_dotenv()`を呼び出します。これにより、外部からの設定情報(`OPENAI_API_KEY`)を安全に管理できます。

```python
import logging
from langchain.chat_models import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from langchain.chains import LLMChain
from langchain.callbacks.base import BaseCallbackHandler
from dotenv import load_dotenv
from queue import Queue
from threading import Thread

load_dotenv()
```

## StreamingHandler
`StreamingHandler`クラスは、LLMからの応答をリアルタイムで処理するためのカスタムハンドラです。
LLMから新しいトークンが得られるたび、またはエラーが発生した際に呼び出されます。

- `on_llm_new_token`: 新しいトークンをキューに追加します。
- `on_llm_end`: 処理の終了をキューに通知します。
- `on_llm_error`: エラーが発生した場合にログを記録し、処理の終了をキューに通知します。

```python
class StreamingHandler(BaseCallbackHandler):
    def __init__(self, queue):
        self.queue = queue

    def on_llm_new_token(self, token, **kwargs):
        self.queue.put(token)

    def on_llm_end(self, response, **kwargs):
        self.queue.put(None)

    def on_llm_error(self, error, **kwargs):
        logging.error(f""Error in LLM: {error}"")
        self.queue.put(None)
```

## StreamingChain
`StreamingChain`クラスは、LLMからのデータをストリーミングするためのメインのクラスです。
LLMの応答をリアルタイムで処理するために、スレッドとキューを使用します。

- `stream` メソッド: 入力に基づいてLLMを起動し、その結果を生成するプロセスを開始します。このプロセスは別のスレッドで実行され、メインスレッドはキューからトークンを取得し続けます。
- `cleanup` メソッド: ストリーミングが終了した後、スレッドがまだ動作していれば終了を待ちます。

```python
class StreamingChain:
    def __init__(self, llm, prompt):
        self.llm_chain = LLMChain(llm=llm, prompt=prompt)
        self.thread = None

    def stream(self, input):
        queue = Queue()
        handler = StreamingHandler(queue)

        def task():
            self.llm_chain(input, callbacks=[handler])

        self.thread = Thread(target=task)
        self.thread.start()

        try:
            while True:
                token = queue.get()
                if token is None:
                    break
                yield token
        finally:
            self.cleanup()

    def cleanup(self):
        if self.thread and self.thread.is_alive():
            self.thread.join()
```

## 使用例
`StreamingChain`を使用して、ユーザーの入力に基づいてLLMからの応答をリアルタイムで取得し表示する例です。
ここでは、ユーザーが「ポケモンについて100文字で説明して」と入力した場合の応答をストリーミングで表示します。

```python
chain = StreamingChain(llm=chat, prompt=prompt)

for output in chain.stream(input={""content"": ""ポケモンについて100文字で説明して""}):
    print(output)
```

<img src=""https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/569054/e7a12c61-dc9e-326b-c41e-df3998f7241b.gif"" width=""400"">

# 参考資料

https://www.udemy.com/share/109Hba3@dsUyFuOxpG7n_EAbuhUhbdug65aP1mfgSZ-W4oH57_-hUjsvmFVeq5PgyH1TMkln/
",0,0,0,Python,queue,LangChainとLLMによるリアルタイム表示の実装,"今までモバイルアプリ開発が主でしたが、最近はAIやインフラ関連の仕事もしています。React, TypeScript, NestJS, Go, AWS, AI(BERTとか)の記事を主に書いています。AWS認定全冠。上白石の中では萌歌、広瀬の中では香美が好きです。",,0,37,suzuki0430,suzuki0430,178,suzuki-09b7171a2,,すずき,,569054,https://avatars2.githubusercontent.com/u/59790725?v=4,False,suzuki_optemo,https://dev.to/suzuki0430,,ChatGPT,langchain,LLM
"## 概要

今年Stanford大学が発表した、52KのインストラクションチューニングでLLaMA 7Bモデルを微調整したモデルであるAlpaca 7B。本記事では、その詳細について公式に公開されているものを紐解きつつ、わかりやすいようにまとめる。

参考情報
- ブログリンク
    - https://crfm.stanford.edu/2023/03/13/alpaca.html
- Github
    - https://github.com/tatsu-lab/stanford_alpaca

## Introduction

- 52K の命令に従うデモンストレーションで LLaMA 7B モデルを微調整したモデルであるAlpaca 7B
- シングルターン命令の評価では、Alpaca は OpenAI の text-davinci-003 と定性的に同様に動作
- 再現が簡単で、コストが600ドル未満
    - On our preliminary evaluation of single-turn instruction following, Alpaca behaves qualitatively similarly to OpenAI’s text-davinci-003, while being surprisingly small and easy/cheap to reproduce (<600$). Checkout our code release on [GitHub](https://github.com/tatsu-lab/stanford_alpaca).
- text-davinch-003を使用して、self-instructのスタイルで生成された52Kのデータでalpacaをトレーニング
- トレーニングレシピとデータを公開しており、将来的にはモデルの重みも公開する予定
- 学術目的のみを想定、商用利用は禁止

## Training Recipe

- Self-Instruct: Aligning Language Models with Self-Generated Instructionsの論文では、既存の強力な言語モデルを使用して指示データを自動的に生成することを提案
- **self-instructシードセットの使用**: このプロセスは、self-instructメソッドから得られた175の人間によって書かれた指示と出力のペア（シードセット）から始まります。
- **text-davinci-003の使用**: このシードセットをコンテキストの例として使用し、text-davinci-003によりさらなる指示を生成させます。これにより、元のデータセットを拡張し、より多様な指示と出力のペアを作成します。
- **生成プロセスの簡素化**: self-instructメソッドを改善するために、生成プロセスを簡素化しました。詳細はGitHubで確認できます
- **データ生成の結果**: 最終的に、52,000のユニークな指示とそれに対応する出力が生成され、このプロセスのコストはOpenAI APIを使用して500ドル未満でした。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2509731/94d2e641-315e-d914-f3ce-622b33b1e267.png)

- この命令に従うデータセットを装備し、完全シャード データ並列や混合精度トレーニングなどの手法を利用して、Hugging Face のトレーニング フレームワークを使用して LLaMA モデルを微調整しました。最初の実行では、8 台の 80GB A100 で 7B LLaMA モデルの微調整に 3時間
- これはほとんどのクラウドコンピューティングサービスで100ドル未満

| Hyperparameter | LLaMA-7B | LLaMA-13B |
| --- | --- | --- |
| Batch size | 128 | 128 |
| Learning rate | 2e-5 | 1e-5 |
| Epochs | 3 | 5 |
| Max length | 512 | 512 |
| Weight decay | 0 | 0 |

## 評価

- 人間による評価を実施。Alpacaの評価は、5人の学生著者によって行われました。彼らは「self-instruct評価セット」からの入力に基づいて評価を行いました。この評価セットは、self-instructの著者によって収集され、メール作成、ソーシャルメディア、生産性ツールなど、ユーザー指向の多様な指示を含んでいます。
    - https://github.com/yizhongw/self-instruct/blob/main/human_eval/user_oriented_instructions.jsonl
- text-davinch-003とalpacaのブラインド評価を実施したところ、alpacaが90:89で勝利
- 静的な評価セットに加えて、著者たちはAlpacaモデルをインタラクティブにテストし、多様な入力に対してAlpacaがtext-davinci-003と同様に振る舞うことを発見
- Alpaca の回答は通常、ChatGPT よりも短くなり、text-davinci-003 の短い出力を反映しています。

## 注意

- アルパカはまた、幻覚、毒性、固定観念など、言語モデルの一般的な欠陥をいくつか示します。text-davinci-003 と比較しても、特に幻覚は Alpaca の一般的な障害モード

## 資産

- デモ
    - 公開停止
    - OpenAI のコンテンツ モデレーション APIでOpenAIの使用ポリシーで制限されている有害な入力を除外
    - A Watermark for Large Language Modelsで透かしを入れてalpacaの出力かどうか一定の確率で特定できるようにしている
- データ
    - https://github.com/tatsu-lab/stanford_alpaca/blob/main/alpaca_data.json
- データ生成プロセス
    - https://github.com/tatsu-lab/stanford_alpaca#data-generation-process
- Huggingfaceを使用してトレーニングするコード
    - https://github.com/tatsu-lab/stanford_alpaca#fine-tuning
    

## 今後

- alpacaをもっと厳密に評価するために、HELMを利用
    - Holistic Evaluation of Language Models

## 引用

- Holistic Evaluation of Language Models
    - 論文: https://arxiv.org/abs/2211.09110
    - 公式まとめ: https://crfm.stanford.edu/helm/latest/    
    - blog: https://crfm.stanford.edu/2022/11/17/helm.html    
    - github: https://github.com/stanford-crfm/helm
    
",0,0,0,AI,生成AI,"Stanfordの大規模言語モデル Alpaca: ""A Strong, Replicable Instruction-Following Model""",,,1,0,,sanyas,1,,,,,2509731,https://lh3.googleusercontent.com/a/AATXAJwMg3UIj0TZdOt2hE8H845DH5QpI6BF24cVSr2l=s50-mo,False,,,,大規模言語モデル,LLM,LLaMA
"# はじめに
登山用の温湿度計を探していて『電池式はめんどくさそうだなぁ』と思ってたのですが、SwitchBotさんの防水温湿度計が安くてうっかり手を出してしまいました。
環境センサーなのでBLEビーコンでも飛ばしてるだろうと思って、Node-REDからパケットを覗いてみたら、温湿度データも入ってるようだったので自宅の外気温用にもう一つ追加で購入しました。(1980円なんて、破格だよ！)

環境センサーのデータはNode-REDで収集してElasticsearchクラスタへ投入しているので、早速収集開始しました。

# 前提環境
- Node-RED v3.0.2
  + node-red-contrib-blebeacon-scanner 1.0.1 (https://flows.nodered.org/node/node-red-contrib-blebeacon-scanner)
- Elasticsearch v8.11.1

# SwitchBot 防水温湿度計のMACアドレス確認
アプリの右上の歯車アイコンをタップします。
![Screenshot_20231221-195853.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/410957/a848ea52-1bd5-4d0d-16a3-c1ededbc0264.png)

下にある「デバイス情報」をタップします。
![Screenshot_20231221-195910.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/410957/70363b96-1a10-d5b9-59a7-f3d10d4d0f76.png)

MACアドレスが確認できます。
![Screenshot_20231221-195915.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/410957/055a1667-eb72-711f-30af-0c38d21051ce.png)

# Node-REDフロー作成
以下のようにフローを繋げました。
![Node-RED _ 192.168.1.9 - Google Chrome 2023_12_21 20_34_02.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/410957/fdeb52e4-b980-cef5-8915-e34944230979.png)

- BLE Beacon Scanner：そのまま配置します。
- switch : payload.idが、防水温湿度計のMACアドレスなら処理を継続させます。
![Node-RED _ 192.168.1.9 - Google Chrome 2023_12_21 20_41_18.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/410957/65687ccd-f942-5873-d309-ac8930b2c75a.png)
- delay : メッセージの流量制限で。防水温湿度計からのビーコンを30秒に1回だけ受信するようにします。
![Node-RED _ 192.168.1.9 - Google Chrome 2023_12_21 20_45_20.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/410957/dad32553-088a-b157-e628-fa7248c23dba.png)
- function(外湿度抽出) : 以下のようなコードでmsg.dataに湿度値を抽出します。
![Node-RED _ 192.168.1.9 - Google Chrome 2023_12_21 20_48_22.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/410957/aaff47c7-6cb9-b64f-13bf-a6d4b60413cb.png)
- function(外温度抽出) : 以下のようなコードでmsg.dataに温度値を抽出します。
![Node-RED _ 192.168.1.9 - Google Chrome 2023_12_21 20_49_13.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/410957/cdb106a0-5349-65fe-e0d5-baa5ccb96c69.png)
- change : ElasticsearchへPOSTするための変数を設定します。URLを正規表現の置換で連結させてます。
![Node-RED _ 192.168.1.9 - Google Chrome 2023_12_21 20_54_21.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/410957/b0d67fd3-e516-4403-653b-a8b23113f27f.png)
- template : ElasticsearchへPOSTするデータ(JSON)を生成します。
![Node-RED _ 192.168.1.9 - Google Chrome 2023_12_21 20_57_33.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/410957/cd7e1e55-22d8-e777-af25-84b75ccb7f2b.png)
- Elasticsearch : http通信するサブフローです。

# Kibanaで可視化
既に屋内は監視しているので、ほぼコピーであっさり可視化しました。またCanvas使いたくなってきた。

https://x.com/ShikaseY/status/1737615592042144252?s=20

# おわりに
家の外の温度と湿度が室内から監視できるのは良いですね。しかも安くてビーコンの値がそのまま使えます。

（しかし、百葉箱のようなものに入れておかないと流石に年単位の長期間の放置は不安ですね。夏は暑さで壊れそうな気もしますし。）
",0,0,0,Elasticsearch,Kibana,SwitchBot防水温湿度計のデータをNode-REDで取得する,"アカウントはプライベートで作成したものなので、記載内容は個人的見解であり、所属組織とは全くの無関係です。お仕事は日立グループの会社で何かやってます。
趣味はRaspberry Piでkubernetesを構築して、Elastic StackとNode-REDでおうちハックしてます。たまにUnityとQuest2いじってます。",,6,12,,Y-Shikase,44,,湘南,Yoshimi Shikase,,410957,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/410957/profile-images/1669639207,False,ShikaseY,,,node-red,SwitchBot,
"# はじめに

DynamixelとOpenCRを使ったロボット制御のメモの続きです。
前回までで、キーボードで操作できるようになりましたが、今回はゲームコントローラで操作します。

https://qiita.com/kiwsdiv/items/6d1cf7ff10a3e32792e1

# 環境

- [ELECOM ‎JC-U4113SBK](https://www.elecom.co.jp/products/JC-U4113SBK.html) , [amazon](https://www.amazon.co.jp/%E3%82%A8%E3%83%AC%E3%82%B3%E3%83%A0-%E3%83%AF%E3%82%A4%E3%83%A4%E3%83%AC%E3%82%B9-%E3%82%B2%E3%83%BC%E3%83%A0%E3%83%91%E3%83%83%E3%83%89-Xinput-JC-U4113SBK/dp/B01MXY05W0/ref=pd_lpo_sccl_2/357-0346866-2324024?pd_rd_w=9Tu38&content-id=amzn1.sym.83be7c2b-52a5-4e81-8438-3eac7f5cf56f&pf_rd_p=83be7c2b-52a5-4e81-8438-3eac7f5cf56f&pf_rd_r=3CNH7V0X1RNM75TZW2VM&pd_rd_wg=wIt1d&pd_rd_r=f423c139-9afd-412e-8601-5a25a23f71b4&pd_rd_i=B01MXY05W0&th=1)

- RasberryPi 4B(Ubuntu 20.04.4 LTS)

| 項目 | バージョン |
|-- | -- | 
| Ubuntu|20.04|
|ROS|Noetic|
- [OpenCR](https://emanual.robotis.com/docs/en/parts/controller/opencr10_jp/#dynamixel-workbench)
- [Dynamixel PM42-010-S260-R](https://emanual.robotis.com/docs/en/dxl/p/pm42-010-s260-r/)
- 24V電源 (GSユアサ12VDCバッテリー*2)

# 参考

https://qiita.com/srs/items/9114bb3c27a148e0b855

https://qiita.com/seigot/items/80bb409ff2de351ee9fa

# やったこと
## joy用のパッケージのインストール
```bash
$ sudo apt-get install ros-noetic-joy
$ sudo apt-get install ros-noetic-joystick-drivers
```
joyスティックをPCに刺して以下の3つをターミナルで実行します。
1つめのターミナル
```bash
$ roscore
```
2つめのターミナル
```bash
$ rosrun joy joy_node
```
3つめのターミナル
```bash
rostopic echo/joy
header:
  seq: 269
  stamp:
    secs: 1703140224
    nsecs: 944564797
  frame_id: ""/dev/input/js0""
axes: [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0]
buttons: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
---
```
コントローラ操作に応じて、値が変わっていることがわかります。

## cmd_velトピックを送信してモータを動かす

ターミナルでDynamixel Workbenchのコントローラを動作させます。
```bash
$ roslaunch dynamixel_workbench_controllers dynamixel_controllers.launch
```

ここで、dynamixel_workbench/cmd_velトピックにgeometry_msgs::Twist型でROSトピックを投げることで動かすことができます。下記のコマンドでトピックをパブリッシュすることで、モータ(タイヤ)が動きました。

```bash
$ rostopic pub -r 10 /dynamixel_workbench/cmd_vel geometry_msgs/Twist ""linear:
   x: 0.5
   y: 0.0
   z: 0.0
 angular:
   x: 0.0
   y: 0.0
   z: 0.0""
```

## ゲームコントローラからモータを動かす

ゲームコントローラから動かせるようにします。joy nodeを使えばjoyスティックの入力を/joyというROSトピックをパブリッシュするので、これのデータを変換してTwistを送信します。

### 専用パッケージを作成する
ここでは、joy_teleopeというパッケージを作成します。
```bash
$ cd ~/catkin_ws/src
$ catkin_create_pkg joy_teleope roscpp std_msgs
Created file joy_teleope/package.xml
Created file joy_teleope/CMakeLists.txt
Created folder joy_teleope/include/joy_teleope
Created folder joy_teleope/src
Successfully created files in /home/ubuntu/catkin_ws/src/joy_teleope. Please adjust the values in package.xml.
```

srcとlaunch用のディレクトリを作成します。

```bash
$ cd joy_teleope
$ mkdir src
$ mkdir launch
```

### basic_twist_publisher.cpp
`joy_teleope/src/basic_twist_publisher.cpp`を作成します。
参考記事のままです。[ROS講座07 joyプログラム](https://qiita.com/srs/items/9114bb3c27a148e0b855)

```bash
#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <sensor_msgs/Joy.h>

class TwistPublisher{
public:
  TwistPublisher() : nh_(), pnh_(""~"") {
    cmd_pub_ = nh_.advertise<geometry_msgs::Twist>(""cmd_vel"", 1);
    joy_sub_ = nh_.subscribe(""joy"", 10, &TwistPublisher::joyCallback, this);
    timer_ = nh_.createTimer(ros::Duration(0.1), &TwistPublisher::timerCallback, this);
  }

  void joyCallback(const sensor_msgs::Joy& joy_msg) {
    last_joy_ = joy_msg;
  }

  void timerCallback(const ros::TimerEvent& e) {
    int assign_x = 1;
    int assign_y = 0;
    int assign_z = 3;
    pnh_.getParam(""assign_x"", assign_x);
    pnh_.getParam(""assign_y"", assign_y);
    pnh_.getParam(""assign_z"", assign_z);

    float max_x = 0.5;
    float max_y = 0.5;
    float max_z = 1.5;
    pnh_.getParam(""max_x"", max_x);
    pnh_.getParam(""max_y"", max_y);
    pnh_.getParam(""max_z"", max_z);

    geometry_msgs::Twist cmd_vel;
    if(0 <= assign_x && assign_x < last_joy_.axes.size()){
      cmd_vel.linear.x = max_x * last_joy_.axes[assign_x];
    }
    if(0 <= assign_y && assign_y < last_joy_.axes.size()){
      cmd_vel.linear.y = max_y * last_joy_.axes[assign_y];
    }
    if(0 <= assign_z && assign_z < last_joy_.axes.size()){
      cmd_vel.angular.z = max_z * last_joy_.axes[assign_z];
    }
    cmd_pub_.publish(cmd_vel);
  }

  ros::NodeHandle nh_;
  ros::NodeHandle pnh_;
  ros::Publisher cmd_pub_;
  ros::Subscriber joy_sub_;
  ros::Timer timer_;
  sensor_msgs::Joy last_joy_;
};

int main(int argc, char** argv)
{
  ros::init(argc, argv, ""basic_twist_publisher"");
  TwistPublisher twist_publisher;
  ros::spin();
  return 0;
}
```

### CmakeList

CmakeListに以下を追加します。
参考記事のままです。[ROS講座07 joyプログラム](https://qiita.com/srs/items/9114bb3c27a148e0b855)
```
add_executable(basic_twist_publisher src/basic_twist_publisher.cpp)

target_link_libraries(basic_twist_publisher
  ${catkin_LIBRARIES}
)
```

### Launch

Launchファイルを作成します。
参考記事との差分は、Dynamixe_workbench_controllersのdynamixel_controllers.launch を起動するように指示しています。

```launch
<launch>
  <!-- dynamixel_workbench_controllersパッケージのdynamixel_controllers.launchを起動する -->
  <include file=""$(find dynamixel_workbench_controllers)/launch/dynamixel_controllers.launch""/>
  <node name=""joy_node"" pkg=""joy"" type=""joy_node"" />
  <node name=""basic_twist_publisher"" pkg=""joy_teleope"" type=""basic_twist_publisher"">
    <remap from=""cmd_vel"" to=""dynamixel_workbench/cmd_vel""/>
  </node>  
</launch>
```

### ビルド
```bash
$ cd ~/catkin_ws
$ catkin build
$ source ~/.bashrc
```

### 実行
作成したパッケージのlaunchファイルを実行すると、ゲームコントローラでタイヤを制御することができます。
```bash
$ roslaunch joy_teleope dynamixel.launch
```

左スティックで前後、右スティックで回転するように動作します。

# さいごに

本記事ではROS1の差動二輪のロボットをゲームコントローラを使って動せるようにしたメモを記載しました。
",0,1,1,メモ,ROS,ゲームコントローラで作動二輪ロボットを制御するメモ,"社畜の割には自由です。
# 投稿内容は私個人の意見であり、所属企業・部門見解とは関係ありません。
# 投稿内容は執筆時点の情報であり、必ずしも最新情報であるとはかぎりません。",,9,7,,kiwsdiv,31,,,,,599506,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/599506/profile-images/1649256441,False,,,,ROS1,,
"# この記事のゴール
Docker composeを使ってRails newコマンドによる新規アプリのひな型とdevelop環境を作ります

最初にDockerについても触れていきます。
## 事前準備
まずは皆さん、Docker desktopをインストールしておいてください。

※Ruby,SQL,RailsのインストールはDockerfileにそれぞれをインストールするためのコマンドを書き込むことで省略されます。とても便利。



## 1. Dockerとは
### Dockerとは何か
Dockerとはコンテナという仮想化技術を用いてアプリケーションを簡単に構築、実行することができるプラットフォームです。

macでもwindowsでもDockerを使えば常に同じ環境を作り出し、アプリケーションを実行することができます。ゆえに環境の違いによる問題を最小限にできます。

また、開発環境から本番環境へ移行すること(デプロイ)が非常に容易になります。

## 2. Docker composeとは
複数のコンテナを実行するためのツールです。
コンテナをまとめてひとつのコマンドで操作することができます。

１つのコンテナにまとめて入れればいいと思うかもしれないですが、
それは一般的ではありません。

Web開発においてはwebサーバとデータベースサーバを別々のコンテナに格納することが一般的で、これにより各サービスの設定や管理が独立して行えます。
また、一方のサービスに問題が発生した場合、他サービスへ影響しづらく、対処しやすいです。

## 3.どのように使うのか
4つのファイルを作業ディレクトリに作成し、コマンドを実行するだけで完了です。

~~~
├── dockerfile
├── Gemfile
├── Gemfile.lock
└── docker-compose.yml
~~~

#### Dockerfileを作成しよう
まずDockerイメージを作るためのDockerfileを作成しましょう。コピペで大丈夫です。
[Docker公式ドキュメント](https://docs.docker.jp/compose/rails.html)のサンプルコードに少し書き加えています。
~~~
FROM ruby:3.1.1
WORKDIR /myapp
ADD Gemfile /myapp/Gemfile
ADD Gemfile.lock /myapp/Gemfile.lock
RUN gem install bundler
RUN bundle install
ADD . /myapp
~~~

- WORKDIR /myapp
Dockerイメージ内の作業ディレクトリを/myappに設定するためのコマンドです。
- ADD Gemfile /myapp/Gemfile
Dockerイメージ内にGemfileを追加するためのコマンドです。
- ADD Gemfile.lock /myapp/Gemfile.lock
Gemfile.lockをDockerイメージ内の/myapp/Gemfile.lockにコピーしています。
Gemfile.lockは、Gemfileをもとに実際にインストールされたgemの一覧とバージョンが記載されるファイルです。
- RUN bundle install
上記のGemfileに記載されているgemをインストールします。さらにGemfile.lockにGemの一覧とバージョンを自動で記述するコマンドです。
- ADD . /myapp
現在のディレクトリ(.)にあるすべてのファイルをmyappというディレクトリにコピーします。

#### Gemgileを作ろう
作業ディレクトリにあらかじめ以下のコードが書かれたGemfileという名前のファイルを作っておきましょう。
これでrails newを実行したときにrailsをロードできるようになります。
~~~
source 'https://rubygems.org'
gem 'rails', '7.1.2'
~~~
#### 空のGemfile.lockを作ろう
作業ディレクトリに空のGemfile.lockという名前のファイルを作りましょう。
#### Docker-compose.ymlを作ろう
以下のコードが書かれたファイルを作業ディレクトリに作ります。
~~~
version: '3'
services:
  db:
    image: postgres
    environment:
      POSTGRES_PASSWORD: password
  web:
    build: .
    command: bundle exec rails s -p 3000 -b '0.0.0.0'
    volumes:
      - .:/myapp
    ports:
      - ""3000:3000""
    depends_on:
      - db
~~~

- version: '3'
使用するDocker Composeのファイルフォーマットのバージョンを指定します。

- services:
起動するサービス（コンテナ）を定義します。

- db:とimage: postgres
dbという名前のサービス（コンテナ）を定義し、そのイメージとしてpostgresを使用します。

- web:
webという名前のサービス（コンテナ）を定義します。

- build: .
webサービスのDockerイメージを現在のディレクトリのDockerfileを使用してビルドします。

- command: bundle exec rails s -p 3000 -b '0.0.0.0'
webサービスのコンテナが起動したときに実行するコマンドを指定します123。この場合、Railsサーバーをポート3000で起動します。

- volumes: - . :/myapp
ホストの現在のディレクトリ（.）とwebサービスのコンテナ内の/myappディレクトリをマウント（同期）します。

- ports: - ""3000:3000""
ホストのポート3000とwebサービスのコンテナのポート3000をマッピング（接続）します。

- depends_on: - db
webサービスがdbサービスに依存することを指定します123。これにより、dbサービスが先に起動した後にwebサービスが起動します。

#### docker-compose runしよう
Docker Desktopを起動し、以下のコマンドを実行します。
~~~
docker-compose run web rails new . --force --database=postgresql --skip-docker
~~~
rails newによりアプリひな型がまとめて生成されます。

また""--skip-docker""を入れることでrails7.1から導入された、
dockerfileをproduction環境用へ自動で書き換えられることがなくなります。
そのまま以下のコマンドを実行してもsecret_key_base関連のエラーでwebサービスが立ち上がりません。
私はこれに気付くのに時間がかかりました。

#### docker-compose build しよう
以下のコマンドでイメージをビルドします。
~~~
docker-compose build
~~~

#### config/databese.ymlを編集しよう
以下のように編集します。
~~~
default: &default
  adapter: postgresql
  encoding: unicode
  host: db
  username: postgres
  password: password
  pool: 5

development:
  <<: *default
  database: myapp_development


test:
  <<: *default
  database: myapp_test
  ~~~

#### データベースを生成しよう
以下のコマンドでデータベース(今回はpostgreSQL)を生成します。
~~~
docker-compose run web rake db:create
~~~
#### コンテナを起動させよう
以下のコマンドでコンテナを起動できます。
~~~
docker-compose up -d
~~~

#### サーバーに接続しよう
以下のアドレスをブラウザに入力すればサーバーに接続できるはずです。
~~~
localhost:3000
~~~

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3638439/0e3f6792-54ba-6097-fe7a-01b53b8029ce.png)

お疲れさまでした

## 参考
https://docs.docker.jp/compose/rails.html
",0,0,0,Rails,環境構築,Docker compose を使ってRails7.1系で新規アプリのひな型を作り、サーバーに接続しよう,,,1,0,power75,power75,1,,,,,3638439,https://avatars.githubusercontent.com/u/153082632?v=4,False,,,,Docker,初心者です,docker-compose
"こちらの本を読みながらjupyter notebookと戯れているのですが、コード補完してほしいなと思い設定しようと思ったのですが、、、




jupyter labを入れればOKです。

jupyter notebookのサーバを落として、分析してるプロジェクトの中で、

```
pip install jupyterlab
jupyter lab
```

でnotebookと同じように起動します。
notebookで作成していたファイルもそのまま編集できるのでこれで十分です。

これでコード書きながら、tabを押せば、
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/186346/958f4433-b67e-2830-bd04-75fc4172e123.png)


このように補完候補がでてきます。幸せいっぱいですね。
",0,0,0,Python3,Jupyter,JupyterNotebookでコード補完させる方法【データ分析】,"CSS完全に理解し　　てま
す。",,0,23,,chatrate,99,,,chatrate,,186346,https://qiita-image-store.s3.amazonaws.com/0/186346/profile-images/1508302129,False,chatrate0621,,,JupyterNotebook,,
"[インターネット老人会の魔法書 Advent Calendar 2023](https://qiita.com/advent-calendar/2023/ancient-internet) の13日目の記事です。

# PC-9801の想い出

[テレビアニメ『16bitセンセーション ANOTHER LAYER』](https://16bitsensation-al.com/) を見て、PC98でPCデビューした自分に刺さったので想い出カキコ。

## パソコンフェアで衝動買い

当時小学生だった私が、当時まだまだ高価で珍しかったパソコンの展示イベント「パソコンフェア」の入場無料券を学校でもらい、別に私は興味なかったが親の方が興味持ったので家族で行くことになった。

倉庫みたいな場所で、雑然とPC98やプリンタなどの周辺機器が並べられ、私としては「ふーん」くらいにしか思えなかった（PCでゲームできるのも知らなかったし）。

ところが父のテンションが何故か上がり、PCとプリンタとPC台がセットで50万円くらいのやつを衝動買いしてしまった。

## やることがないので一太郎ver1.0で遊ぶ。

やってきたのはPC-9801 RX。
当然インターネットもないし、音響カプラーもないのでパソコン通信もできず（というか存在も知らないのだが）、ゲームも何も入っていないので、来たものの特にやることがない。

そんな時、父が（おそらく勝手に会社から持ってきた）一太郎ver1.0をFDからインストール。
テキストエディタなのでもちろん遊ぶものではないが、初PCの私にはキーボードを打って画面に文字が出るだけで十分楽しかった。「うんこちんちーん」とかの文字が綺麗な文字でディスプレイに映るだけでゲラゲラ笑えた。

## 人生初BASICプログラミング

PCに「BASICプログラミング入門」みたいなものが付属していたので、試しにやってみたら、これまた面白かった。
図形を描画するモジュールを使って、カラフルな丸とか四角とかを出現させるだけで楽しかった。

なんのゲームか忘れたが、簡単なゲームのコードが付属していたので、確か数千行あったと思うのだが、慣れない手つきで1日かけて写経し動いた時は感動した。

## やがてゲーム機に

そのうち父がまたいろんなところからFDに入ったゲームを調達してきて、倉庫番やパックマンやどこかの大学生が作ったらしき大富豪などをやるようになった。大富豪で手持ちのカードを増やしすぎるとスタックオーバフローしてメモリリークするというバグが人生初の自身で発見したバグだ。

なかでもプリンスオブペルシャはハマった。友達と連日集まって謎解きしながら少しずつ進めていき、1ヶ月くらいかけてクリアした時は大歓声が上がった。

そして最後は兄がどこからかエ⚪︎ゲを調達してきて、エ⚪︎ゲ専用機になった。確かFDが20枚くらいあってちょっと進めるたびにFDを入れ替えないといけないめんどくささだった。

# PC９８から全てを学んだ

私が中学生になるころには部活や受験勉強で忙しくなり、PC98もファミコンもほとんどやらなくなった（もうスーファミ時代だったけど買わなかった）。

父が衝動買いしたPC９８だったが、PCのセットアップの仕方も、マウスの使い方も、ブラインドタッチも、プログラミングも、PCに関するほとんどのことはそのPC９８から学んだ。

それでIT業界に興味がわいて・・・ってわけではないのだが、結果的にエンジニアになった。
そのPC９８がなかったら、なっていなかったかもしれない。
人生何で分岐路が現れるかわからない。

私も今1991年にタイムスリップしたとしたら、競争馬とか戦艦とかを美少女化してゲームにしたらめちゃめちゃ流行ることを教えてあげたい。
",0,0,0,ポエム,,PC-9801,エンジニア歴20年の老害エンジニア,,7,74,,tosiooooooo,97,,,tosio,,21645,https://qiita-image-store.s3.amazonaws.com/0/21645/profile-images/1484788406,False,,,,,,
"[watsonx.data](https://www.ibm.com/jp-ja/products/watsonx-data)はオープンなデータレイクハウス・アーキテクチャに基づいて構築されており、大容量のデータを安価に保存できるオブジェクトストレージにテーブルを作成したり、他のデータベースを統合することができ、それらのデータベースのデータをwatsonx.dataに組み込まれているオープンソースの[Presto](https://prestodb.io/)エンジンを使って横断的にSQL文でアクセスできます。

[Kafka](https://ja.wikipedia.org/wiki/Apache_Kafka)は大規模なイベント・ストリーム・データを公開(パブリッシュ)/購読(サブスクライブ)して複数のシステム間でデータを連携することができるオープンソースで、一定期間データを保持したり、複数のサーバーに分散かつ冗長化して処理できるため、高速で耐障害性が高いプラットフォームとなっています。

利用例としては、ホストシステムでトランザクション処理を行い、そのデータをKafkaで別システムに連携し参照系を行うといった、ホストシステムから参照系の負荷を軽減させ、別システムでフレキシブルに参照を行う [CQRS (Command Query Responsibility Segregation)](https://www.ibm.com/cloud/architecture/architectures/event-driven-cqrs-pattern/) で使用されたりしています。

本記事は、watsonx.dataにKafkaを組み込んでPrestoエンジンでアクセスしてみた内容になります。一部、オープンソースのPrestoのドキュメントを参照しながら試行錯誤して得られた結果も記載しています。

## この記事の内容

- 今回試した環境
  - [IBM Cloud Pak for Data](https://www.ibm.com/docs/en/cloud-paks/cp-data/4.8.x?topic=overview) (CP4D) 4.8.0 上に以下のサービスを導入
    - watsonx.data (SW版) 1.1.0
    - Event Streams (SaaS) (Kafka 3.3)
- 今回試した内容
    - Kafkaにトピックを作成する
    - watsonx.dataに上記Kafkaを組み込む
    - PCにKafkaを導入し、上記のKafkaにJSON形式のデータを投入する
    - watsonx.dataのPrestoエンジンを使ってSQLでKafkaに投入されたデータを取得する
        - 投入されたデータは1つの列にセットされる
        - 投入された時間も別の列(`_timestamp`)にセットされる
    - watsonx.dataのPrestoエンジンに対して、Kafkaから取得したデータの列定義に関する構成情報ファイルを作成・適用し、JSON形式データの各キーをテーブルの別々の列にマッピングする
        - SQL文でJSONデータの各キーの値が別々の列にセットされる
        - 結果として、それらの列を使って条件指定や他のテーブルとの結合ができる
        - 考慮点
            - 今回、この対応を行うために、OpenShift上で動作しているPrestoエンジンのPodに直接構成情報ファイルを作成した。また、その後Prestoエンジンを再起動させるために、KafkaのPrestoへの関連を一旦切り離し、再度関連付けを行っている。PrestoエンジンのPodを削除することでPodを再起動させることができるが、そうすると、作成した構成情報ファイルが削除されてしまう


## この記事の流れ

1. Kafkaにトピックを作成する
1. watsonx.dataにKafkaを組み込む
1. PCからKafkaにJSON形式のデータを投入してみる
1. watsonx.dataのPrestoエンジンでSQL文を使ってKafkaに投入されたデータを取得してみる
1. 追加でPCからKafkaにJSON形式のデータを投入し、そのデータをwatsonx.dataのPrestoエンジンで取得してみる
1. watsonx.dataのPrestoエンジンに対して、Kafkaから取得したデータの列定義に関する構成情報ファイルを適用してみる


## 1. Kafkaにトピックを作成する

Kafka は IBM Cloud のカタログから `Event Streams`(Kafkaが組み込まれている) を選択し、作成する。(`Kafka`で検索すると`Event Streams`がヒットする)

次にリソース・リストで、`統合`のカテゴリに作成された`Event Streams`をクリックして開く。

左のメニューから`トピック`をクリックし、右にある`トピックの作成`をクリックする。

![kafka_add_topic_1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/eb4c4368-3b78-1a50-71c3-9e778e5f45eb.png)

`トピック名`に`tpch.customer`を入力し、`次へ`をクリックする。

![kafka_add_topic_2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/bac8c05b-fc1a-681e-0ded-94f5be74db0b.png)

今回、`パーティション`は`1`のままで、`次へ`をクリックする。

![kafka_add_topic_3.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/27120445-0efa-fdf7-df48-f67859649e94.png)

今回、`メッセージ保存`期間は`1日`のままとして、`トピックの作成`をクリックする。

![kafka_add_topic_4.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/25cfe14e-bf01-2180-44bb-e1989aa65177.png)

トピックが作成されると、以下のようにリストされる。

![kafka_add_topic_5.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/f8dc340d-21ee-ef70-8172-a662fe51c0e6.png)


## 2. watsonx.dataにKafkaを組み込む

`Event Streams`の左のメニューから`サービス資格情報`をクリックし、右にある`新規資格情報`をクリックし、資格情報を作成する。`役割`は、`管理者`または`ライター`を選択する。

![kafka_create_service_credential.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/8593b4a2-f440-d106-be83-bc4bb6f65879.png)

資格情報のうち、今回は以下の情報が必要となる。
```json
{
  ...
  ""kafka_brokers_sasl"": [
    ""broker-0-34gz6msg5ws2h333.kafka.svc08.us-south.eventstreams.cloud.ibm.com:9093"",
    ""broker-1-34gz6msg5ws2h333.kafka.svc08.us-south.eventstreams.cloud.ibm.com:9093"",
    ""broker-2-34gz6msg5ws2h333.kafka.svc08.us-south.eventstreams.cloud.ibm.com:9093"",
    ""broker-3-34gz6msg5ws2h333.kafka.svc08.us-south.eventstreams.cloud.ibm.com:9093"",
    ""broker-4-34gz6msg5ws2h333.kafka.svc08.us-south.eventstreams.cloud.ibm.com:9093"",
    ""broker-5-34gz6msg5ws2h333.kafka.svc08.us-south.eventstreams.cloud.ibm.com:9093""
  ],
  ...
  ""password"": ""xxx"",
  ""user"": ""token""
}
```

次に、watsonx.dataの`インフラストラクチャー・マネージャー`画面の右にある`コンポーネントの追加`をクリックし、プルダウンされたリストにある`データベースの追加`をクリックする。

![watsonx_data_add_kafka_1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/8994047a-b8d5-dd4c-4cec-cfb688c3386b.png)

以下の情報を入力して、`Register`をクリックする。

| 項目 | 値 |
|:--|:--|
| データベース・タイプ | Apache Kafka |
| 表示名 | kafka01 |
| ホスト名 | サービス資格情報に記載されているホスト名 |
| ポート | サービス資格情報に記載されているポート名 |
| SASL connection | 有効にする |
| ユーザー名 | サービス資格情報に記載されているユーザー名 |
| API key/Password | サービス資格情報に記載されているパスワード |
| Topics | tpch.customer |
| カタログ名 | kafka1 |

![watsonx_data_add_kafka_2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/f3ae4c90-4efb-760d-4bd7-4afe40cba47b.png)

結果として、Kafkaの情報が以下の右側に追加される。

![watsonx_data_add_kafka_3.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/693ef2b7-823c-3917-130d-1637a80a2a6f.png)

下図のように、`kafka1`カタログの上にある`関連付けの管理`をクリックする。

![watsonx_data_add_kafka_4.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/e3811986-5a7b-2eda-1b92-2f94ef6df9c1.png)

`関連付けの管理`で`presto-01`のチェックボックスをチェックし、`保存してエンジンを再始動する`をクリックする。

![watsonx_data_add_kafka_5.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/b5240eef-2cc3-ae48-6cee-361a76431fa8.png)

しばらく待つとPrestoエンジンの再始動が終了し、以下のようになる。

![watsonx_data_add_kafka_6.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/ccd6aa3e-ddc8-4d9c-5a4e-c49d54a6c7de.png)


## 3. PCからKafkaにJSON形式のデータを投入してみる

KafkaをPCにインストールし、Kafkaにメッセージを投入できるようにする。Macの場合、以下のコマンドでKafkaを組み込むことができる。
```shell
$ brew install kafka
```

tpch.customerのデータとして、以下のJSONデータを使用する。
```json
{""rowNumber"":1,""customerKey"":1,""name"":""Customer#000000001"",""address"":""IVhzIApeRb ot,c,E"",""nationKey"":15,""phone"":""25-989-741-2988"",""accountBalance"":711.56,""marketSegment"":""BUILDING"",""comment"":""to the even, regular platelets. regular, ironic epitaphs nag e""}
{""rowNumber"":2,""customerKey"":2,""name"":""Customer#000000002"",""address"":""XSTf4,NCwDVaWNe6tEgvwfmRchLXak"",""nationKey"":13,""phone"":""23-768-687-3665"",""accountBalance"":121.65,""marketSegment"":""AUTOMOBILE"",""comment"":""l accounts. blithely ironic theodolites integrate boldly: caref""}
{""rowNumber"":3,""customerKey"":3,""name"":""Customer#000000003"",""address"":""MG9kdTD2WBHm"",""nationKey"":1,""phone"":""11-719-748-3364"",""accountBalance"":7498.12,""marketSegment"":""AUTOMOBILE"",""comment"":"" deposits eat slyly ironic, even instructions. express foxes detect slyly. blithely even accounts abov""}
{""rowNumber"":4,""customerKey"":4,""name"":""Customer#000000004"",""address"":""XxVSJsLAGtn"",""nationKey"":4,""phone"":""14-128-190-5944"",""accountBalance"":2866.83,""marketSegment"":""MACHINERY"",""comment"":"" requests. final, regular ideas sleep final accou""}
{""rowNumber"":5,""customerKey"":5,""name"":""Customer#000000005"",""address"":""KvpyuHCplrB84WgAiGV6sYpZq7Tj"",""nationKey"":3,""phone"":""13-750-942-6364"",""accountBalance"":794.47,""marketSegment"":""HOUSEHOLD"",""comment"":""n accounts will have to unwind. foxes cajole accor""}
```

最初の3つをKafkaの`tpch.customer`トピックに投入してみる。
まずは、以下のような認証情報ファイルを作成する。

```properties:kafka.properties
security.protocol=SASL_SSL
ssl.protocol=TLSv1.2
sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=""token"" password=""xxx"";
sasl.mechanism=PLAIN
ssl.enabled.protocols=TLSv1.2
ssl.endpoint.identification.algorithm=HTTPS
```

以下のコマンドで最初の3つをKafkaの`tpch.customer`トピックに投入する。

```shell
$ kafka-console-producer --producer.config kafka.properties --topic tpch.customer --bootstrap-server broker-0-34gz6msg5ws2h333.kafka.svc08.us-south.eventstreams.cloud.ibm.com:9093
>{""rowNumber"":1,""customerKey"":1,""name"":""Customer#000000001"",""address"":""IVhzIApeRb ot,c,E"",""nationKey"":15,""phone"":""25-989-741-2988"",""accountBalance"":711.56,""marketSegment"":""BUILDING"",""comment"":""to the even, regular platelets. regular, ironic epitaphs nag e""}
>{""rowNumber"":2,""customerKey"":2,""name"":""Customer#000000002"",""address"":""XSTf4,NCwDVaWNe6tEgvwfmRchLXak"",""nationKey"":13,""phone"":""23-768-687-3665"",""accountBalance"":121.65,""marketSegment"":""AUTOMOBILE"",""comment"":""l accounts. blithely ironic theodolites integrate boldly: caref""}
>{""rowNumber"":3,""customerKey"":3,""name"":""Customer#000000003"",""address"":""MG9kdTD2WBHm"",""nationKey"":1,""phone"":""11-719-748-3364"",""accountBalance"":7498.12,""marketSegment"":""AUTOMOBILE"",""comment"":"" deposits eat slyly ironic, even instructions. express foxes detect slyly. blithely even accounts abov""}
>^C
```


## 4. watsonx.dataのPrestoエンジンでSQL文を使ってKafkaに投入されたデータを取得してみる

まず`照会ワークスペース`で、追加したKafkaのトピックに対応するwatsonx.dataのテーブルの列を確認してみる。下図に表示されている列のうち、`_message`列にKafkaの該当トピックに投入されたメッセージがセットされ、`_timestamp`列に投入した時間がセットされる。

![watsonx_data_kafka_table_1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/584767c2-fb96-801c-c41e-23f54ede12c7.png)

それでは、投入した時間順にJSONデータを取得してみる。
以下のSQL文を実行する。

```sql
select
  _timestamp,
  _message
from kafka1.tpch.customer
order by _timestamp;
```

(*) KafkaはパーティションごとにFIFOでメッセージが取得できるので、複数のパーティションに跨ったメッセージを投入した時間順に取得したい場合は`order by _timestamp`を付けると良い。今回はパーティションを1にしているので、`order by _timestamp`と指定しなくても時間順にメッセージが取得できる。

結果として、以下のように3件のJSONデータが取得できる。

![watsonx_data_kafka_query_1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/8830f9f8-f161-24af-1e3a-8aaf16ed42a5.png)


## 5. 追加でPCからKafkaにJSON形式のデータを投入し、そのデータをwatsonx.dataのPrestoエンジンで取得してみる

さらに残りの2件のJSONデータをコマンドから投入してみる。

```shell
$ kafka-console-producer --producer.config kafka.properties --topic tpch.customer --bootstrap-server broker-0-34gz6msg5ws2h333.kafka.svc08.us-south.eventstreams.cloud.ibm.com:9093
>{""rowNumber"":4,""customerKey"":4,""name"":""Customer#000000004"",""address"":""XxVSJsLAGtn"",""nationKey"":4,""phone"":""14-128-190-5944"",""accountBalance"":2866.83,""marketSegment"":""MACHINERY"",""comment"":"" requests. final, regular ideas sleep final accou""}
>{""rowNumber"":5,""customerKey"":5,""name"":""Customer#000000005"",""address"":""KvpyuHCplrB84WgAiGV6sYpZq7Tj"",""nationKey"":3,""phone"":""13-750-942-6364"",""accountBalance"":794.47,""marketSegment"":""HOUSEHOLD"",""comment"":""n accounts will have to unwind. foxes cajole accor""}
>^C
```

先ほど実行したSQL文を再度実行すると、以下のように5件のJSONデータが取得できる。

![watsonx_data_kafka_query_2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/3afbf1ab-2262-58ee-5400-422a809d690f.png)


## 6. watsonx.dataのPrestoエンジンに対して、Kafkaから取得したデータの列定義に関する構成情報ファイルを適用してみる

オープンソースのPrestoのKafka Connectorについての情報が記載されている [Kafka Connector Tutorial](https://prestodb.io/docs/current/connector/kafka-tutorial.html) の ""Step 6: Map all the values from the topic message onto columns"" を参照すると、`etc/kafka/tpch.customer.json`に以下の情報を保存すると、JSONデータの各キーの値を列にマッピングすることができると記載されている。
(この定義は、今回使用したtpch.customerデータに合わせて定義されている)

```json:etc/kafka/tpch.customer.json
{
  ""tableName"": ""customer"",
  ""schemaName"": ""tpch"",
  ""topicName"": ""tpch.customer"",
  ""key"": {
    ""dataFormat"": ""raw"",
    ""fields"": [
      {
        ""name"": ""kafka_key"",
        ""dataFormat"": ""LONG"",
        ""type"": ""BIGINT"",
        ""hidden"": ""false""
      }
    ]
  },
  ""message"": {
    ""dataFormat"": ""json"",
    ""fields"": [
      {
        ""name"": ""row_number"",
        ""mapping"": ""rowNumber"",
        ""type"": ""BIGINT""
      },
      {
        ""name"": ""customer_key"",
        ""mapping"": ""customerKey"",
        ""type"": ""BIGINT""
      },
      {
        ""name"": ""name"",
        ""mapping"": ""name"",
        ""type"": ""VARCHAR""
      },
      {
        ""name"": ""address"",
        ""mapping"": ""address"",
        ""type"": ""VARCHAR""
      },
      {
        ""name"": ""nation_key"",
        ""mapping"": ""nationKey"",
        ""type"": ""BIGINT""
      },
      {
        ""name"": ""phone"",
        ""mapping"": ""phone"",
        ""type"": ""VARCHAR""
      },
      {
        ""name"": ""account_balance"",
        ""mapping"": ""accountBalance"",
        ""type"": ""DOUBLE""
      },
      {
        ""name"": ""market_segment"",
        ""mapping"": ""marketSegment"",
        ""type"": ""VARCHAR""
      },
      {
        ""name"": ""comment"",
        ""mapping"": ""comment"",
        ""type"": ""VARCHAR""
      }
    ]
  }
}
```

これをwatsonx.dataのPrestoエンジンに適用してみる。

手順としては、
1. 上記ファイルを用意する
1. PrestoエンジンのPodに上記ファイルをコピーする
1. Prestoエンジンを再起動するために、一旦、KafkaをPrestoエンジンから切り離し、その後、再度Prestoエンジンに関連付ける

まず、上記ファイル`tpch.customer.json`ファイルを用意しておく。
次に、PrestoエンジンのPodに入り、コピーする場所を特定する。

```shell-session
# oc login --token=xxx --server=https://c115-e.jp-tok.containers.cloud.ibm.com:31009
Logged into ""https://c115-e.jp-tok.containers.cloud.ibm.com:31009"" as ""IAM#mohkawa@jp.ibm.com"" using the token provided.
...
Using project ""cpd-instance"".
# oc get pods | grep presto
ibm-lh-lakehouse-presto-01-single-blue-0                          1/1     Running     0             9h
# oc exec -it ibm-lh-lakehouse-presto-01-single-blue-0 -- /bin/bash
bash-4.4$ cd /opt/presto/etc
bash-4.4$ ls
access-control.properties	     cert			jmx.properties	   log4j-events.properties	      query-governance.properties
catalog				     config.properties		jvm.config	   node.properties		      setvendor.zip
catalog-secret.properties	     event-listener.properties	liblts-masking.so  password-authenticator.properties  system-schema.properties
catalog-table-exclusions.properties  jmx-exporter-config.yaml	log.properties	   preload_secrets.env
```

(*) `oc login`コマンドは、`OpenShift Web コンソール`画面右にあるユーザー名をクリックして得られるリストから`ログインコマンドのコピー`をクリック、次に`Display Token`をクリックすると表示される。

![redhat_oc_login.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/0214c6ea-85f1-d783-4d72-3372a3c7af0a.png)


調査した結果、`/opt/presto/etc`の配下に上記ファイルをコピーすれば良いことがわかった。`etc`ディレクトリの配下に`kafka`ディレクトリがないので作成する。

```shell-session
bash-4.4$ pwd
/opt/presto/etc
bash-4.4$ mkdir kafka 
bash-4.4$ ls /opt/presto/etc/kafka
bash-4.4$ exit
```

作成した`tpch.customer.json`を上記にコピーする。

```shell-session
# oc cp tpch.customer.json ibm-lh-lakehouse-presto-01-single-blue-0:/opt/presto-server-0.282/etc/kafka/.
```

念の為、コピーされたことを確認する。

```shell-session
# oc exec -it ibm-lh-lakehouse-presto-01-single-blue-0 -- /bin/bash
bash-4.4$ ls /opt/presto/etc/kafka
tpch.customer.json
bash-4.4$ exit
```

次に、Prestoエンジンを再起動させて上記の情報を反映させるために、PrestoエンジンからKafkaを一旦切り離し、その後、再度、Kafkaを関連付ける。

![watsonx_data_detach_kafka_1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/438259b3-3af6-5ed3-32b0-3e24f9313373.png)

Prestoエンジンの再起動が終了したら、照会ワークスペースで、Kafkaのトピックに対応するwatsonx.dataのテーブルの列を確認してみる。
以下のように列情報が変わっている。

![watsonx_data_kafka_table_2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/aec2a1e9-50c0-e020-6b13-701a9d7849f8.png)

ここで、以下のSQL文を発行してみる。

```sql
select 
  _timestamp,
  row_number,
  customer_key,
  name,
  address,
  nation_key,
  phone,
  account_balance,
  market_segment,
  comment
from kafka1.tpch.customer
order by _timestamp;
```

結果として、以下のように、JSONデータの各キーの値が、別々の列の値として取得できる。

![watsonx_data_kafka_query_3.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/4efcda8a-e372-9dc2-80d6-7f48f58b7ab6.png)

JSONデータの各キーの値が、別々の列の値として扱えるようになったので、それらの列を使って条件指定や他のテーブルとの結合が可能となる。

例えば以下のように、IBM Cloud Object Storage (ICOS) 上に作成した`tpch.nation`テーブルと結合し、さらに`row_number`列の条件を付加したSQL文を実行してみる。

```sql
select
  _timestamp,
  row_number,
  customer_key,
  customer.name,
  address,
  nation.name nation,
  phone,
  account_balance,
  market_segment,
  customer.comment
from kafka1.tpch.customer,icos1.tpch.nation
where customer.nation_key=nation.nationkey and row_number > 3
order by _timestamp;
```

結果として、以下が得られる。
(`nation_key`列が`nation`列に置き換わり、国名が表示されている)

![watsonx_data_kafka_query_4.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507588/df0071b6-1a7e-029c-440f-85905776a537.png)

補足:
ICOSの`icos1.tpch.nation`テーブルは、以下のSQL文で作成した。
(`tpch.tiny.nation`テーブルは watsonx.data 導入時に構成されている)

```sql
create table icos1.tpch.nation
  with (
    format='PARQUET'
  )
  as select * from tpch.tiny.nation;
```
",0,1,1,SQL,openshift,watsonx.dataにKafkaを組み込んでPrestoエンジンでアクセスしてみた,ここに記載した内容は私自身の見解であり、必ずしも所属する会社の立場、戦略、意見を代表するものではありません。,,0,2,,mohkawa,5,,,,,507588,https://lh4.googleusercontent.com/-ohmqtaeoavw/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rcQwX5fVZ6Rsn0a0stSV-boGu8x4g/s50/photo.jpg,False,,,,Kafka,CQRS,watsonx.data
"## はじめに

https://qiita.com/taka-k/items/fdaebef8fe459d705a71

前回作成した、タブ整理系の拡張機能作成の続きとして、
最近開いたタブを一覧表示し、クリックするとそのタブがアクティブになる拡張機能を作成してみました。


が、自分の勘違いか丁度最近実装されたのかわかりませんが、
Chrome 本体に最近開いた順にタブの一覧を表示してくれる機能が実装されたようです...

なので今回の拡張機能は必要なくなってしまったのですが、
そのままお蔵入りは悲しいのでどのように作成したかを備忘録として残します。

## 拡張機能を作成していく
### ファイル構成

```
manifest.json
background.js
popup.html
popup.js
```

#### manifest.json

```json
{
  ""name"": ""Tab history"",
  ""description"": ""Tab history"",
  ""version"": ""1.0"",
  ""manifest_version"": 3,
  ""permissions"": [
    ""activeTab"", ""tabs"", ""storage""
  ],
  ""background"": {
    ""service_worker"": ""background.js""
  },
  ""action"": {
    ""default_popup"": ""popup.html""
  }
}
```

今回は、タブがアクティブになったタイミングでその情報を保存するようにしたいため、
serive_worker を使用できるように、以下の設定をしています。

```json
  ""background"": {
    ""service_worker"": ""background.js""
  }
```

また、今回はタブの情報はもちろん、アクティブになったタブと ID を保存するためのストレージが必要となるため、
以下の許可設定を行っています。

```json
  ""permissions"": [
    ""activeTab"", ""tabs"", ""storage""
  ]
```

#### background.js
```js
const historyLimit = 20

chrome.tabs.onActivated.addListener((activeTab) => {
  chrome.storage.local.get([""recentActiveTabIds"", ""lastCloseTabId""], (result) => {
    let tabIds = []

    if (result.recentActiveTabIds) {
      tabIds = result.recentActiveTabIds
    }

    if (result.lastCloseTabId) {
      tabIds = tabIds.filter((id) => id !== result.lastCloseTabId)
    }

    tabIds.unshift(activeTab.tabId)
    tabIds = [...new Set(tabIds)]
    tabIds = tabIds.slice(0, historyLimit)

    chrome.storage.local.set({ recentActiveTabIds: tabIds })
  })
})

chrome.tabs.onRemoved.addListener((removeTabId) => {
  chrome.storage.local.set({ lastCloseTabId: removeTabId })

  chrome.storage.local.get([""recentActiveTabIds""], (result) => {
    let tabIds = []

    if (result.recentActiveTabIds) {
      tabIds = result.recentActiveTabIds
    }

    tabIds = tabIds.filter((id) => id !== removeTabId)

    chrome.storage.local.set({ recentActiveTabIds: tabIds })
  })
})

```

タブがアクティブになった際(`onActivated`)、タブが閉じられた際(`onRemoved`)にそれぞれ動作する処理を用意します。

```js
chrome.tabs.onActivated.addListener((activeTab) => {
  chrome.storage.local.get([""recentActiveTabIds"", ""lastCloseTabId""], (result) => {
    let tabIds = []

    if (result.recentActiveTabIds) {
      tabIds = result.recentActiveTabIds
    }

    if (result.lastCloseTabId) {
      tabIds = tabIds.filter((id) => id !== result.lastCloseTabId)
    }

    tabIds.unshift(activeTab.tabId)
    tabIds = [...new Set(tabIds)]
    tabIds = tabIds.slice(0, historyLimit)

    chrome.storage.local.set({ recentActiveTabIds: tabIds })
  })
})
```

onActivated の処理は、大まかに以下の通りです。

1. ストレージから 最近開いたタブの ID のリストを取得する。
2. 取得したリストに対して今回アクティブになったタブの ID を追加する。
3. リストに対して重複削除処理と保存上限数に切り捨てる処理を行う。
4. ストレージにリストを保存する。

```js
chrome.tabs.onRemoved.addListener((removeTabId) => {
  chrome.storage.local.set({ lastCloseTabId: removeTabId })

  chrome.storage.local.get([""recentActiveTabIds""], (result) => {
    let tabIds = []

    if (result.recentActiveTabIds) {
      tabIds = result.recentActiveTabIds
    }

    tabIds = tabIds.filter((id) => id !== removeTabId)

    chrome.storage.local.set({ recentActiveTabIds: tabIds })
  })
})
```

onRemoved の処理は、大まかに以下の通りです。

1. ストレージから 最近開いたタブの ID のリストを取得する。
2. 取得したリストから、今回開いたタブの ID を削除する。
3. ストレージにリストを保存する。

また、上記に挙げた以外の処理として、タブを閉じた際にそのタブの ID をストレージに保存し、
アクティブの処理側でその ID を参照し、リストから削除する処理も行っています。

これは、現在開いているタブを削除した際に他のタブが瞬時にアクティブになることにより、
onRemoved と onActivated がほぼ同時に動き、onRemoved で削除したはずの ID が onActivated 側の処理で復活してしまうことがあったため、
onActivated 側でも削除するようにしました。

#### popup.html

```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <title>popup</title>
  <style>
    body{
      width: 350px;
    }
    button{
      align-items: center;
      background-color: transparent;
      border-bottom: #cccccc 1px solid;
      border: none;
      cursor: pointer;
      display: flex;
      padding: 4px 0px;
      text-align: left;
      width: 100%;
    }
    button:hover{
      background-color: #eeeeee;
    }
    button > img{
      height: 16px;
      margin-right: 4px;
      width: 16px;
    }
  </style>
</head>
<body>
  <div id=""tabList""></div>
  <script src=""popup.js""></script>
</body>
</html>
```

拡張機能のアイコンをクリックした際に表示する、ポップアップの中身です。
タブの一覧を挿入する `tabList` を用意し、 最低限の style を指定して見た目を整えています。

#### popup.js
```js
chrome.storage.local.get([""recentActiveTabIds""], (result) => {
  targetDOM = document.getElementById(""tabList"")

  if (result.recentActiveTabIds) {
    result.recentActiveTabIds.forEach((id) => {
      chrome.tabs.get(id, (tab) => {
        const button = document.createElement(""button"")
        const span = document.createElement(""span"")
        span.textContent = tab.title

        if (tab.favIconUrl) {
          const img = document.createElement(""img"")
          img.src = tab.favIconUrl
          button.appendChild(img)
        }

        button.appendChild(span)

        button.addEventListener(""click"", () => {
          chrome.tabs.update(id, {active: true})
        })
        targetDOM.appendChild(button)
      })
    })
  }
})
```

ポップアップで動作するスクリプトです。

ストレージから最近開いたタブの ID のリストを取得し、その ID を使って `chrome.tabs.get` で詳細情報をそれぞれ取得します。
その詳細情報を DOM として構築し、popup.html の `tabList` に挿入しています。

文字情報だけだと視認性が悪かったため、今回は favIcon も表示するようにしました。

## 動かしてみる

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/247154/ddd50620-de4f-00a6-b9e3-276e5445088b.png)

無事、最近開いたタブの一覧が表示されました！

## ハマったところ
### service_worker 内の変数は、永続しない
最初は、タブの ID リスト を service_worker 内に変数として持たせるように作成していました。
が、一定時間が経つと、変数の中身が空になってしまうことに気づきました。
調べてみると、service_worker は一定の条件を満たすとシャットダウンされ、その際に変数に保存した内容は失われてしまうようです。

https://developer.chrome.com/docs/extensions/develop/concepts/service-workers/lifecycle?hl=ja#idle-shutdown
",0,1,0,chrome-extension,,最近開いたタブを順番に一覧表示する拡張機能を作成,,,0,5,,taka-k,14,,,,,247154,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/247154/c67b372d8349454f14e758b35718e41f2de89542/medium.png?1628753423,False,,,,,,
"# はじめに
えか太郎です。普段はWindows Serverばかり触っているのですが、やはりLinuxは今後必須なのでとりあえずSSH接続のやり方だけでも覚えようとした話です。
# 設定方法
## １，パッケージのインストール
~~~
sudo apt update
sudo apt install openssh-server
~~~
上記のコマンドを入力してパッケージをインストールしてください。
## ２、SSHの操作方法
基礎的なものだけメモしときます。
~~~
停止	$ sudo systemctl stop ssh
起動	$ sudo systemctl start ssh
再起動	$ sudo systemctl restart ssh
自動起動の有効	$ sudo systemctl enable ssh
自動起動の無効	$ sudo systemctl disable ssh
設定リロード	$ sudo systemctl reload ssh
~~~
## ２，teraTarmのインストール（Windows)
窓の杜からダウンロードしました。

https://forest.watch.impress.co.jp/library/software/utf8teraterm/

v5系統の通常版を選択しました。

あとはIPを入力とかしてSSH接続すれば終わり。セキュリティはプライベートな方へ

# 終わりに
リモートデスクトップみたくGUIだけでできないのはめんどくさいです。無料なのが素晴らしいですが。
",0,0,0,SSH,環境構築,SSH接続の設定方法のざっくり備忘録（Xubuntu）,徳の高い現役JK（情報に興味ある高校生）。カフェイン依存を治したい。現在高校二年生なのでそろそろ受験を考えなければならない...九州大学工学部志望。,,1,1,KotaroUehara,EkaTaro3,21,,"Fukuoka,Japan",えか太郎,高校二年生,3120367,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3120367/profile-images/1701261013,False,,,,備忘録,xubuntu,JK
"この記事は、[【完走したい】楽しくいろいろやる Advent Calendar 2023](https://qiita.com/advent-calendar/2023/notbeginner)の13日目の記事です。
せっかくpythonを学んでいるので、画像認識とか画像処理についても学んでいきたいと思います。とりあえずまずは画像を表示させてみます。
# 画像認識
その名の通り画像の認識です。pythonでは、OpenCVとかいうものを使って画像認識ができるそうです。
# やってみた
使用環境
Google Colab
#### 下準備
まずは画像を用意します。
![スクリーンショット 2023-12-21 183731.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2961125/89d3336e-2b89-7b4f-d8b5-dc764ac0d602.png)

そこら辺にあったネズミっぽい何かを撮ってきました。
これを
```
from google.colab import files
uploaded = files.upload()
```
で、画像をcolabに入れます。
#### 本題
まずはちゃんと読み込まれているか、確認します。
```
import cv2
img = cv2.imread(""IMG_1734.png"")
cv2.imshow(""Image"",img)
cv2.waitKey()
```
![スクリーンショット 2023-12-21 182558.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2961125/64ca2ce4-1d45-48a6-8759-2f25a194aa0f.png)
できませんでした。どうやら、google colabにもできる機能とできない機能があるみたいです。imshowというのが対応してないらしい。困った。

## 方法その２ 
https://qiita.com/donguri/items/bbcd831094abc6a773a0
このサイトを参考に、

```
import cv2
import numpy as np
import matplotlib.pyplot as plt
img = cv2.imread(""IMG_1734.png"")
plt.imshow(img)
```
imshowが使えないので、代わりにmatplotlib.pyplotというものを使っているようです。これを実行すると、
![スクリーンショット 2023-12-21 183802.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2961125/ad68cb5c-a519-b377-a67d-aba953f9e6df.png)
色がおかしくなってしまいました。

https://wp.nakanishi.pro/python/56/

色の順番が変わるみたいです。
色の順番をBGRからRGBに変えれば、
![スクリーンショット 2023-12-21 184157.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2961125/a8e214cf-d363-2128-3c61-abaa19fbdf89.png)
色が戻ってきました！
# ところで
VisualStudioCodeを使うとどうなるのか
⇒上のコードではエラーが出ました。
やり方はあると思うのですが、うまくできませんでした。
# まとめ
pythonで画像処理できます。
参考

https://kaibutsusyain.com/use-opencv-with-google-colaboratory-introduction-to-opencv/

https://qiita.com/toyohisa/items/cbcdb0cb20265c4168c7


https://colab.research.google.com/github/farrokhkarimi/OpenCV/blob/master/Getting_Started_with_OpenCV.ipynb
",0,1,0,Python,OpenCV,【Python入門】OpenCVを使うその１　画像を表示する,"大学生文系
主にpython/C#
他にもいろいろチャレンジしてみる人です。
よろしくお願いします",,2,2,Aruhimanahito,Aruhimanahito,44,,,,,2961125,https://pbs.twimg.com/profile_images/1568706350250659842/SJt2UWsN_bigger.jpg,False,Aruhimanahito,,,AdventCalendar2023,,
"# 動機

[以前の投稿](https://qiita.com/daredeshow/items/274dc172097420f9b589)見た人はわかるかもだけど、Vue.jsでそれなりに満足はしていたし今でもしているのだが、世の中いろんなところで ReactReact 言われててなんとなく「今どき React わかるのは最低要件っス」的な圧を感じるので、一通りやっておかんとなと思ってはじめた。最近だと[Unityからも使えるらしい](https://qiita.com/y-yoshinari/items/0666a391a496879b66bf)。まじかよ。

で、Vue.jsやってた人がこれはReactだとどうなるの？的な観点からざざっとやってみた

# 勉強ログ

## Step.0

- ホームページ: https://ja.react.dev/

ただここのチュートリアルやってるといつの間にか(Next.js/Remix/Gatsby)を使ったパターンに落とし込まれるのが罠。求めていたのは Vue.js の snap-in-replace としての React だったのでこのトレーニングはスキップした。

## Step.1 : Hello Worldを手元で

<details><summary>この手順は公式では既に deprecated 扱いになっている</summary>
`npx create-react-app` は既にdeprecatedの扱い。

参考: https://zenn.dev/nekoya/articles/dd0f0e8a2fa35f

ここではフレームワークに依存しない学習のためにあえてやっている。使わなくてもスケルトンを `git clone` などして自分で用意して、`npm install && npm start` すれば同じことになるので大丈夫。
</details>

`npx create-react-app` するのに Node.js 以外に特に事前に何か入れておく必要はない。

```shell
npx create-react-app step1
cd step1
npm start
```

ディレクトリの構造には特に決まったルールはないようだが、慣例的に以下のようにしている例が多い。
```text
./
├── build/ # <- npm run build で作成される配布用ファイル
├── node_modules/
├── package-lock.json
├── package.json
├── public/ # <- 画像ファイルなどのリソース
└── src/
    ├── index.js # <- 最初に呼び出されるjs
    ├── pages/ # <- ページを定義するコード
    ├── setupTests.js
    ├── lib/ # <- 外部APIなどを呼び出すためのコード
    └── ui/  # <- UIのパーツを定義するコード
```

内容を変更するには `src/App.js` を変更する。試しに以下のように変更してみる

```javascript:src/App.js
import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className=""App"">
      Hello React
    </div>
  );
}

export default App;
```

変更を保存すると、ホットロードされて表示が更新される。

View Code on CodeSandbox:

https://codesandbox.io/embed/w8yrr7?view=Editor+%2B+Preview&module=%2Fsrc%2FApp.js

## Step.2 : 複数のページ。 React Router

公式ページ: https://reactrouter.com/en/main

```shell
npx create-react-app step2
cd step2
npm install react-router-dom
npm start
```

### Step.2-1

`src/index.js` を以下のように変更する

```javascript:src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import {
  createBrowserRouter,
  RouterProvider,
} from ""react-router-dom"";

const router = createBrowserRouter([
  {
    path: ""/"",
    element: <div>This is root page</div>,
  },
]);

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
);
```

保存するとブラウザには `This is root page` と出ているはず。

https://codesandbox.io/embed/p4qtml?view=Editor+%2B+Preview&module=%2Fsrc%2Findex.js

### Step.2-2

複数ページを作る。まずRootページ

```javascript:src/pages/Root.js
const Root = () => {
    return (
        <div id=""sidebar"">
            This is Root page
        </div>
    );
};

export default Root;
```

```javascript:src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import {
  createBrowserRouter,
  RouterProvider,
} from ""react-router-dom"";
import Root from './pages/Root';

const router = createBrowserRouter([
  {
    path: ""/"",
    element: <Root />,
  },
]);

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
);
```

`This is Root page` と出る

Mainページを作る

```javascript:src/pages/Main.js
const Main = () => {
    return (
        <div>
            This is Main page
        </div>
    )
}

export default Main
```

index.js にルートを追加する

```javascript:src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import {
  createBrowserRouter,
  RouterProvider,
} from ""react-router-dom"";
import Root from './pages/Root';
import Main from './pages/Main';

const router = createBrowserRouter([
  {
    path: ""/"",
    element: <Root />,
  },
  {
    path: ""/main"",
    element: <Main />
  }
]);

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <RouterProvider router={router} />
  </React.StrictMode>
);
```

ブラウザで http://localhost:3000 と http://localhost:3000/main で表示が変わることを確認する

https://codesandbox.io/embed/f9rdsh?view=Editor+%2B+Preview&module=%2Fsrc%2Findex.js

## Step.3 : コンポーネントのライフサイクル

### - Vuejs.BeforeMount == React.funcBeforeReturn

React では特定のディレクティブというものはなくて、普通の Javascript で処理する。`return` する前の処理はすべて BeforeMount の処理ということになる。

こんな感じ

```javascript:src/pages/Root.js
const Root = () => {
    // return 前の処理はすべて BeforeMount の処理ということになる
    const mysecretstring = ""aaabbbccc""
    return (
        <div id=""sidebar"">
            This is Root page.<br />
            {/* {} で囲った部分はjavascriptが実行される */}
            My Secret string is {mysecretstring}.
        </div>
    );
};

export default Root;
```

### - Vuejs.(Mounted|Unmounted) == useEffect

例えばサーバのログアウトAPIを呼び出すなど、画面から移動したときになにかしたいとき、ReactではuseEffectを使う。

https://ja.react.dev/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed

```javascript
import { useEffect } from 'react';
import { initConnection,
         connect,
         disconnect } from './chat.js';

export default function ChatRoom() {
  const beforeMount = () => {
    /* マウント前の処理 */
    initConnection();
  }
  useEffect(() => {
    /* マウント後の処理 */
    connect();
    return () => {
        /* アンマウント後の処理。クリーンアップ関数とも呼ばれる */
        disconnect();
    }, []);
  return <h1>Welcome to the chat!</h1>;
}
```

## Step.4 変数のリアクティビティ == useState

https://ja.react.dev/learn/state-a-components-memory

- ローカル変数はレンダー間で保持されない
- ローカル変数の変更は、レンダーをトリガしない

で、`useState` フックを使ってリアクティブな変数を宣言する。

```javascript:src/pages/Root.js
import { useState } from ""react"";
import NumberHolder from ""../ui/NumberHolder"";
const Root = () => {
    // var number = 1;
    const [number, setNumber] = useState(0); // 0 は初期値
    const decrement = () => {
        //number -= 1
        setNumber(number-1)
        console.log(number)
        return(number)
    };
    const increment = () => {
        //number += 1
        setNumber(number+1)
        console.log(number)
        return(number)
    };
    return (
        <div id=""sidebar"">
            <button onClick={decrement}>-</button>
            <NumberHolder number={number}/>
            <button onClick={increment}>+</button>
        </div>
    );
};

export default Root;
```

```javascript:src/ui/NumberHolder.js
const NumberHolder = ({number}) => {
    console.log(""number"", number)
    //const number = obj.number
    return (
        <input name=""aaa"" value={number} onChange={e => console.log(e)}/>
    )
}
export default NumberHolder;
```

View Code on CodeSandbox:

https://codesandbox.io/embed/tk4z2z?view=Editor+%2B+Preview&module=%2Fsrc%2Fpages%2FRoot.js

## Step.5 v-for, v-if

https://ja.react.dev/learn/rendering-lists

Vue.js で言うところの v-for は、Reactではレンダリング時にJSXから呼び出したJavascriptで行うため、専用の句は存在しない。例えば以下のように書く。

```javascript:src/pages/ListExample.js
import ListContainer from ""../ui/ListContainer"";
const ListExample = () => {
  const items = [""aaa"", ""bbb"", ""ccc""];
  return (
    <div id=""list"">
      This is list demo(aka. v-for of vue.js)
      <br />
      <a href=""/if"">v-ifのデモはこちら</a>
      <br />
      <ListContainer items={items} maxChars={100} />
    </div>
  );
};
export default ListExample;
```

```javascript:src/ui/ListContainer.js
import ListItem from ""./ListItem"";
const ListContainer = ({items}) => {
    console.log(""number of items:"", items.length)
    const listItems = items.map(item => {
        return (
            <ListItem listKey={item} listValue={item}/>
        )
    })
    return (
        <ul>
            {listItems}
        </ul>
    )
}
export default ListContainer;
```

```javascript:src/ui/ListItem.js
const ListItem = ({listKey, listValue}) => {
    console.log(listKey, listValue)
    return (
        <li key={listKey}>{listValue}</li>
    )
}
export default ListItem;
```

https://codesandbox.io/embed/kqdfzs?view=Editor+%2B+Preview&module=%2Fsrc%2Fpages%2FListExample.js

https://ja.react.dev/learn/conditional-rendering

同様に v-if もJSXのJavascriptで制御する

```javascript:src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import {
  createBrowserRouter,
  RouterProvider
} from ""react-router-dom"";
import ListExample from ""./pages/ListExample"";
import IfExample from ""./pages/IfExample.js"";

const router = createBrowserRouter([
  {
    path: ""/"",
    element: <ListExample/>,
  },
  {
    path: ""/if"",
    element: <IfExample/>,
  }
])

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <RouterProvider router={router}/>
  </React.StrictMode>
);
```

```javascript:src/pages/IfExample.js
import { useState } from ""react"";
import NumberHolder from ""../ui/NumberHolder"";
import ListContainer from ""../ui/ListContainer"";
const IfExample = () => {
    const items = [
        ""aaa"",
        ""aaabbb"",
        ""aaabbbccc""
    ]
    const [number, setNumber] = useState(10);
    const decrement = () => {
        //number -= 1
        setNumber(number-1)
        console.log(number)
        return(number)
    };
    const increment = () => {
        //number += 1
        setNumber(number+1)
        console.log(number)
        return(number)
    };
    return (
        <div id=""list"">
            <button onClick={decrement}>-</button>
            <NumberHolder number={number}/>
            <button onClick={increment}>+</button>
            文字以上の項目を非表示にする
            <ListContainer items={items} maxChars={number}/>
        </div>
    )
}
export default IfExample;
```

```javascript:src/ui/ListContainer.js
import ListItem from ""./ListItem"";
const ListContainer = ({items, maxChars}) => {
    console.log(""number of items:"", items.length, ""max characters"", maxChars)
    const listItems = items.map(item => {
        return (
            <ListItem listKey={item} listValue={item} maxChars={maxChars}/>
        )
    })
    return (
        <ul>
            {listItems}
        </ul>
    )
}
export default ListContainer;
```

```javascript:src/ui/ListItem.js
const FilteredItem = ({listKey, listValue, maxChars}) => {
    if (listValue.length < maxChars) {
        console.log(""smaller"", listValue, maxChars)
        return (
            <li key={listKey}>{listValue}</li>
        )
    } else {
        console.log(""bigger"", listValue, maxChars)
        return null
    }
}
const ListItem = ({listKey, listValue, maxChars}) => {
    console.log(listKey, listValue, maxChars)
    return (
        <FilteredItem listKey={listKey} listValue={listValue} maxChars={maxChars}/>
    )
}
export default ListItem;
```

https://codesandbox.io/embed/kqdfzs?view=Editor+%2B+Preview&module=%2Fsrc%2Fpages%2Fifexample.js

## Step.6 UIコンポーネントを使う

- Material UI : https://mui.com/
- Ant Design : https://ant.design/

[などなど・・・](https://www.google.com/search?q=react+ui+component+libraries)

## Step.7 パッケージング、ホスティング

Vue.js と同じように `npm run build` するといろいろ難読化されパッケージングされて、`./build` 以下に静的ファイルが作成される。あとはこれを NGINX などでホスティングすればいい。

# さいごに

特にありません
",0,0,0,React,,Vue.js ちょっとかじった俺的 React 勉強ログ,,,1,7,,daredeshow,32,,,,,52237,https://qiita-image-store.s3.amazonaws.com/0/52237/profile-images/1473761238,False,,,,,,
"# はじめに
Windows10, 11のWSLでGUIアプリが動くようになってたのでROS2 Humbleを入れたときの記録。

[公式ドキュメント](https://docs.ros.org/en/humble/index.html)の通りに行かなかった部分があったりしたのでそこらへんを書きます

# インストール
## WSL2 + WSLg
ここら辺を参考に

https://qiita.com/y-tsutsu/items/6bc65c0ce4d20a82a417

```shell
wsl --version
``` 
でwslgのバージョンが表示されてれば使えるようになってるはず

## ROS2 Humble
Installation -> Ubuntu (Debian packages) に書いてあるようにインストール

チュートリアル内で入れるツールで気を付けるのは

* rosdepが存在しない:
    * pipからインストール
* colcon buildで発生するエラー: 
    * setuptoolsのバージョンが高いのが原因で発生するのでバージョンを下げる([参考](https://answers.ros.org/question/396439/setuptoolsdeprecationwarning-setuppy-install-is-deprecated-use-build-and-pip-and-other-standards-based-tools/))
    
```shell
pip install setuptools==58.2.0
```

## Gazebo
最新のignition GazeboをWSL上にインストールしてもうまく動作しないのでGazebo Classicを入れましょう([参考](https://github.com/gazebosim/gz-sim/issues/920))

```shell
sudo apt install ros-humble-gazebo-ros-pkgs
```

## TurtleBot3
[こちら](https://zenn.dev/uchidaryo/articles/ros2-programming-9)を参考にhumbleバージョンをインストール

TurtleBotのシミュレーションエラーが出たがnamespaceが決まってなかったのが原因だった模様([参考](https://answers.gazebosim.org//question/28946/i-was-doing-exercise-22-from-ros2-site-and-got-error-while-trying-to-launch-gazebo-with-turtlebot3/))

```shell
ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py namespace=:=tb3 use_namespace:=True
```
",0,0,0,ROS2,Gazebo,WSL2にROS2 Humbleをインストールしたときの話,,,1,0,,sakurasou,3,,,,,261299,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/261299/8ed1ee22e3b9576328b5856293619ac60cfb07de/x_large.png?1703156546,False,,,,TurtleBot3,WSL2,WSLg
"開発環境などでログを出力したいが
phpiniの設定も変更できないし、ログ出力先も曖昧だし
簡単にログ出したいだけなのに、という場合の簡単ログ出力手順

下記記述をログ出力したい箇所に差し込むだけ。

```php:php
$filename = 'test.log'; // ログファイル出力先

if (!file_exists($filename)) {  // ログファイル存在チェック
    // ログファイルが存在しないとき新規作成
    touch($filename);
}
$fp = fopen($filename, 'a');
$log_output = date(""Y-m-d H:i:s"") . ""\r\n"";
fwrite($fp, $log_output);
fclose($fp);
```

さらに手取り早くログをファイル出力する方法
```php:php
$b = 'テストでログ出力';
file_put_contents('filename.txt', print_r($b, true));
",0,0,0,PHP,debug,手っ取り早くphpでログをファイル出力する方法,"在宅で社内エンジニアをしています。
個人ではアプリ開発も。
欲しいものがなければ作ればいい！",,1,0,,kartis,22,,千葉県柏市若柴,,,2436967,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2436967/profile-images/1684980237,False,soanvalcke,,,log,,
"

## はじめに

どうも。aqualengthです。[^1]

この記事は、[「木 Advent Calendar 2023」](https://adventar.org/calendars/9821)の22日目です。
昨日の記事は[blood](https://atcoder.jp/users/blood)の[C言語で木構造を実装をするときのテクニック](https://qiita.com/aqualength/items/8f857d24eeb74d0ed981)でした。
明日の記事は[31536000さん](https://adventar.org/users/43927)の(ここに記事のタイトルを入力)です。

償却計算量の解析は最悪計算量や平均計算量の解析と比較して難しいと思います。[^2]
そこで、今日は練習としてradix heapの計算量を解析します。

なお、ちゃんとした償却計算量の解析は初めてなので、間違ってたらすみません。(わりとお気持ち寄りの解説なので、数学的には厳密じゃないと思います)


## 目次

- [はじめに](#はじめに)
- [目次](#目次)
- [前提条件](#前提条件)
- [radix-heapの提供する操作](#radix-heapの提供する操作)
- [償却計算量の解析について](#償却計算量の解析について)
- [ポテンシャル関数の定義](#ポテンシャル関数の定義)
- [pushの解析](#pushの解析)
- [decrease-keyの解析](#decrease-keyの解析)
- [popの解析](#popの解析)
- [考察](#考察)
- [ところで](#ところで)

## 前提条件

- この記事で扱う計算量は時間計算量のことを指します。
- radix heapの実装は[3種類ほど](https://dl.acm.org/doi/abs/10.1145/77600.77615)ありますが、今回は[よすぽさんの実装](https://yosupo.hatenablog.com/entry/2015/04/03/224649)を解析します。
- データ数をN,データの最大ビット長をkとします。
- 四則演算およびビット演算は定数時間で完了するものとします。
- bsr()は定数時間で完了するものとします。そういうことにしておいてください[^3]

## radix-heapの提供する操作

以下の3つの操作を提供するものとします。

- push(i,n) … 管理番号をiとする値nをヒープに追加します。
- pop(*i,*n) … 最小値を削除し、その管理番号をi,nの参照先に返します。
- decrease-key(i,n) … 管理番号iの値をnまで減少させます。

具体的な実装は省略します。
[よすぽさんの実装](https://yosupo.hatenablog.com/entry/2015/04/03/224649)を基に解析するので特に問題はありません。

<!---
## 実装



C言語による32ビット実装は以下の通りです。
なお、動作検証はしていません。

``` c
#define MAX 100100 
#define bsr(n,ans) do{ans=0;if(n<=0){ans=-1;n=0;}if(n>>16){ans+=16;n>>=16;}if(n>>8){ans+=8;n>>=8;}if(n>>4){ans+=4;n>>=4;}if(n>>2){ans+=2;n>>=2;}if(n>>1){ans+=1;n>>=1;}}while(0)

#define radixheap_init(heap) do{heap.node[0].value=34;}while(0)
struct heap_node{
	unsigned value;
	unsigned next; //同バケット内の次の要素へのインデックス
	unsigned back; //同バケット内の前の要素へのインデックス
	unsigned idx;
};
typedef struct radix_heap{
	struct heap_node node[34+MAX];
}radixheap;

void init(radixheap *heap){
	heap->node[0].value=34; //ヒープ内のデータ数
	heap->node[0].next=0; //最後に取り出された値
}

void push(radixheap *heap,unsigned i,unsigned x){
	unsigned last=heap->node[0].value;
	
	heap->node[0].value++;
}

```

なお、解析は[よすぽさんの実装](https://yosupo.hatenablog.com/entry/2015/04/03/224649)を基に行うため、C言語での実装は一旦忘れてください。

--->

## 償却計算量の解析について

直感で計算量を理解する以外の方法として、ポテンシャル関数を使った解析がよく使われます。

ポテンシャル関数を使った解析は[別の記事](https://trap.jp/post/883/)を見てもらう方が早いですが、直感で理解する方法を数学的に説明したものと思って大丈夫です。

ポテンシャル関数はおそらく[天から下りてくるもの](https://dictionary.goo.ne.jp/word/%E5%A4%A9%E4%B8%8B%E3%82%8A%E7%9A%84/)であるため、償却計算量の解析は難しいです。

## radix-heapの性質

[よすぽさんの記事](https://yosupo.hatenablog.com/entry/2015/04/03/224649)によるとradix heapにはいくつかの性質が成り立ちます。

解析に必要な部分を抜き出すと

- v[i+1]の値は必ずv[i]の値より大きい
- 再振り分けされたv[i]の値は必ずv[j](j<i)へ行く

です。


加えて

- bsr(x^last)はbsr(x)以下になる

という性質も重要です。

## ポテンシャル関数の定義

バケットvについて、各バケットv[i]に入ってる要素数をn[i]とします。
ポテンシャル関数を
$$
\sum_{i=1}^{33} i \times n[i]
$$
と定義することにします。

## pushの解析

push一回で実際にかかる計算量はbsrを計算してリストに追加するだけです。
bsrの計算もリストへの追加も$O(1)$[^3]なので、合計で$O(1)です。

ポテンシャル関数は最大でbsr(x)==kだけ増加するので、償却計算量は
$O(k)$です。

## decrease-keyの解析

decrease-key一回で実際にかかる計算量はpushと同じく$O(1)$です。

「v[i+1]の値は必ずv[i]の値より大きい」という性質よりポテンシャル関数は増えることはなく、最高でも0しか増加しません。

よって、償却計算量は$O(1)$です。

## popの解析

### v[0]が空でない場合

v[0]内の値は全て最小値なので、v[0]の値を一つ削除すれば良く、実際の計算量は$O(1)$

ポテンシャル関数は増加しないため、償却計算量は$O(1)$です。

### v[0]が空の場合

ここで、v[i]が空でない最小のiを考えます。

v[i]が空でない最小のiを検索するのに$O(i)$
また、v[i]の最小値を求めるのに$O(n[i])$
v[i]の値を全て再配置するのに$O(n[i])$の計算量がかかるため、
実際の計算量は$O(i+n[i])$です。

ポテンシャル関数はv[i]の最小値を削除することでiだけ減少し、
「再振り分けされたv[i]の値は必ずv[j]\(j<i)へ行く」という性質から再配置によって最低でもn[i]以上減少します。
合計でi+n[i]以上のポテンシャルが減少するため、
償却計算量は$O(1)$です。


## 考察
解析の結果、radix heapのpushにかかる計算量は$O(k)$であることが分かりました。
二分ヒープやフィボナッチヒープのpushが$O(1)$[^4]なことを考えるとpushの計算量が意外と大きいことが分かると思います。
蟻本などで紹介されているジェネリックダイクストラ法[^5]だとpushの回数がpopと同程度に大きくなるため、ジェネリックダイクストラ法ではpushに時間のかかるradix heapを活かすことが出来ないことが分かります。[^6]

反面、decrease-keyの計算量は$O(1)$であるため、[decrease-keyを使った(オリジナルに近い)ダイクストラ法](https://rsk0315.hatenablog.com/entry/2019/10/29/151823)では効果を発揮することが期待されます。

popの計算量は$O(1)$と破格の計算量ですが、popの回数はpushの回数以下でなければならないため、全体としてはあまり影響はありません。

## ところで

[~~非負整数Xを10進法で表したときの各桁の数字の和をf(X)とします。~~](https://atcoder.jp/contests/iroha2019-day1/tasks/iroha2019_day1_h)

radix heapってヒープなんですかね。
ヒープって親の値が子の値より小さい木/森って印象なんですけど、これが木かと言われると…いや、確かに閉路のない無向グラフではあるんですけど。
百歩譲ってこれが木だとして、親の値が子の値より小さいという条件を満たしているわけでもない(というか親が定義されてない)のでヒープと言い張るには不適切じゃないかなと思います。


## 追記

ポテンシャル関数を
$$
\sum_{i=1}^{33} i \log{i} \times n[i]
$$
と定義すればbsr()が対数時間でも解析できそうな気がします。

そのときの計算量は
- push … $O(k \log{k})$
- decrease-key … $O(\log{k})$
- pop … $O(1)$
になると思います。[^7]


[^1]: bloodという名前で活動する場合もあります
[^2]: 極限に馴染みのない方であれば平均計算量の方が難しいかもしませんし、素数判定など最悪計算量解析が難しいアルゴリズムもあります。
[^3]: 実際には対数時間かかりますが、対数時間で解析したらうまく計算できませんでした。32bit範囲だと5回の加算で済むため、logは定数です。(たすけて)
[^4]: 二分ヒープの場合は償却計算量ではなく平均計算量で保証されることに注意が必要です。
[^5]: 勝手に命名しました。decrease-keyをpop+pushで代用したようなダイクストラ法のことです。(あるいは、BFSのキューをヒープに変えたようなダイクスラ法とも)
[^6]: [twīt](http://zpdic.ziphil.com/dictionary/fez-ja?enableSuggestions=false&ignoreCase=false&mode=both&orderDirection=ascending&orderMode=unicode&page=0&text=tw%C4%ABt&type=prefix)を検索してみると、ジェネリックダイクストラ法で使用してかえって速度を低下させたという声がちらほらあります。
[^7]: 誰か解析してください。俺は力尽きました
",0,0,0,データ構造,ダイクストラ法,radix heapの計算量解析,"半導体と無線工学をやっている言語オタク。
C言語とHLSL以外ほとんど使えないです。
趣味で音声合成を勉強中。",,0,0,,aqualength,2,,九州,鶴姫 殺月,,2972397,https://pbs.twimg.com/profile_images/1510116310457323525/La5hZwcS_bigger.png,False,hikarinichiwo,https://aqualength-semiconductor.com,,計算量,,
"# はじめに
この記事では、Vonage Video API と Next.js でビデオ通話機能を実装する手順を記載します。

# Vonage Video API とは
Vonage という会社が提供するコミュニケーション向け PaaS のひとつです。

https://developer.vonage.com/en/video/overview?source=video

Video API 以外に Messages API、SMS API などコミュニケーションに関する様々なサービスが提供されています。サービスがたくさんあって便利そうと思う反面、知りたい情報がビデオ通話機能に関するものに限定されているケースでは、ドキュメントの情報量が多く、慣れるまでは必要な情報にたどり着くのが大変だとなと思いました。

また、Vonage Video API の中にも Clien SDK、Server SDK があり、今回は CLIENT SDK の中の Web Client SDK を利用します。
ドキュメントはこちらのページが一番わかりやすかったです。

https://tokbox.com/developer/sdks/js/

# 開発環境
開発環境は以下の通りです。

- Windows11
- VSCode
- TypeScript 4.9.5
- Next.js 14.0.4
- React 18.2.0
- Node.js 20.10.0
- npm 10.2.5
- OpenTok.js 2.26.4

# プロジェクトファイル
以下のコマンドで Next.js のプロジェクトファイルを作成します。
オプションは全てデフォルトの設定にしています。

```powershell
npx create-next-app@latest
```

# Web Client SDK のインストール
以下のコマンドで Web Client SDK (OpenTok.js) をインストールします。

```powershell
npm install --save @opentok/client
```

# 必要情報の取得
Web Client SDK を利用するためには、以下3つの情報を取得する必要があります。

- API Key
- Session ID
- Token

これらの情報は、プロジェクトページから取得できます。

## Vonage Video API のアカウント及びプロジェクト作成
そのためにまずは、Vonage Video API のアカウント及びプロジェクトを作成します。

https://tokbox.com/account

:::note
Vonage Video API 以外のアカウントは、こちらの Vonage のサイトからアカウントを発行するようです。

https://www.vonage.com/

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/318188/4355c7a0-6ba3-3fbd-0c27-622af741f82b.png)

:::

## API Key / Session ID / Token の取得
それぞれ以下の方法で取得できます。

- API Key：プロジェクトページの冒頭に表示されています
- Session ID：Project Tools で **Create Session ID** をクリックすると作成されます
 ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/318188/8b4daefc-1dc3-f48f-80c8-ce4e622560ef.png)

- Token：Project Tools で先ほど作成した Session ID 及びその他必要情報を入力し、 **Create token** をクリックすると作成されます
 ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/318188/49d15fef-911c-0604-de5a-77317e73a19e.png)

これでコーディングの準備ができました。

# コーディング
コーディングで実施している主な処理は、以下の5点です。

1. セッションの初期化
1. 映像音声受信処理
1. 映像音声送信を行うクライアント（publisher）の作成
1. セッションへの接続
1. 映像音声の送信

```page.tsx
""use client"";

import OT from ""@opentok/client"";
import { useEffect } from ""react"";

const API_KEY = ""***"";
const SESSION_ID = ""***"";
const TOKEN = ""***"";

// Handling all of our errors here by alerting them
function handleError(error: any) {
  if (!error) return;
  alert(error.message);
}

function initializeSession() {
  // 1. Initialize session
  const session = OT.initSession(API_KEY, SESSION_ID);

  // 2. Subscribe to a newly created stream
  session.on(""streamCreated"", function (event) {
    session.subscribe(
      event.stream,
      ""subscriber"",
      {
        insertMode: ""append"",
        width: ""100%"",
        height: ""100%"",
      },
      handleError
    );
  });

  // 3. Create a publisher
  const publisher = OT.initPublisher(
    ""publisher"",
    {
      insertMode: ""append"",
      width: ""100%"",
      height: ""100%"",
    },
    handleError
  );

  // 4. Connect to the session
  session.connect(TOKEN, function (error) {
    // 5. If the connection is successful, publish to the session
    if (error) {
      return handleError(error);
    }
    session.publish(publisher, handleError);
  });
}

export default function Home() {
  useEffect(() => {
    initializeSession();
  }, []);

  return <></>;
}

```

# 感想
実運用のためには、もっと考慮しなければならない点があると思いますが、単純なビデオ通話機能（映像音声送受信機能）だけであれば、すぐに実装できました。
他のコミュニケーション向け PaaS と比較してみるのも面白そうです。

# 参照
- [OpenTok.js](https://tokbox.com/developer/sdks/js/)
- [Web Client SDK](https://developer.vonage.com/en/video/client-sdks/web/overview?source=video)
",0,0,0,Web,TypeScript,Vonage Video API + Next.js でビデオ通話機能を実装,"長野県在住Webエンジニア
React, Type Script",,5,5,yasushi-mo,Yasushi-Mo,38,,長野,Yasushi Mo,,318188,https://qiita-image-store.s3.amazonaws.com/0/318188/profile-images/1542757975,False,,,,WebRTC,Next.js,Vonage
"ジャーニーマン( @beajourneyman )です。

今回は「セゾン情報システムズ Advent Calendar 2023」のシーズン2の21日目の記事になります。シーズン2が立ち上がったのに枠が埋まっていなかったので、プロジェクト管理要素＋AWSなテーマで追加エントリーしました。

# テーマは「Amazon Polly音声生成でプロジェクト管理面で工夫したコト」
今年2023年2月のアップデートはPolly会話では衝撃のアップデートがありました。Mizukiの自然言語音声(NTTS)のリリースは発表されず、KazuhaとTomokoがリリースされました。SNSでもMizukiの今後に関する話題をいくつか目にしました。

https://aws.amazon.com/jp/about-aws/whats-new/2023/02/amazon-polly-two-japanese-ntts-voices/

すぐにコンソールで聞いてみて、感動したのを良く覚えています。ちなみに試したのは「あなたのコトが好きです」とかではないです。実運用している長めのプロンプトです。なお、音声生成の実装面については、別のエントリーにまとめているので、良かったらごらんください。都度アップデートするスタイルの備忘録です。

https://qiita.com/beajourneyman/items/047fe1da0411d05e1799

では、「プロジェクト管理面で工夫したコト」本題です。

# 背景ととしての Amazon Polly 音声生成の難しさ
自然言語音声の音声は非常に流暢ではありますが、ビジネスレベルで利用する場合、単純に日本語テキストから生成するだけでは、イントネーションやニュアンス面でクライアント様に納得いただけるレベルの音声生成が難しいのが現状です(自案件実績)。案件対応して実際にAmazon Polly音声を納品された経験がある方はイメージがつくのではないでしょうか？

実情は、上記リンクのQiita版備忘に詳細も書きましたが、SSML(音声合成マークアップ言語)をゴリゴリ書いて非常に細かなチューニングをします。特にお客様の社名やコールセンター名、数字の読み上げ、言葉と言葉の「間」は、毎回何回かのリテイクのご要望をいただくケースが多いです。

際限なく修正要望をお聞きする訳にもいかないので、実際に納品版が確定するまでに想定されるリテークの対象数や回数を意識した見積が必要になります。

# 見積標準を設計して開発
前述のような想定されるケースを踏まえて、いくつかの前提を置いて、見積標準の設計をしました。実際の値は公表しませんが、どんなパラメーターで構成したかをご説明します。

1.音声生成難易度：大・中・小
2.1音声あたりの作成回数上限
3.クライアント様生成確認後にリテークになる割合

です。パラメーターを入れれると自動算出されるワークトートとして実装し、音声生成数と難易度、リテーク想定を入れると自動算出される仕様です。セールス、プリセールス、プロジェクトマネージャなど案件見積をされる方なら、日々呼吸をするようになさっているかと思います。

その他の係数なども簡単に更新できるので、とても重宝しています。また、見積前提条件として、上記想定を記載し、当初想定との大きな乖離があった場合に、ご相談できるよりどころとしても定めました。

# マスタースケジュールを決め進捗可視化ツールを設計して開発
マスタースケジュールは、シンプルに設計工程終了・開発工程開始前までに音声確定する、としました。コールフローの実装など後工程での手戻りを避ける、双方でわかりやすいマイルストーンにするなど良い区切りになっています。また、案件開始直後から、実際に本番稼働する「動くモノ」をご確認いただけるので、好評です。

進捗可視化ツールは、音声一覧をベースに見積前提となっている指標で算出したリテークを含む生成上限に対して現時点で何％に達しているのか、どの音声がOKでどの音声がNGかなどがひと目でわかるワークシートとして設計しました。

クライアント様と完全に同一の情報を用いるコトで、双方が認識合わせしやすく、とても助かりました。完全に見える化されているため、予算想定内であとどれだけ生成(リテーク)できるかも分かり、優先順位もつけやすかったのではと考えています。

# 実案件を通して
進捗可視化ツールに直接改善要望を記載いただけるようにして、テキストでのやり取りをベースにしました。ただ、どうしても口頭で詳細なニュアンスを伝えたいケースもありました。全体の10％ほどです。テキストのみで完結するケースもあります。

実際に運用して実案件の対応をしました。すべて数値として解析可能なので、改善もしやすく満足しています。お役に立てば幸いです。

以上です。
",0,1,0,AWS,プロジェクト管理,Amazon Polly 音声生成でプロジェクト管理面で工夫したコト,"B2Bのオウンドメディアと公式Facebookページの #中の人 (卒業済み)。SE兼PjM。ハンドルネーム時代の名残でデジタルではジャーニーマン(Journeyman)使ってます。技術の流行り廃りによらない普遍的なテーマで書いています→AWS基盤で稼働するシステムの担当になったので書いていきます。

こちらも書いてます→
https://note.com/beajourneyman",,5,23,,beajourneyman,28,,,Journeyman,,155285,https://qiita-image-store.s3.amazonaws.com/0/155285/profile-images/1516394274,False,beajourneyman,https://note.com/beajourneyman,,プロジェクトマネジメント,Polly,
"# はじめに

DynamixelとOpenCRを使ったロボット制御のメモです。Turtlebot3と類似の構成ですが、モーターや電源が異なります。

LinuxPCとRasberryPiを使っていますが、LinuxPCだけでもOKです。RasberryPiでAruduinoIDEを使えなかったため、LinuxPCでArduinoIDEを使ってOpenCRのファームを書き換えました。逆に言えば、ArduinoIDEに関係ないものは、全てRasberryPiでもできます。

# 環境

| 項目 | バージョン |
|-- | -- | 
| Ubuntu|20.04|
|ROS|Noetic|

- LinuxPC (Ubuntu 20.04.6 LTS)：主にArduinoIDEの為に使用
- RasberryPi (Ubuntu 20.04.4 LTS) 
- [OpenCR](https://emanual.robotis.com/docs/en/parts/controller/opencr10_jp/#dynamixel-workbench)
- [Dynamixel PM42-010-S260-R](https://emanual.robotis.com/docs/en/dxl/p/pm42-010-s260-r/)
- 24V電源 (GSユアサ12VDCバッテリー*2)

# 参考
- [DYNAMIXEL Workbench (robotis.com)](https://emanual.robotis.com/docs/en/software/dynamixel/dynamixel_workbench_jp/)
- [DynamixelをROSで動かせるようにした話(1) 環境構築編 #ROS1 - Qiita](https://qiita.com/FAL19/items/e42b4a86ae026bdb46e7)

# 作業手順
## 接続

OpenCRのRS485のコネクタの左右がPM42-010-S260-Rと接続されています。電源ジャックには24VDCが接続されます。USBはLinuxPC、もしくはRasberryPiに接続されます。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/599506/1ece237f-94aa-df4b-a6ed-10b9ad9c9251.png)
※ [OpenCR](https://emanual.robotis.com/docs/en/parts/controller/opencr10_jp/#dynamixel-workbench)

## ROSパッケージをダウンロードする
ROS noeticがすでにインストールされており、catkin_ws 以下で作業する前提です。

```bash
$ mkdir ~/catkin_ws/src/dynamixel
$ cd ~/catkin_ws/src/dynamixel

# 主なパッケージ
$ git clone https://github.com/ROBOTIS-GIT/dynamixel-workbench.git
$ git clone https://github.com/ROBOTIS-GIT/dynamixel-workbench-msgs.git

# 依存パッケージ
$ git clone https://github.com/ROBOTIS-GIT/DynamixelSDK.git
```

## Arduino IDE 
※ LinuxPC上で作業しました。

### Arduino IDE インストール
OpenCRにファームウェアをアップロードするために、ArduinoIDEをダウンロードします。

### USBポート設定
```bash
$ wget https://raw.githubusercontent.com/ROBOTIS-GIT/OpenCR/master/99-opencr-cdc.rules
$ sudo cp ./99-opencr-cdc.rules /etc/udev/rules.d/
$ sudo udevadm control --reload-rules
$ sudo udevadm trigger
```

### コンパイラ設定
```bash
$ sudo apt-get install libncurses5-dev:i386
```
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/599506/f51351ff-d493-e12e-056c-964af64f3f2a.png)
このような画面になるので、OKして次に進みます。

### ArduinoIDE実行
```bash
$ arduino
```
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/599506/7ba2c386-59de-9651-14f0-6078a545f95c.png)
直近でusb_to_dxlを開いていたため、この画面が出ています。

### Arduino IDEへの環境移植
#### 環境設定
上部メニューで [ファイル] → [環境設定] をクリックします。「環境設定」ウィンドウが表示されたら、次のリンクをコピーして「追加のボードマネージャのURL」テキストボックスに貼り付けます。
```
https://raw.githubusercontent.com/ROBOTIS-GIT/OpenCR/master/arduino/opencr_release/package_opencr_index.json
```
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/599506/f9241e71-19c5-2dfd-2072-42d157e88e66.png)

#### ボードマネージャー経由でボードパッケージをインストール
「ツール」→「ボード」→「ボードマネージャー」をクリックします。OpenCRをインストールします。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/599506/c199c3fe-2c34-8bd1-6ac9-145f9f8dd619.png)

OpenCR Board が [ツール] → [Board] のリストにあるかどうかを確認します。これをクリックして OpenCR Board ソースをインポートします。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/599506/ad3674f4-ac0d-304f-dcaf-0caf4f1a7cfb.png)

#### ポート設定
OpenCRとLinuxPCがシリアル接続されている前提です。下記コマンドでttyACM0 として認識していることを確認します。
```bash
$ ls /dev/ttyACM0*
/dev/ttyACM0
```

Arduinoの「ツール」→「ポート」→「/dev/ttyACM0」を選択します。

#### モードマネージャを削除します。
```bash
$ sudo apt-get purge modemmanager
```

### Arduino IDEでOpenCMにusb_to_dxlを書き込む

[ファイル] → [スケッチ例] → [OpenCR] → [10.Etc] → [usb_to_dxl]を開きます。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/599506/93234083-6f95-c292-f099-d6ad5b566888.png)

マイコンボードに書き込みます。
![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/599506/895ee0a3-7b45-8703-cef0-1b59bf387cd6.png)

## 接続の確認 (find_dynamixel)

このノードは全てのIDをそれぞれのBaudrate(9600, 57600, 115200, 1000000, 2000000, 3000000, 4000000)ごとにスキャンし、接続しているDynamixelの数を表示します。
以下では、異なるBaudrateで2つのDynamixelが検出されています。

```bash
$ rosrun dynamixel_workbench_controllers find_dynamixel /dev/ttyACM0
[ INFO] [1702276278.330805730]: Succeed to init(9600)
[ INFO] [1702276278.330854910]: Wait for scanning...
[ INFO] [1702276300.113791468]: Find 0 Dynamixels
[ INFO] [1702276300.155892835]: Succeed to init(57600)
[ INFO] [1702276300.155936602]: Wait for scanning...
[ INFO] [1702276318.156320385]: Find 1 Dynamixels
[ INFO] [1702276318.156378417]: id : 2, model name : PRO-PLUS-M42P-010-S260-R
[ INFO] [1702276318.213621680]: Succeed to init(115200)
[ INFO] [1702276318.213664241]: Wait for scanning...
[ INFO] [1702276335.871239691]: Find 0 Dynamixels
[ INFO] [1702276335.917334827]: Succeed to init(1000000)
[ INFO] [1702276335.917379935]: Wait for scanning...
[ INFO] [1702276353.212068238]: Find 1 Dynamixels
[ INFO] [1702276353.212111676]: id : 1, model name : PRO-PLUS-M42P-010-S260-R
[ INFO] [1702276353.268963791]: Succeed to init(2000000)
[ INFO] [1702276353.268978956]: Wait for scanning...
[ INFO] [1702276370.574371296]: Find 0 Dynamixels
[ INFO] [1702276370.619668935]: Succeed to init(3000000)
[ INFO] [1702276370.619712521]: Wait for scanning...
[ INFO] [1702276387.919237066]: Find 0 Dynamixels
[ INFO] [1702276387.964325078]: Succeed to init(4000000)
[ INFO] [1702276387.964366980]: Wait for scanning...
[ INFO] [1702276405.260781136]: Find 0 Dynamixels
```

Baudrateを変更したい場合は「ファイル」→「スケッチ例」→「OpenCR」→「08.DynamixelWorkbench」→「d_BPS_Change」
冒頭を任意のIDやBaudrateに変更します。
```
	#define BAUDRATE  57600
	#define DXL_ID 2
	#define NEW_BAUDRATE 115200
```

その後、電源リセット、usb_to_dxlを書き直して、同じBaudrateで認識するようになった。
```bash
$ rosrun dynamixel_workbench_controllers find_dynamixel /dev/ttyACM0
[ INFO] [1702353668.641122756]: Succeed to init(9600)
[ INFO] [1702353668.641159667]: Wait for scanning...
[ INFO] [1702353690.424888613]: Find 0 Dynamixels
[ INFO] [1702353690.466194675]: Succeed to init(57600)
[ INFO] [1702353690.466233049]: Wait for scanning...
[ INFO] [1702353708.499108720]: Find 0 Dynamixels
[ INFO] [1702353708.540837247]: Succeed to init(115200)
[ INFO] [1702353708.540853263]: Wait for scanning...
[ INFO] [1702353726.135644295]: Find 2 Dynamixels
[ INFO] [1702353726.135703111]: id : 1, model name : PRO-PLUS-M42P-010-S260-R
[ INFO] [1702353726.135730202]: id : 2, model name : PRO-PLUS-M42P-010-S260-R
[ INFO] [1702353726.207482482]: Succeed to init(1000000)
[ INFO] [1702353726.207547353]: Wait for scanning..
```

## キーボードでDymamixelを動かす

### 設定ファイルの準備
適当にyamlファイルを作成します。
`~\catkin_ws\src\dynamixel\dynamixel-workbench\dynamixel_workbevf nch_controllers\config\my_config.yaml`を作成します。
Operating Modeには1 # VELOCITY_CONTROL_MODEを設定します。

```bash
Motor1:
  ID: 1
  Return_Delay_Time: 0
  Operating_Mode: 1 #  VELOCITY_CONTROL_MODE
  Profile_Acceleration: 0
  Profile_Velocity: 0
Motor2:
  ID: 2
  Return_Delay_Time: 0
  Operating_Mode: 1 #  VELOCITY_CONTROL_MODE
  Profile_Acceleration: 0
  Profile_Velocity: 0
# static const uint8_t CURRENT_CONTROL_MODE                  = 0;
# static const uint8_t VELOCITY_CONTROL_MODE                 = 1;
# static const uint8_t POSITION_CONTROL_MODE                 = 3;
# static const uint8_t EXTENDED_POSITION_CONTROL_MODE        = 4;
# static const uint8_t CURRENT_BASED_POSITION_CONTROL_MODE   = 5;
# static const uint8_t PWM_CONTROL_MODE                      = 16;
# static const uint8_t TORQUE_CONTROL_MODE                   = 100;
# static const uint8_t MULTI_TURN_MODE                       = 101;
```

launchファイル`~/catkin_ws\src\dynamixel\dynamixel-workbench\dynamixel_workbench_controllers\launch\dynamixel_controllers.launch`を編集します。

```
	<launch>
	  <arg name=""usb_port""                default=""/dev/ttyACM0""/>
	  <arg name=""dxl_baud_rate""           default=""115200""/>
	  <arg name=""namespace""               default=""dynamixel_workbench""/>
	  <arg name=""use_moveit""              default=""false""/>
	  <arg name=""use_joint_state""         default=""true""/>
	  <arg name=""use_cmd_vel""             default=""true""/>
	  <param name=""dynamixel_info""          value=""$(find dynamixel_workbench_controllers)/config/my_config.yaml""/>
	  <node name=""$(arg namespace)"" pkg=""dynamixel_workbench_controllers"" type=""dynamixel_workbench_controllers""
	        required=""true"" output=""screen"" args=""$(arg usb_port) $(arg dxl_baud_rate)"">
	    <param name=""use_moveit""              value=""$(arg use_moveit)""/>
	    <param name=""use_joint_states_topic""  value=""$(arg use_joint_state)""/>
	    <param name=""use_cmd_vel_topic""       value=""$(arg use_cmd_vel)""/>
	    <rosparam>
	      publish_period: 0.010
	      dxl_read_period: 0.010
	      dxl_write_period: 0.010
	      mobile_robot_config:                <!--this values will be set when 'use_cmd_vel' is true-->
	        seperation_between_wheels: 0.300  
	        radius_of_wheel: 0.0785           
	    </rosparam>
	  </node>
	</launch>
```
### キーボード操作のPackageのインストールします。

```bash
$ sudo apt-get install ros-noetic-teleop-twist-keyboard
```
参考：[キーボードでロボット操作 - teleop_twist_keyboard - クワマイでもできる (hatenablog.com)](https://kuwamai.hatenablog.com/entry/2019/05/09/200000)

### キーボード操作

ターミナルでコントローラを実行します。
```bash
$ roslaunch dynamixel_workbench_controllers dynamixel_controllers.launch
```

別のターミナルでトピックリストを確認して、cmd_velが存在することを確認します。
```bash
$ rostopic list
/dynamixel_workbench/cmd_vel
/dynamixel_workbench/dynamixel_state
/dynamixel_workbench/joint_states
/dynamixel_workbench/joint_trajectory
/rosout
/rosout_agg
```bash

teleop_twist_keyboard 実行時の引数のcmd_velを上記に設定して、teleop_twist_keyboardを実行します。

```bash
$ rosrun teleop_twist_keyboard teleop_twist_keyboard.py cmd_vel:=/dynamixel_workbench/cmd_vel
```

キーボード操作しながら、別のターミナルでトピックを監視すると、値が変わっていることがわかります。これはgeometry_msgs::Twist型のメッセージです。

```bash
$ rostopic echo /dynamixel_workbench/cmd_vel
linear:
  x: 0.0
  y: 0.0
  z: 0.0
angular:
  x: 0.0
  y: 0.0
  z: 0.0
```

以下は2つのターミナルを並べて動作させている様子です。キーボードを操作すると、モータ動作に加えて、Twist型のメッセージの内容が変化していることがわかります。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/599506/6e681a5e-8bce-96bb-4479-19c6449cd88c.png)

# さいごに

本記事では差動二輪のロボットをROSで動かすために、まずはキーボードで操作できる環境構築のメモを記載しました。
",0,0,0,メモ,ROS,DynamixelをOpenCRとRasberryPiでキーボード操作するまでのメモ,"社畜の割には自由です。
# 投稿内容は私個人の意見であり、所属企業・部門見解とは関係ありません。
# 投稿内容は執筆時点の情報であり、必ずしも最新情報であるとはかぎりません。",,9,7,,kiwsdiv,31,,,,,599506,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/599506/profile-images/1649256441,False,,,,ROS1,,
"## はじめに
こんにちは！ @Keichan_15 です！

<font color=""red""> :santa:**DMM WEBCAMP Advent Calendar 2023** :christmas_tree:</font>の**21日目** を担当させて頂きます！

昨日の20日目は @ytojima さんの[Bootstrap(v4)でScssの機能を使用して角丸を無くしたりする設定](https://toji.tech/bootstrapv4%e3%81%a7scss%e3%81%ae%e6%a9%9f%e8%83%bd%e3%82%92%e4%bd%bf%e7%94%a8%e3%81%97%e3%81%a6%e8%a7%92%e4%b8%b8%e3%82%92%e7%84%a1%e3%81%8f%e3%81%97%e3%81%9f%e3%82%8a%e3%81%99%e3%82%8b%e8%a8%ad/) です！

BootstrapでRailsアプリケーションのレイアウトを整える機会は多いので、必読の内容ですね！

## 本題に入りますよ～

さて私の方はと言いますと、先月**AWS Certified Cloud Practitioner試験**を受験し、721点で合格することができました！ ~~ギリギリを攻め過ぎている~~

![スクリーンショット 2023-12-07 002732.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2798073/78317917-1d16-850e-d6b2-24ee0783a372.png)


実は1度20点ほど足りずに落ちてしまい、今回は負けられないリベンジ戦でした。
勝てて良かった……。:flushed:

合計勉強時間は大体30 ~ 50h程度でした。

そこで今回の記事では、AWS CCP(CLF-C02)試験合格までに行った勉強法、使用した教材等についてまとめてみました。
これから受験を控えている方や興味があるけど勉強法が分からないよ…って方のお力になれると幸いです！:bow:

## 使用教材
まず、個人的にあまり勉強にお金を掛けたくないな…って謎の信念があったので、なるべく3,000円以内で教材費用を抑えたいというのが当初の希望でした。

そんな極限まで金を使わないケチケチ野郎の救世主となったのが、以下3つのコンテンツです。

- **AWS Skill Builder**
- **Udemy**
- **スマホアプリ**

基本的にはこの子達をひたすらぐるぐる周回していました。:writing_hand:

順番に各教材について解説していきますので、気になるモノがあれば是非学習の際に取り入れて頂くことをおススメ致します！

### [AWS Skill Builder](https://aws.amazon.com/jp/training/digital/)

https://aws.amazon.com/jp/training/digital/

まず初めに紹介するのは **AWS Skill Builder** です。

この教材はAWS CCPに限らず、AWS関連の幅広い内容が一部を除き **無料** で公開されています。:relaxed:

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2798073/408dcb83-2ab1-59d4-0a52-41fe88c4c3a6.png)

公式が無料で学習用コンテンツを公開してくれる、、便利な世の中になりましたね。。

勿論、AWS CCP用の学習教材も **無料** で用意されています。
教材名は **AWS Cloud Practitioner Essentials (Japanese) (Na) 日本語実写版** です。

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2798073/aa597a2d-56ec-1f97-fba7-2b90df0f7dfa.png)

教材の内容は主に画像や動画、カラーイラストが用いられていてとても分かりやすいものになっています。

AWSにあまり触れたことが無い方でもスッと理解しやすい教材となっているので、基礎固めには一番良い教材では無いかな…？というのが個人的な感想です。

### [Udemy 【CLF-C02版】この問題だけで合格可能！AWS 認定クラウドプラクティショナー 模擬試験問題集（6回分390問）](https://www.udemy.com/course/aws-4260/)

https://www.udemy.com/course/aws-4260/

言わずと知れた **Udemyの問題集** です！

基本問題が2つ、応用問題が4つの計6つの模擬試験問題が入っています。

私の場合は基本問題を3周、応用問題を2周ずつ解いていました！
応用問題はかなり捻りのある問題が多かったので、基本問題をまずは完璧にこなしていくと良いと思います！

### [スマホアプリ AWS認定 クラウドプラクティショナー模擬試験](https://apps.apple.com/jp/app/aws%E8%AA%8D%E5%AE%9A-%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%BC%E6%A8%A1%E6%93%AC%E8%A9%A6%E9%A8%93/id1509436492)

https://apps.apple.com/jp/app/aws%E8%AA%8D%E5%AE%9A-%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%BC%E6%A8%A1%E6%93%AC%E8%A9%A6%E9%A8%93/id1509436492

最後は **スマホアプリ** です！

個人的にこのアプリ、一番役立ちました…:relaxed:

通勤途中の時間や隙間時間にアプリを開いて問題を解くだけ。
とてもシンプルなのですが、解説もとても丁寧で非常に分かりやすく、問題内容も本番と非常に似たような出題内容だったのでとても役立ちました。

無料版では解ける問題が制限されていますが、有料版は700円台の買い切りシステムとなっているので買って損は無いかなと思います。

## おわりに

いかがでしたでしょうか。

これからAWS Certified Cloud Practitioner試験を受験される方、色々な勉強方法があるので混乱しがちかなと思います！

ただこの3つを基本的にぶん回すとメキメキ知識が付いてくるので、皆さんも良ければこの勉強法を参考にして頂けると幸いです！

明日は @takakou さんの ""Next.jsとmicroCMSでブログ作成のハンズオンを行います。"" です！
お楽しみに！:v:
",0,6,3,AWS,初心者,AWS Certified Cloud Practitioner(CLF-C02)試験 合格体験記,バスケとサウナとプログラミングが好き。一生コードを書いていたい。,,20,17,Keichan15,Keichan_15,19,,Osaka,,,2798073,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2798073/8a1c64908e796c30b21f0c0af75d1f9668acf4f2/large.png?1699508550,False,,,,資格,勉強法,合格体験記
"# ウーマンコミュニケーションとは
ウーマンコミュニケーションとは日常生活に隠れた卑猥な言葉を見つけ出し、指摘する言葉狩りゲームです。私はゲーム実況を見て、このゲームを知ったのですが、ただのクソゲーに見えて意外に深い内容なので、ぜひやってみてください。

![u-mancomyu.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3635555/adc7bb7b-5352-1207-5b46-de433232551b.png)
# プログラムについて
ウーマンコミュニケーションに因んで、今回はNGワードを判定するプログラムをPythonで作りたいと思います。実行環境はGoogle Colaboratoryです。雑な説明になりますが最後まで読んでくれると嬉しいです。
#### 必要ライブラリ等のインストール
```
!pip install requests beautifulsoup4
!pip install pykakasi
```
requests beautifulsoup4はWikipediaから隠語データをスクレイピングする用。pykakasiは漢字とかを変換する用。pykakasiはサービス終了するかもしれないので他の手段も考えた方が良いですね。
#### コード
```
import re
import requests
from bs4 import BeautifulSoup
from pykakasi import kakasi

#　エラーを定義
class ContainNgWordError(Exception):
    def __init__(self, message):
        self.message = message

# NGワードシステム構築
class NgWordSystem:
    def __init__(self):
        self.processed_ng_words = self.process_ng_words()
        self.get_password()
 
    def get_ng_words(self):
        wikipedia_url = ""https://ja.wikipedia.org/wiki/%E6%80%A7%E9%A2%A8%E4%BF%97%E7%94%A8%E8%AA%9E%E4%B8%80%E8%A6%A7"" # このサイトからNGワードを抽出
        ng_words = self.get_wikipedia_terms(wikipedia_url)
        ng_words = ng_words[1:164] # ここまでのワードを使用

        return ng_words

    def process_ng_words(self):
        # NGワードをアルファベット小文字に変換
        self.kakasi = kakasi()
        self.kakasi.setMode('H', 'a')
        self.kakasi.setMode('K', 'a')
        self.kakasi.setMode('J', 'a')

        conv = self.kakasi.getConverter()
        new_ng_words = []
        for word in self.get_ng_words():
            new_ng_words.append(conv.do(word).lower()) 

        # 新しいリストを作成して、括弧で分割して格納
        processed_ng_words = []
        for word in new_ng_words:
            parts = list(filter(None, re.split('[（）、()]', word)))
            processed_ng_words.extend(parts)
        add_ng_list = ['bdsm', 'smsadizumu', '4545', ""0721"", '1919', '810']   # NGワードを追加
        processed_ng_words.extend(add_ng_list)
        processed_ng_words = list(set(processed_ng_words))

        return processed_ng_words

    def get_wikipedia_terms(self, url):
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')

        terms = []
        # 用語一覧が含まれている部分の特定
        term_section = soup.find('div', {'id': 'mw-content-text'})
        # リストアイテムを取得して用語を抽出
        for li in term_section.find_all('li'):
            term = li.get_text(strip=True)
            terms.append(term)

        return terms    
            
    def get_password(self):
        print(""8文字以下でパスワードを設定してください（アルファベット小文字と数字のみ使用可能）"")
        self.password = input()
        self.validate_password()

    def validate_password(self):
        if not re.match(""^[a-z0-9]+$"", self.password):
            print(""パスワードにはアルファベット小文字と数字以外の文字は使用できません。"")
            self.get_password()  # バリデーションエラーがある場合は再度パスワード入力を要求
        elif len(self.password) > 8:
            print(""パスワードは８文字以下でなければなりません。"")
            self.get_password()  # バリデーションエラーがある場合は再度パスワード入力を要求
        else:
            for ng_word in self.processed_ng_words:
                if ng_word in self.password:
                    raise ContainNGwordError(""使用できないワードが入っています。"")
            
            print(""パスワードが受け付けられました。"")

    def detect(self, text):
        # NGワードがあるか探したいテキストをアルファベット小文字に変換
        self.identify() # 設定したパスワードの入力を要求
        self.text = text
        self.text = self.text.replace(""、"", """")
        self.text = self.text.replace(""。"", """")
        self.text = self.text.replace(""！"", """")
        self.text = self.text.replace(""？"", """")

        self.kakasi = kakasi()
        self.kakasi.setMode('H', 'a')
        self.kakasi.setMode('K', 'a')
        self.kakasi.setMode('J', 'a')

        conv = self.kakasi.getConverter()

        # NGワードを探す
        for i in self.processed_ng_words:
            if i in conv.do(self.text) and i != """":
                  print('\033[35m'+f'{i.upper()}'+'\033[0m')   

    def identify(self):
        # 最初に設定したパスワードと一致するか確認
        print(""パスワードを入力してください。"")
        self.identical_password = input()    
        if self.password == self.identical_password:
            print(""パスワードが一致しました。---NGワード検知システム始動---"")
        else:
            print(""パスワードが間違っています。"")
            self.identify()    
```
コードのダウンロードは[github](https://github.com/katsuki0303/projectA)からどうぞ。
# シミュレーション
では実際に実行してみます。
```
# クラスのインスタンス生成時に入力を要求
NgWordSystem = NgWordSystem()
```
クラスを呼び出した時にパスワードを設定するようにプログラムしました。パスワードを正しく設定すると以下のようにパスワードが受け付けられます。（今回はパスワードを「ka」と設定しました。）
![shidou.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3635555/45a6af04-f55a-07d4-7a1c-8aa3794a5d92.png)

パスワードにも卑猥なワードを忍ばせる人もいるかもしれません。その場合、オリジナルに作成したエラーを表示するようにしました。以下では「ka69」と設定しましたが、「69」がNGワードに該当したらしいです。
![エラー例.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3635555/7ecf4283-b78d-ae55-78a4-4fbcc9217ede.png)

次のコードで調べたいテキストをNgWordSystemのメソッドdetectの引数に渡して実行すると、最初に設定したパスワードの入力が求められパスワードを入力すると、どのNGワードが検知されたか表示されます。
```
NgWordSystem.detect(""我慢、このカフェラテは勉強のご褒美にしよう。"")
```
![実行結果.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3635555/e759b9f8-5dee-aecb-a662-34806905aeb4.png)
上手くいきましたね……
# コードの解説・補足
ここでは、簡単にコードの解説や補足をしていく。
まず、クラスインスタンスの生成時に次のコードが動く。
```
def __init__(self):
    self.processed_ng_words = self.process_ng_words()
    self.get_password()
```
具体的に言うと、（１）NGワードのデータの取得から加工、（２）パスワードの設定の要求が行われる。
### (1)NGワードのデータの取得から加工
```
def get_ng_words(self):
    wikipedia_url = ""https://ja.wikipedia.org/wiki/%E6%80%A7%E9%A2%A8%E4%BF%97%E7%94%A8%E8%AA%9E%E4%B8%80%E8%A6%A7"" # このサイトからNGワードを抽出
    ng_words = self.get_wikipedia_terms(wikipedia_url)
    ng_words = ng_words[1:164] # ここまでのワードを使用

    return ng_words

def process_ng_words(self):
    # NGワードをアルファベット小文字に変換
    self.kakasi = kakasi()
    self.kakasi.setMode('H', 'a')
    self.kakasi.setMode('K', 'a')
    self.kakasi.setMode('J', 'a')

    conv = self.kakasi.getConverter()
    new_ng_words = []
    for word in self.get_ng_words():
        new_ng_words.append(conv.do(word).lower()) 

    # 新しいリストを作成して、括弧で分割して格納
    processed_ng_words = []
    for word in new_ng_words:
        parts = list(filter(None, re.split('[（）、()]', word)))
        processed_ng_words.extend(parts)
    add_ng_list = ['bdsm', 'smsadizumu', '4545', ""0721"", '1919', '810']   # NGワードを追加
    processed_ng_words.extend(add_ng_list)
    processed_ng_words = list(set(processed_ng_words))

    return processed_ng_words

def get_wikipedia_terms(self, url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    terms = []
    # 用語一覧が含まれている部分の特定
    term_section = soup.find('div', {'id': 'mw-content-text'})
    # リストアイテムを取得して用語を抽出
    for li in term_section.find_all('li'):
        term = li.get_text(strip=True)
        terms.append(term)

    return terms
```
今回のプログラムを作る上で必要となるNGワードのデータについては[Wikipediaの性風俗用語一覧](https://ja.wikipedia.org/wiki/%E6%80%A7%E9%A2%A8%E4%BF%97%E7%94%A8%E8%AA%9E%E4%B8%80%E8%A6%A7)というページから取り出し、get_wikipedia_termsとget_ng_wordsというメソッドでリストに保管した。そして、そのリストの各要素（NGワード）をprocess_ng_wordsというメソッドでアルファベット小文字に変換した。アルファベット小文字に変換したのはNGワードが含まれているか探す際に同一の文字で比較するためである。コードの解読は参考サイトを参照されたい。
##### processed_ng_words(List)
```
 ['oppai','burusera','yariman','chinchin ','koumon',......., 'fera']
 ```
##### コードを書く際に参考にしたサイト
[・pykakashiについて](https://tomoblog.net/programing/python/jp_convert_rome/)
[・re.split('[（）、()]', word)](https://qiita.com/bassie/items/483579eca617fb466476)
### (2)パスワードの設定の要求
```
def get_password(self):
    print(""8文字以下でパスワードを設定してください（アルファベット小文字と数字のみ使用可能）"")
    self.password = input()
    self.validate_password()

def validate_password(self):
    if not re.match(""^[a-z0-9]+$"", self.password):
        print(""パスワードにはアルファベット小文字と数字以外の文字は使用できません。"")
        self.get_password()  # バリデーションエラーがある場合は再度パスワード入力を要求
    elif len(self.password) > 8:
        print(""パスワードは８文字以下でなければなりません。"")
        self.get_password()  # バリデーションエラーがある場合は再度パスワード入力を要求
    else:
        for ng_word in self.processed_ng_words:
            if ng_word in self.password:
                raise ContainNGwordError(""使用できないワードが入っています。"")
        
        print(""パスワードが受け付けられました。"")
```
パスワードの受取、評価についてはコードの通り。
```
#　エラーを定義
class ContainNgWordError(Exception):
    def __init__(self, message):
        self.message = message
```
エラーの定義に関しては、Exceptionクラス（親クラス）を継承して作ることができる。
##### コードを書く際に参考にしたサイト
[・クラスの書き方について](https://qiita.com/nozomiprogram/items/ac7d480be154564e980c#:~:text=%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%9F%BA%E6%9C%AC%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9%201%20%E4%BE%8B%20%E3%82%AF%E3%83%A9%E3%82%B9%E5%90%8D%E3%80%80%E5%8B%95%E7%89%A9%20...%202%20Python%E3%81%AE%E5%9E%8B%20%23%E3%82%AF%E3%83%A9%E3%82%B9%E5%AE%9A%E7%BE%A9,%E3%83%A1%E3%82%BE%E3%83%83%E3%83%88%28self%29%3A%23%E3%83%A1%E3%82%BE%E3%83%83%E3%83%88%E3%82%92%E5%AE%9A%E7%BE%A9%20print%28%27%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%27%29%20%23%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E4%BD%BF%E3%81%86%20%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%90%8D%3D%E3%82%AF%E3%83%A9%E3%82%B9%E5%90%8D%28%29%23%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92%E4%BD%9C%E3%82%8B%20%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%90%8D.%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%28%29%23%E3%83%A1%E3%82%BE%E3%83%83%E3%83%88%E3%82%92%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99%203%20%E4%BE%8B%E3%82%92%E5%BD%93%E3%81%A6%E3%81%AF%E3%82%81%E3%82%8B%E3%81%A8%20)
[・文字列の検索（NGワードの発見）](https://www.sejuku.net/blog/52207)
### （３）テキストからNGワードの検知
```
def detect(self, text):
    # NGワードがあるか探したいテキストをアルファベット小文字に変換
    self.identify() # 設定したパスワードの入力を要求
    self.text = text
    self.text = self.text.replace(""、"", """")
    self.text = self.text.replace(""。"", """")
    self.text = self.text.replace(""！"", """")
    self.text = self.text.replace(""？"", """")
    
    self.kakasi = kakasi()
    self.kakasi.setMode('H', 'a')
    self.kakasi.setMode('K', 'a')
    self.kakasi.setMode('J', 'a')

    conv = self.kakasi.getConverter()
    
    # NGワードを探す
    for i in self.processed_ng_words:
        if i in conv.do(self.text) and i != """":
              print('\033[35m'+f'{i.upper()}'+'\033[0m')  
```
シミュレーションの例でいうと、
""我慢、このカフェラテは勉強のご褒美にしよう。""
　　　　　　　　↓
""我慢このカフェラテは勉強のご褒美にしよう""
　　　　　　　　↓
""gamankonokaferatehabenkyounogohoubinishiyou""   
と加工され、この中にNGワード[manko, fera]が検知され、NGワードをアルファベット大文字にし、マゼンタ色でprint文で表示する。
##### コードを書く際に参考にしたサイト
[・print文に色を付ける](https://www.nomuramath.com/kv8wr0mp/)
# 最後に
まだまだ機能を追加できそうですが、コード書いてて恥ずかしいなと感じたのでやめました。最後までこんなくだらないブログを読んでくれたあなたが大好きです。それではまた。
",0,0,1,Python,プログラミング,NGワードシステム構築（ウーマンコミュニケーション）,やめたい生,,0,1,,ka2ki2004,2,,,,国際信州大学,3635555,https://lh3.googleusercontent.com/a/ACg8ocLsx47_ze7IqGPeQeizZY1M2qDkI13w1-7Df_Nf0oEy=s96-c,False,,,,クラス,システム開発,プログラミング初心者
"
In the speedy domain of present day business, development isn’t simply a desire, yet a need. As undertakings advance, so do their functional requests. This is where Business Central ERP steps in as a groundbreaking power, pushing organizations towards unrivaled effectiveness and achievement.

 

 

Uncovering the Force of Business Focal ERP
 

 

Smoothing out Activities with Microsoft Business Focal ERP
 

 

Microsoft Business Central ERP is an extensive undertaking asset arranging arrangement tailored for dynamic and developing organizations. It serves as the central nervous system of operations, integrating financials, sales, services, and operations seamlessly. This unified platform enables organizations to make informed decisions, drive productivity, and respond quickly to market demands.

 

 

Lifting Productivity with ERP Elements 365 Business Focal
 

 

At the core of Business Central ERP lies the Elements 365 suite, a robust array of applications designed to enhance every aspect of business operations. From inventory management to customer relationship management, ERP Dynamics 365 Business Central organizes everything with finesse. It provides a 360-degree view of your enterprise, enabling you to streamline processes and drive efficiency.

 

 

Achieving Collaboration with Microsoft Elements 365 Business Focal ERP
 

 

The true power of any ERP lies in its ability to foster collaboration and communication across departments. Microsoft Dynamics 365 Business Central ERP achieves this seamlessly. It breaks down silos, ensuring that every team member has access to real-time data and insights. This not only fosters a culture of informed navigation but also fuels innovation and agility.

 

 

Why Pick Business Focal ERP?
 



1.Versatility Customized to Your Aspirations



 

 One of the standout features of Business Central ERP is its flexibility. As your enterprise grows, so can your ERP system. It adapts to your evolving needs, ensuring that you’re never held back by technological constraints.

 

 

2. Customization for a Tailored Experience

 

 

No two businesses are identical, and Business Central ERP recognizes this. It offers a high degree of customization, allowing you to shape the system to fit your unique workflows and requirements. This level of flexibility is a distinct advantage in ensuring that the ERP aligns perfectly with your business objectives.

 

 

3. Future-Sealing Your Endeavor

 

 

In a rapidly changing business landscape, adaptability is crucial. Business Central ERP future-proofs your enterprise by staying ahead of industry trends and technological advancements. This ensures that you’re always prepared to navigate the challenges and opportunities that lie ahead.

 

 

Dominating the Opposition
 

 

In a competitive landscape, staying ahead is critical. With Microsoft Dynamics 365 Business Central ERP, you’re not just keeping pace; you’re setting the standard. By leveraging cutting-edge technology and a holistic approach to enterprise management, you’re poised for sustained growth and success.

 

 

Why Do You Need a Microsoft Elements ERP Solution?
 

 

In today’s dynamic business environment, having a robust and resilient ERP solution is no longer a luxury, but a fundamental necessity. Here are compelling reasons why your enterprise needs a Microsoft Elements ERP:

https://sqitconsulting.com/erp-software-dubai/
",0,0,0,Microsoft,Business,Scaling Achievement: How Business Focal ERP Enables Developing Ventures,,,1,0,,consultingsqit,2,,,,,3658609,https://lh3.googleusercontent.com/a/ACg8ocI5pkzxyqCaY0c2rjoVilDLMmx9DenKQWkYSLQ0uKL8oms=s96-c,False,,,,Dynamics365,ERP,
"1. **Introduction**
    - Brief definition of iCal CapCut templates
    - Importance in content creation

2. **Understanding iCal CapCut Templates**
    - Explanation of iCal CapCut as a video editing tool
    - Overview of templates and their role

3. **Advantages of Using iCal CapCut Templates**
    - Time-saving benefits
    - Consistency in visual appeal
    - Customization options

4. **How to Access and Implement iCal CapCut Templates**
    - Step-by-step guide to accessing templates
    - Importing templates into CapCut
    - Customizing templates for personal use

5. **Popular iCal CapCut Template Categories**
    - Exploring different template genres
    - Choosing the right template for your content

6. **Creating Unique Content with iCal CapCut Templates**
    - Personalizing templates for originality
    - Adding personal touches to stand out

7. **Tips and Tricks for Optimizing iCal CapCut Templates**
    - Leveraging advanced features
    - Combining multiple templates for a cohesive look

8. **Ensuring SEO-Friendly Video Content**
    - Importance of SEO in video content
    - Optimizing video titles, descriptions, and tags

9. **Case Studies: Successful Content with iCal CapCut Templates**
    - Showcasing examples of well-executed projects
    - Analyzing the impact of using templates

10. **Common Challenges and Solutions**
    - Addressing potential issues in template usage
    - Providing solutions for a smoother experience

11. **Future Trends in iCal CapCut Templates**
    - Predicting advancements in template design
    - Staying updated with the latest features

12. **Community Engagement and Sharing**
    - Joining iCal CapCut communities
    - Sharing experiences and learning from others

13. **Exploring Alternatives to iCal CapCut Templates**
    - Brief overview of other video editing tools
    - Comparing template features

14. **Conclusion**
    - Summarizing the benefits of iCal CapCut templates
    - Encouraging readers to explore and experiment

15. **FAQs**
    - Frequently asked questions about iCal CapCut templates

**Introduction**

In the dynamic world of content creation, video editing tools play a crucial role in transforming ideas into visually appealing masterpieces. One such tool that has gained popularity is iCal CapCut, and within this platform, the use of templates has become a game-changer for content creators.

**Understanding iCal CapCut Templates**

iCal CapCut stands out as a user-friendly and versatile video editing application. At its core, iCal CapCut templates serve as pre-designed layouts that users can apply to their videos, streamlining the editing process and enhancing the visual aesthetics.

**Advantages of Using iCal CapCut Templates**

The allure of iCal CapCut templates lies in their ability to save time and maintain consistency in the overall look of videos. Content creators appreciate the ease with which templates can be customized to align with their brand or personal style, offering a perfect balance between efficiency and creativity.

**How to Access and Implement iCal CapCut Templates**

Getting started with iCal CapCut templates is a breeze. Users can access a variety of templates directly within the application, import them seamlessly, and customize them according to their preferences. This user-friendly process ensures that even beginners can harness the power of templates to elevate their content.

**Popular iCal CapCut Template Categories**

Diving into the world of iCal CapCut templates reveals a diverse array of options catering to various content genres. From vlogs to tutorials and beyond, users can explore templates designed to suit their specific needs, adding an extra layer of engagement to their videos.

**Creating Unique Content with iCal CapCut Templates**

While templates provide a solid foundation, the key to standing out lies in personalization. Content creators can infuse their unique style into templates, ensuring that the end result is not only visually appealing but also reflective of their individuality.

**Tips and Tricks for Optimizing iCal CapCut Templates**

For those looking to take their editing skills to the next level, iCal CapCut offers advanced features that can be seamlessly integrated into templates. Combining multiple templates and experimenting with various elements opens up a world of creative possibilities.

**Ensuring SEO-Friendly Video Content**

In an era dominated by online visibility, it's essential to optimize video content for search engines. Content creators using iCal CapCut can enhance their SEO efforts by crafting compelling titles, detailed descriptions, and relevant tags, ensuring their creations reach a wider audience.

**Case Studies: Successful Content with iCal CapCut Templates**

To illustrate the impact of iCal CapCut templates, let's explore a few case studies. From increased viewer engagement to a boost in subscribers, these examples showcase the tangible benefits of leveraging templates effectively.

**Common Challenges and Solutions**

While iCal CapCut templates offer a streamlined editing process, users may encounter challenges along the way. This section addresses common issues and provides practical solutions, ensuring a smoother experience for all creators.

**Future Trends in iCal CapCut Templates**

As technology evolves, so do design trends. Looking ahead, we can anticipate exciting advancements in iCal CapCut templates, with features that push the boundaries of creativity. Staying informed about these trends ensures that content creators remain at the forefront of innovation.

**Community Engagement and Sharing**

Joining iCal CapCut communities opens up opportunities for collaboration, learning, and sharing experiences. Engaging with fellow creators fosters a sense of community and provides a platform for valuable insights and feedback.

**Exploring Alternatives to iCal CapCut Templates**

While iCal CapCut is a powerful tool, it's always worth exploring alternatives to find the best fit for individual preferences. This section briefly introduces other video editing tools and compares their template features.

**Conclusion**

In conclusion, iCal CapCut templates are a valuable asset for content creators seeking efficiency and creativity in their video editing journey. From time-saving benefits to the freedom of customization, these templates empower users to bring their visions to life with ease. As you embark on your editing adventure, embrace the possibilities that iCal CapCut templates offer and watch your content soar to new heights.

**FAQs**

1. **Q: Are iCal CapCut templates suitable for beginners?**
   - A: Absolutely! iCal CapCut templates are designed to be user-friendly, making them perfect for beginners who want to enhance their videos effortlessly.

2. **Q: Can I use iCal CapCut templates for different types of content?**
   - A: Yes, iCal CapCut offers a variety of templates catering to different genres, ensuring versatility for content creators.

3. **Q: How frequently are new templates added to iCal CapCut?**
   - A: iCal CapCut regularly updates its template library, providing users with fresh options to explore and use in their projects.

4. **Q: Can I customize iCal CapCut templates to match my brand's aesthetic?**
   - A: Absolutely! iCal CapCut allows extensive customization, enabling users to align templates with their brand or personal style seamlessly.

5. **Q: Are there any hidden costs associated with using iCal CapCut templates?**
   - A

: No, iCal CapCut templates are typically included in the application, and users can access a wide range of them without incurring additional charges.

**Get Access Now: [iCal CapCut Template](https://capcutapkapp.com/ical-capcut-template/)**
",0,0,0,iOS,"capcut,",ICAL TEMPLATE CAPCUT,"I am a passionate blogger, SEO Expert, and Digital marketer.",,1,0,,madiayaqub015,1,,,Madia Yaqub,capcutapkapp,3658898,https://lh3.googleusercontent.com/a/ACg8ocJ0rw8fcz5RuQh5qIJE5XYxk9KSEi2MTlq_cW2PKKpk=s96-c,False,,,,"icaL,",,
"# 最初に
VisualStudioは正直、配色テーマが少なく感じてしまいます。  
そのため、配色テーマの多いVSCodeから取り込んでみましょう!
ただし、**VisualStudio2022**でないとできません。

## その1.GitHubからツールをダウンロード
Microsoftが公開しているGitHubのページからツールをダウンロードしましょう。
https://github.com/microsoft/theme-converter-for-vs
ダウンロードしたら展開し、中にあるThemeConverter.slnをVisualStudioで開きましょう。

:::note warn
.NET6がインストールされていないとビルドできません。
:::

## その2.ThemeConverterをビルドする。
ThemeConverterをビルドします。

:::note warn
エラーが出たり、全くビルドが進まない場合は、Nugetのパッケージの更新をしましょう。
:::

## その3.VSCodeで配色テーマをjsoncファイルに出力する。
VSCodeを開き、出力したい配色テーマをVSCode内のテーマに設定します。
そうしたら、コマンドパレット(Ctrl+Shift+P)を表示し、「theme」と入力し、「開発者:現在の設定から配色テーマを生成する」を選択します。すると、現在の配色テーマがjsoncファイルに変換され、VSCode内で表示されるので、わかりやすい場所に保存します。
![wsderftgyhytredqa.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3578126/73ed3f75-0d8a-7646-ad09-2b15f16594ae.png)

## その4.ThemeConverterでjsoncファイルをVisualStudioに書き込む
まず、コマンドプロンプト(CMD)を管理者権限で開き、ビルドしたThemeConverterのフォルダに移動します。
そうしたら以下のコマンドを実行します。
```bat
ThemeConverter.exe -i ""テーマのjsonファイルのパス"" -t ""VisualStudioのインストールパス""
```
VisualStudioのインストールパスは
```
C:\Program Files\Microsoft Visual Studio\2022\Community
```
にあります。

![cmd.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3578126/dda65645-e56d-7efe-60e9-ea4a53f8ec3e.png)

:::note
Communityの表記はインストールされているものに合わせて変更してください。
:::

## その5.反映させる
正常に完了すると、VisualStudioが開くので、
**ツール(T)->テーマ(T)->保存したJsoncファイル名**
で反映させます。
",0,0,0,VisualStudio,テーマ,【VisualStudio】VSCodeから配色テーマを取り込むには?,,,1,0,,shonosuke1309,1,,,,,3578126,https://lh3.googleusercontent.com/a/ACg8ocKmLmDkxdvrKy99p0KfKt30U7dp8aV1nUdAAl53t84v-A=s96-c,False,,,,VSCode,,
"# はじめに
皆さん、キーボードはどういった物を使用してますか？
最近ではHHKBやWooting 60HEなどが人気ですね、キーボードは現代の万年筆などと呼ばれるくらい現代人には欠かせないものとなっており、年々新しいモデルが出ています。

そんな現代の万年筆を自作して自分好みのキーボードを作ろうという界隈があります、それが自作キーボード界隈です。
自作キーボードとはいっても基盤などから作成するわけではなく（基盤やファームウェアから自作する猛者もいますが...）、作成用のキットが売っているため、そこまで作成のハードルは高くありません。

今回はキーボードを作成する流れを軽く紹介させていただきます。
キーボードってこんな感じで作るんだ～くらいの軽い気持ち見ていただければと思います。

# 今回作成するキーボード

今回作成するキーボードは白金ラボさんが出しているkeyball39というモデルで、少し前に某ガジェット系YouTuberが紹介した影響で品薄でしたが、最近になってようやく手に入るようになってきたためこちらを作成します。
このキーボードは分割キーボードのためデスクの真ん中のスペースを広く使える点や、キーボードにトラックボールがついているため、マウスに手を伸ばす必要なく操作することができるという画期的なキーボードです。

![IMG_0375.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1880994/060ebdd8-9e11-f339-6bfc-abb0ec7917ca.jpeg)


# 作成に当たって用意したもの
### はんだごて


### 作成キット
[keyball39](https://shop.yushakobo.jp/products/5357)

### コントローラーボード
キーボードの脳みそに当たる部分、ほとんどの作成キッドには同梱されていますが、今回は同封されていなかったため別途購入

### キースイッチ

今回はamazonで安かった赤軸のキースイッチを使用します。

キースイッチは赤軸、青軸、茶軸などメーカーによってさまざまな種類があります、作成する際には自分に合ったキースイッチを選んで下さい。
自作キーボードショップの[遊舎工房](https://yushakobo.jp/)さんでは、実際にいろいろなメーカーのキースイッチを実際に触って確認することができるので、パーツを揃える前に店舗へ行って実際に触ってみるのもいいですね。

### キーキャップ
こちらもamazonで購入

### ケース
基本的には作成キットに保護プレートが入っているので必要ありませんが、今回ちょっと見た目をよくしたかったので、3Dプリンターで作られたkeyball39用のものをメルカリで購入

# いざ作成！
作成の流れは以下の通り
１．基盤のはんだ付け
２．ファームウェアの書き込み
３．組み立て
４．配列の書き換え

## １．基盤のはんだ付け
自分はいつもここで苦戦してます、見た感じいい感じにはんだ付けされていると思っていても、うまくはんだがうまくのっておらず、キーを認識しないことがほぼ毎回あります。
（はんだ付け前の写真を撮るのを忘れてました...すみません）
![IMG_0365.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1880994/9920a6c0-8c9c-f54e-efaa-e8a126f7791d.jpeg)


## ２．ファームウェアの書き込み
コントローラーボードにキーボードとして動作させるためにファームウェアの書き込みを行います。
購入したキットであればすでにファームウェアが用意されているのでREMAPというサイト（キットの説明書もしくは購入サイトにリンクが掲載されています）にアクセスして書き込んでいきます。

![スクリーンショット (180).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1880994/33b1b79d-49d2-a919-303c-430c244b0b29.png)

無事書き込み完了！

![スクリーンショット (182).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1880994/e3bca821-6635-1446-9ac2-3b1b7ad4f521.png)


ファームウェアの書き込みが終わったら、はんだ付けがうまくいっているかテストしてみます
REMAPのTest Matrix modeを使いキースイッチの部分にピンセットを当て通電しているかチェックします。

基盤をパソコンにつないだ状態でピンセットを表面の銀色の部分に当てると...
![IMG_0368.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1880994/1b1e250d-a577-32a2-d862-4fea4607b6cd.jpeg)

うまく通電していれば下の画像のようにピンセットを当てた部分が青色になる
![スクリーンショット (188).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1880994/49230007-bdb8-7f66-12f1-6772329ec183.png)

全てのキーを確認したところ、いつもなら何個か通電しない部分があるのですが、今回はうまくいったようですべて通電しました！
全てのキーの通電を確認したのでキーボードの組み立てに移ります

## ３．組み立て
キースイッチや外装を組み立てます

## ４．キーマップの書き換え
先ほどのREMAPを使ってキーマップ（キーの配列）を変えていきます。
今回のキーマップはこんな感じ

ベースとなるキーマップ
![スクリーンショット (191).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1880994/9ed44c8d-469c-27b1-b37d-910ac617920b.png)

TGキーを1回押したときの切り替わるレイヤー
![スクリーンショット (192).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1880994/335b5fe2-0eb4-c60e-6ef6-5fa520ae7e79.png)

スペースキーを長押ししたときに切り替わるレイヤー
![スクリーンショット (193).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1880994/81a18a9c-654b-76a5-171c-b08a485470fa.png)

エンターキーを長押ししたときに切り替わるレイヤー
![スクリーンショット (194).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1880994/0fc6d042-86e0-e7f1-ed13-627212ee6d84.png)

自作キーボードではレイヤー切り替え方を設定することができ、指定のキーを押すごとにレイヤーの切り替えを行ったり（例：TGキーを1回押すとレイヤー1にもう一度押すとレイヤー０に戻る）、長押ししている間だけレイヤーの切り替わるなど様々な切り替え設定できます。

## 最後に
キーボード作成の大まかな流れは理解していただけましたでしょうか？
説明が下手でわかりにくい部分も多かったと思います、もし興味のある方いらっしゃいましたら、ぜひお声がけください。
今回この記事を通して少しでも自作キーボードに興味を持っていただけたら幸いです。

では、良いキーボードライフを！
",0,0,0,自作キーボード,,自作キーボードのお話,,,0,0,,takukai0605,1,,,,,1880994,https://lh3.googleusercontent.com/a-/AOh14Ghk7vJs1qJbyLIWbrFpjODbXxn7LopPH8tgpSzAeA=s50,False,,,,,,
"[UdonTech Advent Calendar 2023](https://qiita.com/advent-calendar/2023/udontech)の4日目です。

2023年8月5日から9月2日にかけて行われた[「商店街ゲームジャム 2023 in 香川」](https://sanuki-gamen.connpass.com/event/289885/)という香川県高松市瓦町のスイーツカフェ[「三びきの子ぶた」](https://sanbiki-no-kobuta.com/)さんを題材にしたゲームジャムイベントに参加しましたので内容を紹介します。

参考ページ:

https://takamatsu.keizai.biz/headline/586/

https://web.anabuki-college.net/news/22087/

# 概要

約1ヶ月間のゲームジャムでした。初日に参加者で即席でチームを作って「三びきの子ぶた」さんを題材にゲームの企画を考え、約1ヶ月かけてゲームを作るという感じでした。

8月5日に始まり、[9月2日に成果発表会](https://sanuki-gamen.connpass.com/event/293229/)がありました。その後11月26日に商店街で開催されるゲームのお祭り[「Sanuki X Game 2023」](https://www.showxguys.org/)にゲームジャム作品が出展され、審査員投票・一般投票をもとに最も得票が多かった作品が「SXG大賞」という賞と豪華賞品を貰えるという内容でした。

私が参加したチームは、見事「SXG大賞」を獲得することができました！賞品としてチームに対してメロン1玉と、メンバーそれぞれに対してSteamギフトカード2,000円分が貰えました✨

私のチームの作品はunityroomの以下のページで遊べます。お腹を空かせたモンスターにサンドイッチを振る舞うハートフルシューティングゲームです。

https://unityroom.com/games/shotengaigamejam2023teamd0902

ソース:

https://github.com/k-mitani/ShotengaiGameJam2023TeamDPrototype0902

# イベントの流れ

##  1日目 店舗見学・アイデア出し・チーム結成・アイデア発表・交流会（8月5日）

まず実際の店舗を見学させてもらいました。店内の雰囲気を把握しつつ、内装、メニュー、商品の陳列などなどゲームの素材になりそうなものを写真に撮ったりしました。

その後、参加者同士でアイデア出しを行いました。いくつかのグループに分かれて「ワールドカフェ」という形式でアイデア出しを行いました。活発にアイデアが出てきて、色々なグループのアイデアを交換することもできて、すごく良い仕組みだなと思いました。

その後、チームが結成されて、アイデア発表が行われ、最後には参加者同士の交流会が行われました。

## 2日目 ゲーム開発開始

本格的にゲームの開発が始まりました。といっても約1ヶ月間あるので2日目はまったりムードで進行していきました。一日の最後に各チームの現時点での進捗や今後の予定の発表があってお開きとなりました。

## 3日目～成果発表会まで

3日目からは主にオンライン（Discord）で、チャットやボイスチャットをしながら開発が進んでいきました。

チームの中で私は主にプログラミングを担当しました。せっかくなのでどんなところに力を入れたか紹介します。

### ボスキャラの実装

![動画2.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2952672/51c358c8-ee3a-23ea-80e4-3c9917e25eb9.gif)

該当ソース:

https://github.com/k-mitani/ShotengaiGameJam2023TeamDPrototype0902/tree/main/Assets/k-mitani/Prototype/KingKobuta

プレーヤーの位置をもとに動く頭、決められた位置を巡回する頭、他の頭から離れるように動く頭などを実装しました。


### ランキング画面・五十音表

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2952672/60f49a8b-4d9c-6798-a1be-520d37547a14.png)

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2952672/430acca0-6a8a-ad78-6cf2-5a9834027eba.png)

該当ソース:

https://github.com/k-mitani/ShotengaiGameJam2023TeamDPrototype0902/blob/main/Assets/k-mitani/StageClear/StageClearSceneManager.cs

スコアアタックで盛り上がったらいいなと思って作りました。ゲームパッドでも一通り遊べるように五十音表も作りました。

ランキング機能は以下の記事を参考にニフクラ mobile backendを使って実装しました。

https://blog.naichilab.com/entry/webgl-simple-ranking

（後にニフクラ mobile backendのサービス終了が発表され、ランキング機能をAWSへ移行する羽目になるのですが、それはまた[別のお話](https://qiita.com/k-mitani/items/5216a7806c2ccbd28791)...）


### タイトル画面でのデモ動作

![動画.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2952672/5ab7b97b-0c35-0796-2453-0d4664117634.gif)

該当ソース:

https://github.com/k-mitani/ShotengaiGameJam2023TeamDPrototype0902/blob/9f7a9e3cfcfbae423acc7b1d324fce7e6e50ba79/Assets/k-mitani/OtherScenes/TitleSceneManager.cs#L79C32-L79C32

タイトル画面で放置していると、自動でプレーヤーが動いて敵を倒していく機能を実装しました。試遊のときに目に付きやすいかなと思って作りました。


### AI作曲ツールの導入

私のチームにはサウンド担当がいなかったので、AudioCraft Plus（MusicGen）というツールを使ってAIにBGMを作曲してもらいました。以下の記事を参考にしました。

https://note.com/hamachi_jp/n/ncbb1def286b5

ちゃんとプロンプトで指定した感じの曲を作ってくれてかなり良かったです。

作った曲は以下にあります。

https://github.com/k-mitani/ShotengaiGameJam2023TeamDPrototype0902/tree/main/Assets/k-mitani/%E3%82%B5%E3%82%A6%E3%83%B3%E3%83%89/BGM

紹介は以上です。


## 成果発表会 (9月2日)

https://takamatsu.keizai.biz/tv/1204/

ゲームジャム開始から約1ヶ月後の9月2日に成果発表会がありました。各チームの発表を聞いて、実際にゲームを試遊しました。どのチームもいい感じにゲームができていました👏


## ブラッシュアップ（9月～11月）

11月26日の「Sanuki X Game 2023」出展に向けて、必要に応じてゲームのブラッシュアップを行っていきました。

私のチームでは、試遊会で遊んでもらってみてボスキャラが強すぎたので難易度調整を行ったり、ボーナスステージを追加したりしました。


## Sanuki X Game 2023出展（11月26日）

https://takamatsu.keizai.biz/tv/1217/

https://news.ksb.co.jp/article/15075275

満を持して11月26日に、地元のゲームのお祭り「Sanuki X Game 2023」に作品を出展しました。

私はあいにく別のブースの出展があったので商店街ゲームジャム作品の出展には立ち会えなかったのですが、同じチームの学生さん達がブース運営をしてくれました。ありがとうございます🙏

当日は多くの参加者、特に家族連れの方にゲームを遊んでもらえたようです。

お祭りが終わった後、審査員投票・一般投票の結果、一番得票が多かったということでうちのチームの作品が見事「SXG大賞」に選ばれました！学生さん達がブース運営を頑張ってくれたことや、キャッチーでポップなドット絵や、オーソドックスでとっつきやすいゲーム性あたりが受賞の主な要因かなと思います。

長めのゲームジャムで、色々要素を盛りだくさん作っていって大変でしたが、学生さん達と一緒にゲーム作りを進めて、最終的に大賞まで取れて、とても楽しく充実したイベントでした。

めでたしめでたし😋

![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2952672/89908cda-e4d2-2b4d-1a94-7cd73c1980cc.png)
",0,0,0,Unity,,商店街のゲームジャムイベントでシューティングゲームを作りました,,,0,0,k-mitani,k-mitani,7,,,,,2952672,https://avatars.githubusercontent.com/u/9858452?v=4,False,,,,,,
"Microsoft Excel は、重要なデータを管理および保存するために、多数の大規模組織や個人ユーザーによって広く利用されています。ただし、Excel シートがデータや連絡先に安全にアクセスしたり、Android、iPhone、Outlook などの他のプラットフォームに安全にアクセスしたり、データや連絡先を転送したりできない場合があります。 Excel ファイルはすべてのプラットフォームでサポートされているわけではないため、.MS Excel には連絡先を直接インポートするためのプログラムやユーティリティが組み込まれていません。Excel の連絡先を他のプラットフォームに転送するには、ユーザーは連絡先リストを Excel から vCard に変換する必要があります。 .vcf ファイル。このブログでは、Excel ファイルを使用可能な .vcf 形式に変換するための貴重なテクニックを提供します。

vCard とその利点についての紹介

vCard (VCF) は、ユーザーが電子メール メッセージやインスタント メッセージングなど、インターネット上で安全かつ信頼性の高い方法で連絡先情報を作成、保存、共有できるようにするファイル形式です。

  vCard ファイル形式には、名前、電話番号、住所、写真、電子メール アドレス、URL、ロゴなどを含む、包括的なプロフィールおよび連絡先データが含まれています。 デバイス、電子メール クライアント、電子メール サービス、さまざまなクラウド プラットフォームにわたって広くサポートされています。

連絡先リストを Excel から vCard に変換するには、次の手順に従います。

手動方法を使用して Excel 連絡先を vCard ファイル形式に変換する手順は、3 つの部分で構成されます。


     Excel から CSV への移行:

• 連絡先を含む Excel ファイルを Microsoft Excel で開きます。
• [ファイル]タブをクリックし、[名前を付けて保存]を選択します。
• ファイル形式として「CSV (カンマ区切り)」を選択します。
• CSV ファイルを保存する場所を指定し、「保存」をクリックします。
• ダイアログ ボックスが表示される場合があります。[OK] をクリックして、アクティブなシートのみが保存されることを確認します。

     CSV ファイル経由で連絡先をインポートします。

• ブラウザで Google コンタクト Web サイトを開きます。
• まだ Google アカウントにサインインしていない場合は、サインインします。
• 左側のメニューの「インポート」ボタンをクリックします。
• [ファイルを選択] ボタンをクリックし、前の手順で保存した CSV ファイルを選択します。
• [インポート] ボタンをクリックしてインポート プロセスを開始します。
• Google コンタクトは CSV ファイルを処理し、連絡先をアカウントにインポートします。

     連絡先を vCard ファイルにエクスポートします。

• Google コンタクト Web サイトにアクセスし、Google アカウントにサインインします。
• 名前の横にあるボックスをチェックして、エクスポートする連絡先を選択します。
• 上部の「詳細」ボタンをクリックし、「エクスポート」を選択します。
• vCard 形式を選択し、[エクスポート] ボタンをクリックします。
• vCard ファイルを保存する場所を指定し、「保存」をクリックします。
• Google コンタクトは、選択した連絡先を vCard ファイルにエクスポートします。このファイルは、vCard 形式をサポートする他のアプリケーションやデバイスで使用できます。

手動による方法がすべてのユーザーに適していないのはなぜですか?



• 時間がかかる: 手動による方法では、多くの場合、タスクの実行に多くの時間と労力がかかります。 これは、忙しいスケジュールを抱えているユーザーや、すぐに結果を必要とするユーザーにとっては現実的ではない可能性があります。

• 必要な専門知識: 手動による方法の中には、効果的に実行するために技術的な知識や特定のスキルが必要な場合があります。 必要な専門知識を持たないユーザーは、特定のタスクを手動で実行することが困難または不可能である可能性があります。

• エラーが発生しやすい: 手動タスクでは人的エラーが発生しやすく、結果が不正確または不完全になります。 これは、細部への注意が重要な複雑なタスクや繰り返しのタスクに特に当てはまります。

• 大規模なタスクでは非効率的: 大量のデータやタスクを扱う場合、手動による方法は非効率的で非実用的になります。 完了までに長い時間がかかるだけでなく、結果に不一致や一貫性のない結果が生じる可能性もあります。

• 機能の制限: 手動による方法には、自動ツールやソフトウェアが提供できるすべての機能が備わっているわけではありません。 これにより、ユーザーが望ましい結果を達成したり、高度な機能にアクセスしたりすることが制限される可能性があります。

• 個人への依存: 手動による方法では、多くの場合、タスクの実行を特定の個人に依存します。 これにより依存関係が生じ、チームメンバー間で作業を委任したり分散したりすることが困難になる可能性があります。

• スケーラビリティの欠如: 手動による方法は、タスクの量や複雑さが増加するにつれてうまく拡張できない可能性があります。 進捗状況の管理と追跡が難しくなり、遅延、エラー、または不完全なタスクが発生します。

続きを読む ：- https://www.wholeclear.com/converter/excel-to-vcf/

連絡先リストを Excel から vCard または .vcf ファイルに変換するための特別なソリューション

データベース全体を確実に保護しながら、Excel の連絡先を .vcf ファイルに変換するプロセスを合理化するサードパーティのソリューションが利用可能です。 このようなソリューションを利用すると、確実に時間を節約し、効率を高めることができます。

従うべき手順は次のとおりです。

• プログラムをダウンロードして起動した後、[参照] タブを見つけてクリックします。
• ファイルを参照し、変換するファイルを選択します。
• 選択したファイルのプレビューが表示されます。この場合は、VCF ファイル形式を選択します。
• 最後に、「今すぐ変換」ボタンを押して、変換プロセス。

結論

確かに、データの安全性を保証し、すべての詳細と情報を保持し、時間を節約するソリューションを選択することは、変換プロセスを成功させるために非常に重要です。サードパーティのツールを使用すると、わずかな時間内でファイルを変換できます。 したがって、Excel ファイルから vCard への変換を実行するには、正しい決定を下す必要があります。
",0,0,0,Excel,vCard,連絡先リストを Excel から vCard または .vcf ファイルに変換するにはどうすればよいですか?,,,1,0,,christanglina84,17,,,,,3631009,https://lh3.googleusercontent.com/a/ACg8ocLoEwjv-b3OQtDb16DdY4HLkk441-jqxahMOKZUy2PK=s96-c,False,,,,から,,
"## 目次
|章|タイトル|備考|
|:--|:--|:--|
||[基本情報合格までの軌跡](https://qiita.com/drafts/c500e6249cdf5241ad4c/edit#%E5%9F%BA%E6%9C%AC%E6%83%85%E5%A0%B1%E5%90%88%E6%A0%BC%E3%81%BE%E3%81%A7%E3%81%AE%E8%BB%8C%E8%B7%A1)||
||[落ちているときの記事](https://qiita.com/drafts/c500e6249cdf5241ad4c/edit#%E8%90%BD%E3%81%A1%E3%81%A6%E3%81%84%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AE%E8%A8%98%E4%BA%8B)|
||[結果](https://qiita.com/drafts/c500e6249cdf5241ad4c/edit#%E7%B5%90%E6%9E%9C)||
||[合格した勉強方法　午前](https://qiita.com/drafts/c500e6249cdf5241ad4c/edit#%E5%90%88%E6%A0%BC%E3%81%97%E3%81%9F%E5%8B%89%E5%BC%B7%E6%96%B9%E6%B3%95%E5%8D%88%E5%89%8D)||
||[午前の勉強方法](https://qiita.com/drafts/c500e6249cdf5241ad4c/edit#%E5%8D%88%E5%89%8D%E3%81%AE%E5%8B%89%E5%BC%B7%E6%96%B9%E6%B3%95)||
||[合格した勉強方法　午後](https://qiita.com/drafts/c500e6249cdf5241ad4c/edit#%E5%90%88%E6%A0%BC%E3%81%97%E3%81%9F%E5%8B%89%E5%BC%B7%E6%96%B9%E6%B3%95%E5%8D%88%E5%BE%8C)||
||[午後の勉強方法](https://qiita.com/drafts/c500e6249cdf5241ad4c/edit#%E5%8D%88%E5%BE%8C%E3%81%AE%E5%8B%89%E5%BC%B7%E6%96%B9%E6%B3%95)||


## 基本情報合格までの軌跡
まず2回落ちているので、下記に改善点を模索した記事を貼ります

## 落ちているときの記事
https://qiita.com/Emuri/items/9eea85f54f655d8791bb



## 結果
午前 680
午後 685
でした！
![情報処理技術者試験・情報処理安全確保支援士試験 マイページ - Google Chrome 2023_12_20 7_26_06.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2734152/d471d17a-7cc6-07e3-28da-92ec831379db.png)


結果公開前になっていますが、この点数が変わったことがないのでほぼ確定です。


## 合格した勉強方法　午前

やはり過去問道場一択。

https://www.fe-siken.com/fekakomon.php

最近メンバーシップが始まりましたが、入らなくても全然受かります。
午前はいかにイメージしながら記憶に焼き付けれるかの勝負になります。

## 午前の勉強方法

1. 分野指定で基礎理論、アルゴなど一つずつ選択して、
 [試験回を指定して絞り込む]を選択し、12回分選択します。

![基本情報技術者過去問道場｜基本情報技術者試験.com - Google Chrome 2023_12_21 19_12_15.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2734152/638bfe0d-f672-b2f4-8d30-d120cc4b6839.png)


理由は同じ単語でも違う問題が出るので、理解に時間がかからず、記憶もしやすいからですね。
間違えた問題は、スクリーンショットを撮ったり、赤チェックし、復習しました。
記憶勉強は夜にやり朝にもう一度復習しました。これの繰り返しです。


## 合格した勉強方法　午後
過去問道場とudemyです

https://www.fe-siken.com/fekakomon.php

https://www.udemy.com/


udemyは石田さんの講座を購入しました。

https://www.udemy.com/course/kihon_joho_b/

## 午後の勉強方法
1. 石田さんの基本情報講座を見ながら、理解できるまで何度も復習し、深くまで理解する
（わからないときは、講師に聞くことができます）

1. サンプル問題を解いて、間違ったところを記憶するのではなく、理解する。
（理解しないと、実際の試験で分からない問題が出たときに対応できず、問題を倒すことができない）
1. 理解するまで何度も試験を解く。
1. 実際の試験時間で解く


## 終わりに


他の授業を聞いてもいいと思いますが、基本情報は理解しないと受かる確率は格段に低くなるので、理解中心の講座にしてもいいと思います。


 

",0,0,0,基本情報技術者試験,,基本情報3回目で合格した話,"こんにちはエムリです。
phpとLaravelのエラーや勉強履歴を載せています。
間違ってることもありますのでその時は、コメントして下さい。
よろしくお願いします。",,32,2,Emuridesu,Emuri,7,,,,,2734152,https://avatars.githubusercontent.com/u/107834994?v=4,False,,,,,,
"# はじめに

この記事は [2023 年の MDN 翻訳 Advent Calendar](https://qiita.com/advent-calendar/2023/mdn-translation-community-japan) 向けに作成したものです。

こんにちは。debiru です。ネタが尽きたのでアドベントカレンダーが空いてしまっています。

今日は適当に思いついた HTML Form 周りの挙動についてお話したいと思います。

# `input[type=""text""]` で Enter キーを押すとサブミットされるのを防止する

```html
<form action=""https://params.lavoscore.org/"" method=""post"">
  <ul>
    <li><input type=""text"" name=""name"" value=""Alice""></li>
    <li><button type=""submit"">submit</button></li>
  </ul>
</form>
```

このような HTML フォームがあるとき、`input[type=""text""]` の編集中に Enter キーを押すと、フォームがサブミットされてしまいます。この挙動を防ぐにはどうしたらよいでしょうか。

## `input` 要素の `keydown` イベントを監視する

Enter キーが押されてもサブミットしないようにイベントハンドラで制御するという方法です。

```js
(function() {
  'use strict';

  function delegateEvent(selector, type, listener, options) {
    if (options == null) options = false;
    document.addEventListener(type, evt => {
      for (let elem = evt.target; elem && elem !== document; elem = elem.parentNode) {
        if (elem.matches(selector)) return listener.call(elem, evt);
      }
    }, options);
  }

  delegateEvent('input', 'keydown', evt => {
    if (evt.key === 'Enter') evt.preventDefault();
  });
}());
```

この方法が一般的には用いられているかと思います。しかし別の方法も存在します。

## `disabled` なサブミットボタンを先頭に設置する

<p class=""codepen"" data-height=""400"" data-default-tab=""html,result"" data-slug-hash=""QWoLXBo"" data-user=""arcxor"" style=""height: 400px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"">
  <span>See the Pen <a href=""https://codepen.io/arcxor/pen/QWoLXBo"">
  Form prevent submit by Enter key</a> by arcxor (<a href=""https://codepen.io/arcxor"">@arcxor</a>)
  on <a href=""https://codepen.io"">CodePen</a>.</span>
</p>
<script async src=""https://cpwebassets.codepen.io/assets/embed/ei.js""></script>

`<form>` の子孫要素として最初に登場するサブミットボタンを `disabled` にするだけです。

```html
<button type=""submit"" disabled style=""display: none;""></button>
```

`form` にはデフォルトボタンという概念があり、`form` 要素内に最初に登場するサブミットボタンがデフォルトボタンとして扱われます。

- https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#implicit-submission

> - A form element's default button is the first submit button in tree order whose form owner is that form element.
> - If the user agent supports letting the user submit a form implicitly (for example, on some platforms hitting the ""enter"" key while a text control is focused implicitly submits the form), then doing so for a form, whose default button has activation behavior and is not disabled, must cause the user agent to fire a click event at that default button.

拙訳：

- フォーム要素のデフォルトボタンは、そのフォーム要素がルートとなる構文木の順序において最初に登場する送信ボタンです。
- ユーザーエージェントが、ユーザーに暗黙的にフォームを送信させることをサポートしている場合（例えば、あるプラットフォームでは、テキストコントロールがフォーカスされている間に ""enter"" キーを押すと、暗黙的にフォームが送信されます）、デフォルトボタンがアクティブな振る舞いを持ち、無効化されていないフォームに対してこれを行うと、ユーザーエージェントはそのデフォルトボタンでクリックイベントを発生させなければなりません。

つまり、デフォルトボタンを `disabled` にしておくことで、Enter キーが押された場合にフォームのサブミットが行われないようにするという方法です。

しかし、どうやら Safari ではこの方法は効果がないようです。

以下の関連記事もありますが、これ、仕様的にどうなっているのか、なぜ Safari では無視されるのかについてお分かりの方がいたらぜひコメント欄で教えてください。

### 関連記事

- [送信ボタンがdisabledのときにテキスト入力欄でEnterを押すと、フォームはどうなるか](https://qiita.com/kazutosato/items/886fc3d19e65c68d1824)

# HTML Form の POST リクエストを JavaScript で再現する方法

```html
<form action=""https://params.lavoscore.org/"" method=""post"">
  <ul>
    <li><input type=""text"" name=""name"" value=""Alice""></li>
    <li><input type=""text"" name=""message"" value=""&lt;xmp&gt;""></li>
    <li><button type=""submit"">submit</button></li>
  </ul>
</form>
```

上記のような `name`, `message` をパラメータとして持つフォームを単純にサブミットすると、サーバーサイドでは次のようなパラメータが受け取れます。以下は PHP で処理した例です。

```json
{
  ""headers"": {
    ""Content-Type"": ""application/x-www-form-urlencoded""
  },
  ""body"": ""name=Alice&message=%3Cxmp%3E"",
  ""post"": {
    ""name"": ""Alice"",
    ""message"": ""<xmp>""
  },
  ""get"": [],
  ""files"": []
}
```

JavaScript の処理で、この POST リクエストと同等のリクエストを送る方法は分かるでしょうか。今どきは `XMLHttpRequest (XHR)` ではなく `fetch` という新しい API が存在しているので `fetch` を使いましょう。

## `fetch` の第 2 引数に `{ body: params }` を与えてみる

```js
(function() {
  'use strict';

  async function doFetch() {
    const url = 'https://params.lavoscore.org/';

    const params = {
      name: 'Alice',
      message: '<xmp>',
    };

    const options = {
      method: 'POST',
      body: params,
    };

    const obj = await fetch(url, options).then(response => response.json());
    console.log(obj);
  }

  document.addEventListener('DOMContentLoaded', doFetch);
}());
```

`body` に `params` オブジェクトを直接指定した例ですが、これはうまくいきません。実行してみると、以下のようなレスポンスが返ります。HTTP リクエストボディが `[object Object]` という文字列になってしまっています。

```json
{
  ""headers"": {
    ""Content-Type"": ""text/plain;charset=UTF-8""
  },
  ""body"": ""[object Object]"",
  ""post"": [],
  ""get"": [],
  ""files"": []
}
```

`body` パラメータには、文字列またはサポートされている適切なデータ型を与える必要があります。

## `application/json` な値を与えてみる

```js
(function() {
  'use strict';

  async function doFetch() {
    const url = 'https://params.lavoscore.org/';

    const params = {
      name: 'Alice',
      message: '<xmp>',
    };

    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(params),
    };

    const obj = await fetch(url, options).then(response => response.json());
    console.log(obj);
  }

  document.addEventListener('DOMContentLoaded', doFetch);
}());
```

`options` に `headers['Content-Type']` を追加して、`body` の値を文字列（JSON）とすることで、JSON データを HTTP リクエストボディに与えることができます。サーバーサイドでは以下のように値を受け取ることができます。

```json
{
  ""headers"": {
    ""Content-Type"": ""application/json""
  },
  ""body"": ""{\""name\"":\""Alice\"",\""message\"":\""<xmp>\""}"",
  ""post"": [],
  ""get"": [],
  ""files"": []
}
```

しかしこれでは PHP の場合、`$_POST` としては値を受け取ることができませんね。

### Blob として JSON データを与える

`fetch` の第 2 引数 `options` として `headers['Content-Type']` を明記したくない場合は、次のような方法もあります。

```js
(function() {
  'use strict';

  async function doFetch() {
    const url = 'https://params.lavoscore.org/';

    const params = {
      name: 'Alice',
      message: '<xmp>',
    };

    const options = {
      method: 'POST',
      body: new Blob([JSON.stringify(params)], {type: 'application/json'}),
    };

    const obj = await fetch(url, options).then(response => response.json());
    console.log(obj);
  }

  document.addEventListener('DOMContentLoaded', doFetch);
}());
```

## `multipart/form-data` な `FormData` を使ってみる

JavaScript には `FormData` インターフェイスが存在しています。

```js
(function() {
  'use strict';

  function makeDataAsFormData(obj) {
    const formData = new FormData();
    Object.keys(obj).forEach(key => formData.append(key, obj[key]));
    return formData;
  }

  async function doFetch(makeDataFunc) {
    const url = 'https://params.lavoscore.org/';

    const params = {
      name: 'Alice',
      message: '<xmp>',
    };

    const options = {
      method: 'POST',
      body: makeDataAsFormData(params),
    };

    const obj = await fetch(url, options).then(response => response.json());
    console.log(obj);
  }

  document.addEventListener('DOMContentLoaded', doFetch);
}());
```

これを介すと、次のようなレスポンスが受け取れます。

```json
{
  ""headers"": {
    ""Content-Type"": ""multipart/form-data; boundary=---------------------------29960240541939911991501528013""
  },
  ""body"": """",
  ""post"": {
    ""name"": ""Alice"",
    ""message"": ""<xmp>""
  },
  ""get"": [],
  ""files"": []
}
```

`FormData` を `body` として与えると、`Content-Type` は `multipart/form-data` として扱われます。この方法ならサーバーサイドで PHP の場合 `$_POST` として値を処理することができます。

なお、この方法を使う場合、明示的に `fetch` の第 2 引数として `headers['Content-Type']` を指定してはいけません。指定した場合、`boundary` が設定されず、サーバーサイドで値を適切に受け取ることができなくなってしまいます。

### 関連記事

- [fetch で multipart/form-data を送る時は Content-Type を指定してはいけない](https://zenn.dev/kariya_mitsuru/articles/25c9aeb27059e7)

## `application/x-www-form-urlencoded` な `URLSearchParams` を使う

```js
(function() {
  'use strict';

  async function doFetch(makeDataFunc) {
    const url = 'https://params.lavoscore.org/';

    const params = {
      name: 'Alice',
      message: '<xmp>',
    };

    const options = {
      method: 'POST',
      body: new URLSearchParams(params),
    };

    const obj = await fetch(url, options).then(response => response.json());
    console.log(obj);
  }

  document.addEventListener('DOMContentLoaded', doFetch);
}());
```

`URLSearchParams` を `body` として与えると、`Content-Type` は `application/x-www-form-urlencoded` として扱われます。この方法ならサーバーサイドで PHP の場合 `$_POST` として値を処理することができます。

これを介すと、次のようなレスポンスが受け取れます。

```json
{
  ""headers"": {
    ""Content-Type"": ""application/x-www-form-urlencoded;charset=UTF-8""
  },
  ""body"": ""name=Alice&message=%3Cxmp%3E"",
  ""post"": {
    ""name"": ""Alice"",
    ""message"": ""<xmp>""
  },
  ""get"": [],
  ""files"": []
}
```

このレスポンスは、JavaScript を介さずに HTML Form をサブミットしたときと同等のレスポンスになっています。つまり、JavaScript で `application/x-www-form-urlencoded` な POST リクエストを送りたい場合は、この方法が適しています。

## 試してみる

<p class=""codepen"" data-height=""600"" data-default-tab=""html,result"" data-slug-hash=""PoLYrEe"" data-user=""arcxor"" style=""height: 600px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;"">
  <span>See the Pen <a href=""https://codepen.io/arcxor/pen/PoLYrEe"">
  POST Request by JavaScript</a> by arcxor (<a href=""https://codepen.io/arcxor"">@arcxor</a>)
  on <a href=""https://codepen.io"">CodePen</a>.</span>
</p>
<script async src=""https://cpwebassets.codepen.io/assets/embed/ei.js""></script>

# さいごに

HTML Form 関連のお話でした。JavaScript で連想配列（オブジェクト）のパラメータを POST（または GET）として `fetch` でリクエストするには、実は少し工夫が必要だったのです。自分で `FormData` なり `URLSearchParams` を用意して `body` に値を与えなければなりません。

というわけで、既に 12 月 21 日ですが、この記事は [2023 年の MDN 翻訳 Advent Calendar](https://qiita.com/advent-calendar/2023/mdn-translation-community-japan) の 20 日の記事ということで公開しておこうと思います。21 日の記事はどうするんでしょうねぇ。

おわり。
",1,1,0,HTML,JavaScript,HTML Form で Enter キーによるサブミットを防止する方法、JavaScript で POST する方法,HTMLには魂が宿っている,,0,4,,debiru,16,,,,,178936,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/178936/profile-images/1557828301,False,,https://debiru.net,,MDN,post,
"## はじめに

時系列データはどこにでもあります。株価や天候パターンから売上高やセンサーデータまで、私たちの生活の様々な場面で重要な役割を果たしています。過去の時系列データに基づいて将来の値を予測できることは、情報に基づいた意思決定を行う上で非常に貴重です。この記事では、Deep Java Library（DJL）とGridDBを使って時系列データを予測する方法を探ります。

## 時系列データの特徴

時系列データとは、時系列に並んだデータのことで、各データポイントは特定のタイムスタンプに関連付けられています。このデータ形式は金融、ヘルスケア、IoTなど様々な領域で普及しています。効果的な時系列予測を行うには、このような時間的パターンを捉え、理解できるツールやテクニックが必要です。

## Deep Java Library（DJL）の紹介

DJLはオープンソースのディープラーニング・ライブラリで、Java開発者にディープラーニングのパワーをもたらすように設計されています。訓練済みモデル、カスタムモデルを訓練するためのツール、TensorFlow、PyTorch、MXNetのような様々なディープラーニングフレームワークとのシームレスな統合を提供します。

## 時系列予測のためのディープラーニング

ディープラーニングは、複雑な時系列予測問題の解決に目覚ましい成果を示しています。DeepAR（Deep Autoregressive）のようなモデルは、複雑な時間依存関係を捉え、正確な予測を生成することができます。DJLは、このようなモデルを時系列予測タスクに簡単に実装、展開する方法を提供します。

## 時系列予測にDJLを使用する

時系列予測のためにDJLを使い始めるには、以下のライブラリをプロジェクトに追加する必要があります。プロジェクトが Maven に基づいていると仮定すると、POM ファイルの依存セクションにこれらを追加する必要があります。

```sh
        <dependency>
            <groupId>ai.djl</groupId>
            <artifactId>api</artifactId>
            <version>0.23.0</version>
        </dependency>
        <dependency>
            <groupId>ai.djl.timeseries</groupId>
            <artifactId>timeseries</artifactId>
            <version>0.23.0</version>
        </dependency> 
            <groupId>ai.djl.mxnet</groupId>
            <artifactId>mxnet-model-zoo</artifactId>
            <version>${djl.version}</version>
        </dependency>
        <!-- ONNXRuntime -->
        <dependency>
            <groupId>ai.djl.onnxruntime</groupId>
            <artifactId>onnxruntime-engine</artifactId>
            <version>${djl.version}</version>
        </dependency>
```

次に、環境をセットアップし、いくつかの重要なコンポーネントを理解する必要があります。以下のコード・スニペットを詳しく見てみましょう。

```java
// Import necessary libraries
import ai.djl.Model;
import ai.djl.ModelException;
import ai.djl.basicdataset.tabular.utils.Feature;
import ai.djl.inference.Predictor;
import ai.djl.metric.Metrics;
import ai.djl.ndarray.*;
import ai.djl.timeseries.Forecast;
import ai.djl.timeseries.TimeSeriesData;
import ai.djl.timeseries.dataset.FieldName;
import ai.djl.timeseries.dataset.TimeFeaturizers;
import ai.djl.timeseries.distribution.DistributionLoss;
import ai.djl.timeseries.distribution.output.DistributionOutput;
// ... other necessary imports ...

public class MonthlyProductionForecast {
    // Constants and configurations
    
    final static String FREQ = ""W"";
    final static int PREDICTION_LENGTH = 4;
    final static LocalDateTime START_TIME = LocalDateTime.parse(""2011-01-29T00:00"");
    final static String MODEL_OUTPUT_DIR = ""outputs"";
     public static void main(String[] args) throws Exception {
        Logger.getAnonymousLogger().info(""Starting..."");        
        startTraining();
        final Map result = predict();
        for (Map.Entry entry : result.entrySet()) {
            Logger.getAnonymousLogger().info(String.format(""metric: %s:\t%.2f"", entry.getKey(), entry.getValue()));
        }
    }
}
```

サンプルコードの完全なプロジェクトはこちらからアクセスできます： [GitHub リポジトリ][1]

上記のコードは、時系列予測アプリケーションのエントリーポイントです。このコードでは、構成を設定し、データをロードし、DJLを使用してDeepARモデルを学習します。これがどのように機能するのかを分解してみましょう。

*   必要なDJLライブラリをインポートし、時系列データの頻度、予測長、開始時間などの定数を定義します。

*   `main` メソッドは学習プロセスを開始し、GridDBデータベースに接続して時系列データをシードします。GridDBは分散型で拡張性の高いNoSQLデータベースであり、時系列データを効率的に格納することができます。

*   予測、トレーニングセットアップ、データロードのための様々なメソッドを定義しています。

## GridDB について

GridDBは、大量の時系列データを保存・管理するために設計された強力なデータベースシステムです。その高速なデータ取り込みとクエリ機能により、時系列予測アプリケーションに最適な選択肢となっています。

## GridDB への時系列データの格納

まず、プロジェクトでGridDBを使用できるようにするために、mavenの依存関係を追加する必要があります。

```sh
        <dependency>
            <groupId>com.github.griddb</groupId>
            <artifactId>gridstore-jdbc</artifactId>
            <version>5.3.0</version>
        </dependency>
        <dependency>
            <groupId>com.github</groupId>
            <artifactId>gridstore</artifactId>
            <version>5.3.0</version>
        </dependency>  
```

次に、やりたいことを実現するために、データベースに時系列データを投入する必要があります。GridDBDatasetクラスの `seedDatabase` メソッドで、GridDBデータベースに時系列データを投入します。データは2つのcsvファイルから読み込まれ、2つの別々のコンテナに格納されます。以下はそのコードです。

```java
  private static void seedDatabase() throws Exception {
          URL trainingData = Forecaster.class.getClassLoader().getResource(""data/weekly_sales_train_validation.csv"");
            URL validationData = Forecaster.class.getClassLoader().getResource(""data/weekly_sales_train_evaluation.csv"");
            String[] nextRecord;
            try ( GridStore store = GridDBDataset.connectToGridDB();  CSVReader csvReader = new CSVReader(new InputStreamReader(trainingData.openStream(), StandardCharsets.UTF_8));  CSVReader csvValidationReader = new CSVReader(new InputStreamReader(validationData.openStream(), StandardCharsets.UTF_8))) {
                store.dropContainer(TRAINING_COLLECTION_NAME);
                store.dropContainer(VALIDATION_COLLECTION_NAME);

                List columnInfoList = new ArrayList<>();

                nextRecord = csvReader.readNext();
                for (int i = 0; i < nextRecord.length; i++) {
                    ColumnInfo columnInfo = new ColumnInfo(nextRecord[i], GSType.STRING);
                    columnInfoList.add(columnInfo);
                }

                ContainerInfo containerInfo = new ContainerInfo();
                containerInfo.setColumnInfoList(columnInfoList);
                containerInfo.setName(TRAINING_COLLECTION_NAME);
                containerInfo.setType(ContainerType.COLLECTION);

                Container container = store.putContainer(TRAINING_COLLECTION_NAME, containerInfo, false);

                while ((nextRecord = csvReader.readNext()) != null) {
                    Row row = container.createRow();
                    for (int i = 0; i < nextRecord.length; i++) {
                        row.setString(i, nextRecord[i]);
                    }
                    container.put(row);
                }

                nextRecord = csvValidationReader.readNext();
                columnInfoList.clear();
                for (int i = 0; i < nextRecord.length; i++) {
                    ColumnInfo columnInfo = new ColumnInfo(nextRecord[i], GSType.STRING);
                    columnInfoList.add(columnInfo);
                }

                containerInfo = new ContainerInfo();
                containerInfo.setName(VALIDATION_COLLECTION_NAME);
                containerInfo.setColumnInfoList(columnInfoList);
                containerInfo.setType(ContainerType.COLLECTION);

                container = store.putContainer(VALIDATION_COLLECTION_NAME, containerInfo, false);
                while ((nextRecord = csvValidationReader.readNext()) != null) {
                    Row row = container.createRow();
                    for (int i = 0; i < nextRecord.length; i++) {
                        String cell = nextRecord[i];
                        row.setString(i, cell);
                    }
                    container.put(row);
                }
            }
    }
```

## DJL と GridDB の統合

DJLとGridDBはシームレスに連携します。GridDBに接続して時系列データにアクセスし、DJLを使用して予測モデルを構築、学習、デプロイします。`GridDBDataset` クラスは、GridDBデータセットとやり取りするために必要な機能を提供します。

DJLのTimeSeriesDatasetのカスタム実装を作成する必要があることがわかりました。これは、DJLとカスタムデータリポジトリをシームレスに統合するための最も独創的な方法の1つです。その実装がこちらです。

```java
...
public class GridDBDataset extends M5Forecast {

    ...

    public static GridStore connectToGridDB() throws GSException {
        Properties props = new Properties();
        props.setProperty(""notificationMember"", ""127.0.0.1:10001"");
        props.setProperty(""clusterName"", ""defaultCluster"");
        props.setProperty(""user"", ""admin"");
        props.setProperty(""password"", ""admin"");
        return GridStoreFactory.getInstance().getGridStore(props);
    }

    public static class GridDBBuilder extends M5Forecast.Builder {
    ...

        private File fetchDBDataAndSaveCSV(GridStore store) throws GSException, FileNotFoundException {
           File csvOutputFile = new File(this.getContainerName()+ "".csv"");
            try ( GridStore store2 = store) {
                Container container = store2.getContainer(this.getContainerName());

                Query query = container.query(""Select *"");
                RowSet rowSet = query.fetch();

                int columnCount = rowSet.getSchema().getColumnCount();

                List csv = new LinkedList<>();
                StringBuilder builder = new StringBuilder();

                //Loan column headers
                ContainerInfo cInfo = rowSet.getSchema();
                for (int i = 0; i < cInfo.getColumnCount(); i++) {
                    ColumnInfo columnInfo = rowSet.getSchema().getColumnInfo(i);
                    builder.append(columnInfo.getName());
                    appendComma(builder, i, cInfo.getColumnCount());
                }
                csv.add(builder.toString());

                //Load each row
                while (rowSet.hasNext()) {
                    Row row = rowSet.next();
                    builder = new StringBuilder();
                    for (int i = 0; i < columnCount; i++) {
                        String val = row.getString(i);
                        builder.append(val);
                        appendComma(builder, i, columnCount);
                    }
                    csv.add(builder.toString());
                }
                try ( PrintWriter pw = new PrintWriter(csvOutputFile)) {
                    csv.stream()
                            .forEach(pw::println);
                }
            }
            return csvOutputFile;
        }

        public GridDBBuilder initData() throws GSException, FileNotFoundException {
            this.csvFile = fetchDBDataAndSaveCSV(this.store);
            return this;
        }

        @Override
        public GridDBDataset build() {
            GridDBDataset gridDBDataset = null;
            try {
                gridDBDataset = new GridDBDataset(this);
            } catch (GSException | FileNotFoundException ex) {
                Logger.getLogger(GridDBDataset.class.getName()).log(Level.SEVERE, null, ex);
            }
            return gridDBDataset;
        }

    }
}
```

## 高度な時系列予測モデルの構築

我々の予測能力の中核はDeepARモデルにあります。`startTraining` メソッドでDeepARモデルを作成、訓練、評価します。DJLの使いやすいAPIにより、モデル・アーキテクチャを定義し、時系列データで訓練することが容易になります。

```java
private static void startTraining() throws IOException, TranslateException, Exception {

        DistributionOutput distributionOutput = new NegativeBinomialOutput();

        Model model = null;
        Trainer trainer = null;
        NDManager manager = null;
        try {
            manager = NDManager.newBaseManager();
            model = Model.newInstance(""deepar"");
            DeepARNetwork trainingNetwork = getDeepARModel(distributionOutput, true);
            model.setBlock(trainingNetwork);

            List trainingTransformation = trainingNetwork.createTrainingTransformation(manager);

            Dataset trainSet = getDataset(Dataset.Usage.TRAIN, trainingNetwork.getContextLength(), trainingTransformation);

            trainer = model.newTrainer(setupTrainingConfig(distributionOutput));
            trainer.setMetrics(new Metrics());

            int historyLength = trainingNetwork.getHistoryLength();
            Shape[] inputShapes = new Shape[9];
            // (N, num_cardinality)
            inputShapes[0] = new Shape(1, 1);
            // (N, num_real) if use_feat_stat_real else (N, 1)
            inputShapes[1] = new Shape(1, 1);
            // (N, history_length, num_time_feat + num_age_feat)
            inputShapes[2] = new Shape(1, historyLength, TimeFeature.timeFeaturesFromFreqStr(FREQ).size() + 1);
            inputShapes[3] = new Shape(1, historyLength);
            inputShapes[4] = new Shape(1, historyLength);
            inputShapes[5] = new Shape(1, historyLength);
            inputShapes[6] = new Shape(1, 1, TimeFeature.timeFeaturesFromFreqStr(FREQ).size() + 1);
            inputShapes[7] = new Shape(1, 1);
            inputShapes[8] = new Shape(1, 1);
            trainer.initialize(inputShapes);
            int epoch = 10;
            EasyTrain.fit(trainer, epoch, trainSet, null);
        } finally {
            if (trainer != null) {
                trainer.close();
            }
            if (model != null) {
                model.close();
            }
            if (manager != null) {
                manager.close();
            }
        }
    }
```

それでは `startTraining` メソッドの各ステップを分解してみましょう。

ステップ 1：モデルの分布出力を定義します。この場合、NegativeBinomialOutputに設定します。分布出力は、モデルが予測を生成する方法を指定します。

ステップ 2: getDeepARModel メソッドを使用して、DeepAR 学習ネットワークを作成します。このネットワークは、DeepAR モデルのアーキテクチャを定義します。重要なのは、これがトレーニングネットワークであることを示すために true を渡すことです。

ステップ 3: データセットのトレーニング変換を定義します。これらの変換は入力データに適用され、トレーニングに備えます。データの正規化、特徴エンジニアリングなどが含まれます。

ステップ 4：getDatasetメソッドを使用してトレーニングデータセットを準備します。このデータセットはDeepARモデルの学習に使用されます。このデータセットには、過去のデータとトレーニングの目標値が含まれます。

ステップ 5: モデルをトレーニングするためのトレーナーを作成し、設定します。setupTrainingConfigメソッドは、損失関数、評価子、トレーニングリスナーを含むトレーニング構成を設定します。

ステップ 6：入力形状でトレーナを初期化します。このステップでは，トレーナがモデルに期待される入力形状を知っていることを確認します．inputShapes 配列には、モデルの様々な入力コンポーネントの形状が格納されます。

ステップ 7: 最後に、EasyTrain.fitメソッドを用いてモデルの学習を開始します。トレーニングエポック数、トレーニングデータセット（trainSet）、その他のオプションパラメータを指定します。トレーナはモデルのパラメータを最適化して、定義された損失関数を最小化し、トレーニングデータでの性能を向上させます。

全体として `startTraining` メソッドはモデルを設定し、データセットを準備し、トレーナを初期化することで、時系列予測のための DeepAR モデルを設定し、訓練します。このステップの組み合わせにより、過去の時系列データに基づいて正確な予測を行うためのモデルの効果的な学習が保証されます。

## 予測する

学習後、`predict` メソッドを使って学習したモデルに基づいて予測を行うことができます。このメソッドはモデルのパフォーマンスを評価するために、RMSSE (Root Mean Squared Scaled Error)、MSE (Mean Squared Error)、分位点損失などの様々なメトリクスを計算します。

## 結論

この記事では、DJLとGridDBを使用して時系列データを予測する方法を探りました。時系列データ、DJL、GridDB の主要概念を紹介し、時系列予測のための DeepAR モデルの構築と学習に関わるコードの詳細な説明を行いました。ディープラーニングのパワーとGridDBの効率性を組み合わせることで、時系列データから貴重な洞察を引き出し、ビジネスや研究のために情報に基づいた意思決定を行うことができます。DJLの使いやすさと柔軟性は、時系列予測の課題に取り組もうとするあらゆるJava開発者にとって貴重なツールとなっています。

結論として、DJLとGridDBの相乗効果により、時系列データの潜在能力を活用し、様々な領域でより良い意思決定を促進する正確な予測を提供することができます。本記事で得た知識により、最先端のディープラーニング技術と堅牢なデータベース・ソリューションを用いた時系列予測の旅に出るための十分な準備が整いました。

DJLとGridDBの融合は、時系列予測の世界に新たな可能性を開きます。この分野をより深く掘り下げることで、データ駆動型洞察の力と、それが金融からヘルスケアまで幅広い業界にどのような革命をもたらすかを発見できるでしょう。探求し続けましょう、学び続け、自信を持って未来を予測し続けましょう。

 [1]: https://github.com/ambagape/dij-griddb
",0,0,0,Java,データベース,Deep Java Library (DJL) と GridDB を用いた時系列データの予測,,,1,8,,GridDBnet,59,,,,,1739999,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/1739999/8d11ae4e2ebfcc0906713b885334e8af3f8a78cd/x_large.png?1636595318,False,,https://griddb.net/ja/,,ディープラーニング,GridDB,DJL
"※この記事は3-shake Advent Calendar 2023の21日目の記事です

# OpenTofuとは？
OpenTofuはTerraformからforkされた、OSSのインフラ構成管理ツールです。
Linux Foundation傘下のプロジェクトとして、MPL2ライセンスで正式リリースに向け開発が進められています。
※OpenTofuが生まれた背景に関してはこの記事では触れません。
※1/10に正式リリースされる予定みたいです。

https://twitter.com/linuxfoundation/status/1737310605818622356?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1737310605818622356%7Ctwgr%5E030aec39c1140f213f20bf89a7e1ff79af476556%7Ctwcon%5Es1_c10&ref_url=https%3A%2F%2Fgihyo.jp%2Farticle%2F2023%2F12%2Fdaily-linux-231221

公式サイト: https://opentofu.org
リポジトリ: https://github.com/opentofu/opentofu


# 使ってみる
今回は、terraformのチュートリアルにあるDockerでNginxを動かす例にOpenTofuを使用してみます。

https://developer.hashicorp.com/terraform/tutorials/docker-get-started
## インストール(MacOS)

```
$ brew install opentofu

$ tofu -v                                              
OpenTofu v1.6.0-rc1
on darwin_arm64
```
https://opentofu.org/docs/intro/install/
## 1. main.tfの作成
```terraform:main.tf
terraform {
  required_providers {
    docker = {
      source  = ""kreuzwerker/docker""
      version = ""3.0.2""
    }
  }
}

provider ""docker"" {}

resource ""docker_image"" ""nginx"" {
  name         = ""nginx:latest""
  keep_locally = false
}

resource ""docker_container"" ""nginx"" {
  image = docker_image.nginx.image_id
  name  = ""sample""
  ports {
    internal = 80
    external = 8000
  }
}
```

## 2. `tofu init` 
`terraform init`同様、`.terraform.lock.hcl`と`.terraform`が作成される。
```zsh 
$ tofu init                                                

Initializing the backend...

Initializing provider plugins...
- Finding kreuzwerker/docker versions matching ""~> 3.0.1""...
- Installing kreuzwerker/docker v3.0.2...
- Installed kreuzwerker/docker v3.0.2. Signature validation was skipped due to the registry not containing GPG keys for this provider

OpenTofu has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that OpenTofu can guarantee to make the same selections by default when
you run ""tofu init"" in the future.

OpenTofu has been successfully initialized!

You may now begin working with OpenTofu. Try running ""tofu plan"" to see
any changes that are required for your infrastructure. All OpenTofu commands
should now work.

If you ever set or change modules or backend configuration for OpenTofu,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
```


## 3. 差分確認
terraform同様、`tofu plan`で差分確認ができます。

```zsh
$ tofu plan                                                                       

OpenTofu used the selected providers to generate the following execution plan. Resource actions are
indicated with the following symbols:
  + create

OpenTofu will perform the following actions:

  # docker_container.nginx will be created
  + resource ""docker_container"" ""nginx"" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = ""sample""
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = ""no""
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + ports {
          + external = 8000
          + internal = 80
          + ip       = ""0.0.0.0""
          + protocol = ""tcp""
        }
    }

  # docker_image.nginx will be created
  + resource ""docker_image"" ""nginx"" {
      + id           = (known after apply)
      + image_id     = (known after apply)
      + keep_locally = false
      + name         = ""nginx:latest""
      + repo_digest  = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so OpenTofu can't guarantee to take exactly
these actions if you run ""tofu apply"" now.
```



## 4. リソース適用
terraform同様、`tofu apply`で適用ができます。
```zsh
$ tofu apply                                                                      
OpenTofu used the selected providers to generate the following execution plan. Resource actions are
indicated with the following symbols:
  + create

OpenTofu will perform the following actions:

  # docker_container.nginx will be created
  + resource ""docker_container"" ""nginx"" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (known after apply)
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = ""sample""
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = ""no""
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + ports {
          + external = 8000
          + internal = 80
          + ip       = ""0.0.0.0""
          + protocol = ""tcp""
        }
    }

  # docker_image.nginx will be created
  + resource ""docker_image"" ""nginx"" {
      + id           = (known after apply)
      + image_id     = (known after apply)
      + keep_locally = false
      + name         = ""nginx:latest""
      + repo_digest  = (known after apply)
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  OpenTofu will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

docker_image.nginx: Creating...
docker_image.nginx: Still creating... [10s elapsed]
docker_image.nginx: Creation complete after 16s [id=sha256:8aea65d81da202cf886d7766c7f2691bb9e363c6b5d9b1f5d9ddaaa4bc1e90c2nginx:latest]
docker_container.nginx: Creating...
docker_container.nginx: Creation complete after 1s [id=7d8166b585c6307a8c2ad3df5b422720a414bf29d12353348ce8bbd06e85677a]

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
```

これで、nginxコンテナが作成されたことが確認できました。

![スクリーンショット 2023-12-21 16.34.48.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2988422/356a96a7-a471-531a-222d-d40496a736eb.png)

## 5. リソース削除
これもterraform同様、`tofu destroy`で可能です。
```zsh
$ tofu destroy                                                                    
docker_image.nginx: Refreshing state... [id=sha256:8aea65d81da202cf886d7766c7f2691bb9e363c6b5d9b1f5d9ddaaa4bc1e90c2nginx:latest]
docker_container.nginx: Refreshing state... [id=7d8166b585c6307a8c2ad3df5b422720a414bf29d12353348ce8bbd06e85677a]

OpenTofu used the selected providers to generate the following execution plan. Resource actions are
indicated with the following symbols:
  - destroy

OpenTofu will perform the following actions:

  # docker_container.nginx will be destroyed
  - resource ""docker_container"" ""nginx"" {
      - attach                                      = false -> null
      - command                                     = [
          - ""nginx"",
          - ""-g"",
          - ""daemon off;"",
        ] -> null
      - container_read_refresh_timeout_milliseconds = 15000 -> null
      - cpu_shares                                  = 0 -> null
      - dns                                         = [] -> null
      - dns_opts                                    = [] -> null
      - dns_search                                  = [] -> null
      - entrypoint                                  = [
          - ""/docker-entrypoint.sh"",
        ] -> null
      - env                                         = [] -> null
      - group_add                                   = [] -> null
      - hostname                                    = """" -> null
      - id                                          = ""7d8166b585c6307a8c2ad3df5b422720a414bf29d12353348ce8bbd06e85677a"" -> null
      - image                                       = ""sha256:8aea65d81da202cf886d7766c7f2691bb9e363c6b5d9b1f5d9ddaaa4bc1e90c2"" -> null
      - init                                        = false -> null
      - ipc_mode                                    = ""private"" -> null
      - log_driver                                  = ""json-file"" -> null
      - log_opts                                    = {} -> null
      - logs                                        = false -> null
      - max_retry_count                             = 0 -> null
      - memory                                      = 0 -> null
      - memory_swap                                 = 0 -> null
      - must_run                                    = true -> null
      - name                                        = ""sample"" -> null
      - network_data                                = [
          - {
              - gateway                   = ""172.17.0.1""
              - global_ipv6_address       = """"
              - global_ipv6_prefix_length = 0
              - ip_address                = ""172.17.0.2""
              - ip_prefix_length          = 16
              - ipv6_gateway              = """"
              - mac_address               = """"
              - network_name              = ""bridge""
            },
        ] -> null
      - network_mode                                = ""default"" -> null
      - privileged                                  = false -> null
      - publish_all_ports                           = false -> null
      - read_only                                   = false -> null
      - remove_volumes                              = true -> null
      - restart                                     = ""no"" -> null
      - rm                                          = false -> null
      - runtime                                     = ""runc"" -> null
      - security_opts                               = [] -> null
      - shm_size                                    = 64 -> null
      - start                                       = true -> null
      - stdin_open                                  = false -> null
      - stop_signal                                 = ""SIGQUIT"" -> null
      - stop_timeout                                = 0 -> null
      - storage_opts                                = {} -> null
      - sysctls                                     = {} -> null
      - tmpfs                                       = {} -> null
      - tty                                         = false -> null
      - wait                                        = false -> null
      - wait_timeout                                = 60 -> null

      - ports {
          - external = 8000 -> null
          - internal = 80 -> null
          - ip       = ""0.0.0.0"" -> null
          - protocol = ""tcp"" -> null
        }
    }

  # docker_image.nginx will be destroyed
  - resource ""docker_image"" ""nginx"" {
      - id           = ""sha256:8aea65d81da202cf886d7766c7f2691bb9e363c6b5d9b1f5d9ddaaa4bc1e90c2nginx:latest"" -> null
      - image_id     = ""sha256:8aea65d81da202cf886d7766c7f2691bb9e363c6b5d9b1f5d9ddaaa4bc1e90c2"" -> null
      - keep_locally = false -> null
      - name         = ""nginx:latest"" -> null
      - repo_digest  = ""nginx@sha256:bd30b8d47b230de52431cc71c5cce149b8d5d4c87c204902acf2504435d4b4c9"" -> null
    }

Plan: 0 to add, 0 to change, 2 to destroy.

Do you really want to destroy all resources?
  OpenTofu will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

docker_container.nginx: Destroying... [id=7d8166b585c6307a8c2ad3df5b422720a414bf29d12353348ce8bbd06e85677a]
docker_container.nginx: Destruction complete after 1s
docker_image.nginx: Destroying... [id=sha256:8aea65d81da202cf886d7766c7f2691bb9e363c6b5d9b1f5d9ddaaa4bc1e90c2nginx:latest]
docker_image.nginx: Destruction complete after 0s

Destroy complete! Resources: 2 destroyed.
```

# Terraformからの移行
OpenTofuでは既存のTerraformのtfファイルやtfstateがそのまま使えます。
手順としては、stateのバックアップを取りつつ、OpenTofuでのinitをし、差分が出ないか確認するだけのようです。
今のところ、移行は簡単ですが、開発が進むにつれ、新機能の追加、Terraform ProviderやRegistryとの互換性が維持できなくなる可能性は十分ありそうです。

https://opentofu.org/docs/intro/migration/




# おわりに
TerraformのforkであるOpenTofuについて紹介しました。
Terraformとの使用感の差はなく、移行も簡単にできそうです。
今後のIaCの選択肢の一つにOpenTofuが入ってくるのかどうなのか、注目したいと思います。
",0,0,0,IaC,OpenTofu,OpenTofu使ってみた,,,0,0,,kai_3astb,1,,,,,2988422,https://pbs.twimg.com/profile_images/1320694164133011459/djNgBp9o_bigger.jpg,False,KAI21441756,,,,,
"# はじめに
えか太郎といいます。前回のキーボードにある記号の正式名称のまとめた記事を書くときに使ったマークダウンで表を生成するツールが便利だったので紹介します。

https://notepm.jp/markdown-table-tool

# 目的
マークダウン形式で文書を書いているとき表を使いたくなるときがある。しかしマークダウンで表を書くのは非常にめんどうくさい。以下に例を書きます。
#### 記述例
~~~
| test | test |
| ---- | ---- |
| cont | cont |
| cont | cont |
~~~

#### 出力結果
| test | test |
| ---- | ---- |
| cont | cont |
| cont | cont |

｜（パイプ）を何度も書くのは些か能率が悪すぎる。

### そんなあなたにノーコードツール
ほぼExcelのような操作感なので３分もあれば使いこなせるようになります。なのでおすすめ。

https://notepm.jp/markdown-table-tool

## 使い方（簡単すぎてほぼ書くことないけど）
![DB.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3120367/a9b69ee7-6659-8e14-8119-f9d6c9a57206.png)

（出典：GMOクラウドアカデミー）
### レコード（横一列）、カラム（縦一列）の追加
![スクリーンショット (38).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3120367/6e9bf0df-460a-c4ce-3b9a-6f58023edd74.png)
横一列を追加したい場合は左の赤枠、縦一列を追加したい場合上部の赤枠の中にある点にカーソルを乗せるとプラスマークが出る。
![スクリーンショット (39).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3120367/050279f4-1eec-f731-031f-8763ec31591c.png)
そのプラスを押せば追加できます。

### レコード（横一列）の削除
削除したい列の左側（下図だと青枠）をおすとその横一列を消すゴミ箱マークが出ます。
![スクリーンショット (41).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3120367/8b1c50c9-33fb-e881-368a-7f3a91fd5238.png)

![スクリーンショット (42).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3120367/1e989adf-6ae1-dfe6-d025-440684b9f971.png)
そのゴミ箱マークを押してレコードを削除してください。

### カラム（縦一列）の削除
削除したい列の上側（下図だと青枠）をおすとその横一列を消すゴミ箱マークが出ます。
![スクリーンショット (40).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3120367/e26ab573-25dd-6469-e373-37c064381699.png)

![スクリーンショット (43).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3120367/60585778-7bbf-be1f-d3e0-1a4da54b2a61.png)
そのゴミ箱のマークを押して削除してください。
### マークダウンに変換
表の下部にある「MarkDownテーブル生成」を押してください。
# おわりに
前回の記事もこれをつかって書きました。10分ほどで書けたので素晴らしかったです。

https://qiita.com/EkaTaro3/items/619b2988de3c39592391
",0,0,0,Markdown,表,マークダウン記法の表を生成するサイト[!],徳の高い現役JK（情報に興味ある高校生）。カフェイン依存を治したい。現在高校二年生なのでそろそろ受験を考えなければならない...九州大学工学部志望。,,1,1,KotaroUehara,EkaTaro3,21,,"Fukuoka,Japan",えか太郎,高校二年生,3120367,https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3120367/profile-images/1701261013,False,,,,便利,JK,
"## はじめに
### APIとは
Application Programing Interface　の略で
他社のサービス内の情報や機能を使えるようにする仕組み

リクエスト・・・こういう情報が欲しい！（APIを叩く）
レスポンス・・・欲しい情報

### Web APIとは
* HTTTP/HTTPSベースで実現するAPI
* Webを介してしようするAPI

## REST API
RESTは設計思想のこと
RESTの原則に従って実装されているAPIのこと
REpresentational State Transferの略
REST APIによる６つの制約条件
* クライアントサーバー
  * ユーザーインターフェースと処理を分離する
* 階層化システム
  * システムを階層に分離する
* コードオンデマンド
  * サーバーの更新によりクライアント側は自動でコードダウンロードし、実行する
* 統一インターフェース（情報の取得、更新、作成、削除はHTTPメソッドを利用）
* キャッシュ制御
  * クライアントとサーバーの通信回数と量を減らす
* ステートレス（リクエスト間で影響を及ぼさない）

上記制約を守ったAPIをREST APIという


## movieをリソースとしたCRUD操作のURI

movieというリソースを対象としたREST APIを考えます.

| 概要 |  URI  |  HTTP method  |
| ---- | ---- | ---- |
| 一覧取得,読み取り|  /movies  |  GET  |
| 特定リソース取得,読み取り|  /movies/12345  |  GET  |
| 新規リソース作成 |  /movies |  POST  |
| 更新 | /movies/12345  |  PUT  |
| 削除 |  /movies/12345 |  DELETE  |

HTTPメソッドはリソースに対する操作をしめします。
moviesはリソースを示し、movies/12345の数字の部分は特定のmovie(リソース)のidを表しています。
",0,0,0,初心者,勉強メモ,REST APIについて,,,2,1,k-mat438,k-mat438,8,,,,,3494258,https://avatars.githubusercontent.com/u/134833071?v=4,False,,,,REST-API,,
"![Riding the Wave_ Impact on Integrating 6.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3502713/b87a469d-581f-31e0-7a5e-e7e2bf2cbc60.png)

In the ever-evolving landscape of mobile app development, the integration of 5G technology is proving to be a transformative force, fundamentally altering how we connect and engage with mobile applications. Beyond the buzz of increased speed, the nuances of 5G extend to low latency, expanded bandwidth, and a plethora of opportunities for developers to craft more affluent, more responsive experiences.

This comprehensive exploration delves into the multifaceted [impact of 5G on mobile apps](https://quokkalabs.com/blog/how-5g-launch-impact-the-mobile-app-development/), unraveling its benefits and challenges, examining real-world success stories, and peering into the future of mobile app development.

## Overview of 5G and its Impact on Mobile App Development 

### Understanding the 5G Revolution

At its core, 5G represents the fifth generation of wireless technology, promising an exponential leap in connectivity and performance. The impact of 5G extends far beyond mere speed, encompassing low latency and increased bandwidth. This facilitates quicker data transfer and forms the bedrock for a new era of user interaction and app capabilities.  

The introduction of 5G opens possibilities, from enabling seamless augmented reality (AR) features to facilitating high-definition video streaming that transforms content consumption. As we delve into the heart of 5G integration, it becomes apparent that this technological evolution is poised to redefine the essence of user experience within mobile apps. 

## Benefits and Challenges of Integrating 5G into Apps
### Benefits 
<b>Enhanced Speed and Responsiveness</b>: The crux of 5G lies in its ability to provide unparalleled speed and responsiveness. Dive into how this low-latency technology reshapes the user experience, rendering buffering and lag obsolete. 

<b>Revolutionizing User Experiences</b>: The marriage of 5G and mobile apps transcends conventional boundaries. Explore the potential for immersive experiences, from AR applications that blend the digital and physical worlds to high-definition video streaming that sets a new standard for content consumption.

<b>Expanded Market Reach</b>: The widespread coverage of 5G networks is about more than just urban connectivity. Uncover how this technology breaks geographical barriers, providing seamless connectivity even in remote areas. This expanded reach opens up new horizons for app developers, tapping into previously untapped markets. 

### Challenges 

<b>Infrastructure Requirements</b>: While the promises of 5G are monumental, navigating the intricate landscape of infrastructure requirements poses a challenge. Explore the need for a robust infrastructure to support 5G and the demand for users to possess compatible devices.

<b>Compatibility Concerns</b>: As with any technological leap, compatibility issues can arise. Unpack the potential challenges that developers may face during the intricate process of integrating 5G into their apps. Understanding and addressing these challenges are crucial steps toward a successful transition.

## A Case Study: Showcasing Successful 5G Integration 

On a journey through a real-world case study that not only embraced the challenges of integrating 5G but turned them into opportunities. This illuminating example highlights the strategies employed, the hurdles overcome, and the positive outcomes. A successful implementation boosts confidence and serves as a beacon for other developers navigating the path of 5G integration. 

### Optimizing mHealth Apps with 5G
#### Revolutionizing Healthcare Connectivity 

In the healthcare sector, the impact of 5G is akin to a medical breakthrough. Delve into the transformative power of 5G in healthcare apps, enabling real-time data transmission, empowering remote patient monitoring, and fostering innovations that enhance patient care. 

#### Improving Patient Care Through Speed and Precision 

Zoom in on how the speed and low latency of 5G contribute to faster data transfer and the precision required in healthcare applications. Real-time monitoring, instant communication, and data-driven decisions become the new norm, revolutionizing patient care in unimaginable ways. 

## Future Trends: What's Next for 5G and Mobile Apps
### Anticipating the Next Wave of Innovation

The journey of 5G integration continues beyond its current capabilities. Peer into the crystal ball of [mobile app development](https://qiita.com/jackm/items/52e279c9c4cc1b71c2c2), exploring emerging trends fueled by the continued evolution of 5G. From AI-driven enhancements that learn and adapt to decentralized applications reshaping user privacy, the future is both exciting and unpredictable.

### Future Possibilities with 5G in App Development

Beyond immediate advancements, what possibilities does 5G unlock for the future of app development? This section unravels the synergies between 5G and the Internet of Things (IoT), exploring how their integration can birth entirely new paradigms. Imagine interconnected smart devices and a seamless digital ecosystem, paving the way for innovative applications and user experiences. 

## Mobile App Development Services and Trends 

### Choosing the Right Mobile App Development Company 

In the evolving landscape of [mobile app development services](https://quokkalabs.com/mobile-app-development), guidance on selecting the right partner is crucial. Beyond 5G integration, explore the parameters—expertise, adaptability, and a keen eye on industry trends. Choosing the right development company is akin to choosing a collaborator for the future, ensuring that your app stays at the forefront of technological evolution. 
 
### Exploring Internet of Things (IoT) Services in App Development
Zoom in on the intersection of 5G and IoT services, uncovering the potential for creating innovative and efficient mobile app solutions. The symbiotic relationship between these technologies opens doors to new realms of connectivity and user interaction, paving the way for a future where smart devices seamlessly integrate into our daily lives.

## Conclusion: Surfing into a New Era of Mobile App Excellence

In conclusion, integrating 5G into mobile apps is a multifaceted journey, unlocking unparalleled speed, connectivity, and possibilities. The impact is vast and transformative, from revolutionizing user experiences to optimizing healthcare apps and exploring new trends.  

As we ride this technological wave, embracing the challenges and anticipating future trends will position mobile apps at the forefront of innovation. So, saddle up and surf into a new era of mobile app excellence with the power of 5G, where each wave of innovation propels you further into the future of connectivity and user engagement.  

Thanks! 
",0,0,0,MobileApp,5G,Riding the Wave: Impact on Integrating 5G into Mobile Apps ,"Quokka Labs is a best software development company that offers cost-effective, feature-rich software solutions. ",quokkalabs,0,0,,ermawinter08,1,,"Noida, UP",Erma Winter,Quokkalabs,3502713,https://lh3.googleusercontent.com/a/AAcHTtfpPL8dBTieVuP6jyuiM_CoHY5KADu75rykbStmorMSFw=s96-c,False,,https://quokkalabs.com/,,mobileappdevelopment,5gtechnology,
"![Untitled design.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3528402/ac5ccef5-17ee-6bf9-a06b-793035b57db3.png)
https://vemexcaulking.ca/city/window-caulking-toronto-on/
Window Caulking Toronto: Enhancing Comfort and Efficiency in Homes and Offices
In the bustling city of Toronto, with its distinct four-season climate, ensuring that buildings are well-maintained is crucial for comfort, energy efficiency, and structural integrity. One key aspect of this maintenance, particularly in the face of Toronto's diverse weather conditions, is window caulking. In this comprehensive blog, we explore the significance of window caulking in Toronto, delving into its benefits and best practices.

The Importance of Window Caulking in Toronto
Toronto's climate ranges from hot, humid summers to cold, snowy winters. This weather variation puts a considerable strain on buildings, particularly on windows, which are critical for maintaining a comfortable indoor environment. Window caulking, the process of sealing joints and gaps around window frames, is essential for several reasons:

Enhanced Energy Efficiency
One of the primary advantages of window caulking is the improvement of a building's energy efficiency. Properly sealed windows prevent the escape of heated or cooled air, ensuring that HVAC systems work more efficiently. This not only keeps indoor temperatures stable and comfortable but also reduces energy bills—a significant consideration given Toronto's extreme temperature fluctuations.

Protection Against Weather Elements
In Toronto, where rain and snow are frequent, unsealed or poorly sealed windows can lead to water seepage, causing damage like wood rot, mold, and mildew. Effective caulking provides a barrier against these elements, protecting the building's structure and interior from moisture-induced damage.

Noise Reduction
Urban living in Toronto comes with its share of noise. Window caulking helps in muffling city sounds, contributing to a quieter and more peaceful indoor environment, which is particularly beneficial in densely populated areas and high-traffic zones.

Selecting the Right Caulk for Toronto's Climate
When it comes to window caulking in Toronto, selecting the right type of caulk is critical. Silicone-based caulks are often recommended for their durability and flexibility, essential qualities for withstanding Toronto's temperature extremes and humidity variations.

Professional Caulking Services in Toronto
While some homeowners and property managers might consider window caulking a DIY task, professional caulking services offer precision and expertise that ensure effective and long-lasting results. Expert caulkers in Toronto are equipped to handle the unique challenges posed by the local climate. They can provide comprehensive services, from assessing the condition of existing caulking to removing old caulking and applying new sealant.

Maintenance: Ensuring Longevity of Caulk
To ensure the longevity and effectiveness of window caulking, regular maintenance is essential. In Toronto's climate, it's advisable to inspect caulking at least once a year for signs of wear and tear. Early detection and repair of issues like cracks or gaps can significantly extend the life of window caulking.

The Broader Impact: Environmental and Economic
Apart from personal benefits like comfort and cost savings, effective window caulking in Toronto contributes to broader environmental efforts. By enhancing energy efficiency, it helps in reducing the carbon footprint of buildings, aligning with the city's sustainability goals. Moreover, it aids in minimizing the strain on energy resources, reflecting an environmentally conscious and economically prudent approach to building maintenance.

Conclusion
Window caulking is a vital aspect of building upkeep in Toronto. Its role in enhancing energy efficiency, protecting against weather elements, and reducing noise cannot be overstated. Whether for a residential home or a commercial building, investing in quality window caulking and regular maintenance is key to ensuring a comfortable, efficient, and durable space. As Toronto continues to grow and evolve, so does the importance of maintaining its buildings in top condition, with window caulking playing a significant role in this endeavor.
",0,0,0,windowcaulkingtoronto,,Window Caulking Toronto,Our professional window and door caulking services provide a reliable solution to seal and protect your home. ,https://www.facebook.com/WindowCaulkingToronto/,1,0,,vemexcaulkingweatherproofing,1,,"Canada, Ontario",Vemex Caulking  & Weatherproofing,Vemex Caulking & Weatherproofing,3528402,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3528402/f601c5ffa3cb6fea0930088ae7b8cc9075f1e550/x_large.png?1695629624,False,,https://vemexcaulking.ca/city/window-caulking-toronto-on/,,,,
"Introduction:



In today’s fast-paced and ever-evolving digital world, the significance of UI/UX design cannot be overstated. With technology becoming an integral part of our daily lives, user experience (UX) and user interface (UI) have emerged as crucial factors in determining the success of digital products and services. In this article, we will explore the various aspects of UI UX design services and how it impacts customer satisfaction, usability, conversion rates, competitive advantage, and more. Let’s delve into the world of UI/UX and discover why codelabs play a superior role in creating exceptional digital experiences.

Customer-Centric Approach:

User-Centric Design is the foundation of successful UI/UX design. It revolves around understanding the needs, preferences, and pain points of the target audience to create intuitive and engaging interfaces. Codelabs focus on aligning the design with the users’ expectations, ensuring a seamless and enjoyable digital journey.

Enhancing Mobile Apps and Website Design:

As mobile apps and websites become the primary channels for accessing information and services, their UI/UX design becomes critical. Superior codelabs leverage the potential of responsive design, ensuring that the interface adapts seamlessly to various devices and screen sizes. This approach improves user engagement and accessibility, regardless of the platform being used.

Building a Strong Brand Identity:

A well-crafted UI UX design services contributes significantly to establishing a strong brand identity. From the choice of colors, typography, and visual elements, every aspect of design communicates the brand’s values and personality. Codelabs play a vital role in maintaining consistency across digital touchpoints, enhancing brand recognition, and fostering a sense of trust among users.

Usability and User Engagement:

A user-friendly interface is fundamental to retaining customers and increasing user engagement. Codelabs prioritize usability by conducting thorough user testing and research, identifying pain points, and streamlining user flows. This, in turn, boosts customer satisfaction and encourages users to spend more time interacting with the digital product.

Improving Conversion Rates and Customer Retention:

A well-crafted UI/UX design has a direct impact on conversion rates. An intuitive and aesthetically pleasing interface encourages users to take desired actions, leading to higher conversions and increased revenue. Furthermore, a positive user experience promotes customer loyalty and retention, reducing churn rates and driving long-term business success.

Gaining a Competitive Advantage:

In today’s crowded digital landscape, a superior UI/UX design can provide a competitive edge. Codelabs enable designers to think creatively and innovate in their approach to design, setting their products apart from competitors. An exceptional user experience becomes a key differentiator and helps attract and retain customers in a highly competitive market.

The Power of Visual Design and Emotional Design:

Visual design is a critical aspect of UI/UX that goes beyond aesthetics. It encompasses the arrangement of elements, use of whitespace, and visual hierarchy to guide users through the interface seamlessly. Emotional design, on the other hand, aims to elicit positive emotions and connect with users on a deeper level. Codelabs empower designers to create visually appealing and emotionally resonant digital experiences.


Embracing Emerging Technologies:

UI/UX design is constantly evolving, and codelabs allow designers to incorporate cutting-edge technologies such as Voice User Interface (VUI), Augmented Reality (AR) UI/UX, and Virtual Reality (VR) UI/UX. Artificial Intelligence (AI) in UX design also opens new possibilities for personalization and data-driven design decisions.

Conclusion:

In conclusion, the importance of UI/UX design in today’s digital world cannot be ignored. Codelabs enable designers to adopt a user-centric approach, create exceptional experiences, and stay ahead in the competitive landscape. From enhancing customer satisfaction to boosting conversion rates and retention, superior UI/UX design plays a pivotal role in shaping the success of digital products and services. As technology continues to advance, codelabs will remain indispensable tools for designers striving to create meaningful and delightful digital interactions.
",0,0,0,UX,UI,Importance of UI / UX Design in Today’s Digital,,,1,0,,preetham02,1,,,,,3658878,https://secure.gravatar.com/avatar/1be5e27bfb75f83e9ccbddcdb4533775,False,,,,UXデザイン,,
"## はじめに

`Nuxt3` で `Firestore` を使う際に、いろいろと調べましたがスッキリとまとめられている記事がなかったのでまとめます。

前提として、 `Firebase` のプロジェクト作成などは完了している状態とします。

`Nuxt3` プロジェクトの構築などは、 [以前の記事](https://qiita.com/kurararara/items/ebe561016e4b486b7673) などを参考にしてください。



## Firebase のインストール

### インストール

`Firestore` を利用するために、 `Firebase` をインストールしていきます。

```shell
npm install firebase
```



### 初期設定

`plugins/firebase.client.ts` を作成します。
（ `plugins` フォルダがない場合は、フォルダも作成）

作成したファイルに次のように記述します。

```typescript:plugins/firebase.client.ts
import { initializeApp } from 'firebase/app'
import { defineNuxtPlugin } from '#app'

export default defineNuxtPlugin(() => {
  const config = useRuntimeConfig()

  const firebaseConfig = {
    
    // この部分に Firebase のプロジェクトの内容を記載する（下記参照）
    
  }

  const app = initializeApp(firebaseConfig)
})

```

![firebase-settings.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/135956/060d84fc-1792-f0b4-1e1c-00cc7feaba8d.png)


なお、 `Nuxt2` であれば `plugins` フォルダに作成したファイルを読み込むために、 `nuxt.config.ts` の設定が必要でしたが、 `Nuxt3` では自動で読み込みされます。
（便利！！）



### Composable の作成

設定は終わっているので、 `Firestore` の利用はいつでもできるのですが、各ページや、各コンポーネントで取得処理や登録処理を書くのは煩雑だと思います。

`Nuxt3` であれば `Composable` を利用するのがきれいだと（個人的には）思います。

#### Firestore にアクセスするための Composable の作成

`composables/useFirestore.ts` を作成し、次のように記載します。
（ `composables` フォルダがない場合は、フォルダも作成）



```typescript:composables/useFirestore.ts
import { getFirestore } from 'firebase/firestore'

/**
 * Firestore へのアクセス
 */
export const useFirestore = () => {
  const db = getFirestore()

  return {
    db,
  }
}
```



`useFirestore` はプロジェクトのどこからでもアクセス可能な `Composable` になりました。
現時点では、 `Firestore` インスタンスの初期化をする処理しか入っていません。



#### コレクションからデータを取得する関数を追加

例えば、ユーザー情報を管理する `user` コレクションがあるとします。
タイプとしてはこんな感じで。

```typescript
/**
 * [Firestore] `user` コレクション用のタイプ
 */
export type User = {
  firstName: string
  lastName: string
  birthday: string
  email: string
}
```

`user` コレクションからメールアドレスをキーに検索する場合は次のように関数を追加します。

```diff_typescript
import {
  getFirestore,
+ collection,
+ query,
+ where,
+ getDocs,
} from 'firebase/firestore'
+import { User } from './types/firestore'

/**
 * Firestore へのアクセス
 */
export const useFirestore = () => {
  const db = getFirestore()

+ /**
+  * [Firestore] `user` コレクションをメールアドレスで検索し、 `User` オブジェクトを返す
+  *
+  * @param {string | null} email メールアドレス
+  * @returns {Promise<User | null>} `User` オブジェクト
+  */
+ const getUser = async (email: string | null): Promise<User | null> => {
+   if (!email) {
+     return null
+   }
+
+   const q = query(collection(db, 'user'), where('email', '==', email))
+   const querySnapshot = await getDocs(q)
+   const users = querySnapshot.docs.map((doc) => {
+     return doc.data() as User
+   })
+
+   if (users.length) {
+     return users[0]
+   }
+   return null
+ }

  return {
    db,
+   getUser,
  }
}
```



### Composable の利用

メールアドレスからユーザー情報を検索する `Composable` ができましたので、呼び出してみましょう。

```vue
<script setup lang=""ts"">

const email = ref()
const user = ref<User>()

onMounted(async () => {
  
  // Firestore へアクセスする場合は、最低でも mount 後にしましょう
  user.value = await useFirestore().getUser(user.value.email)
})
    
</script>
```

`Composable` を利用してスッキリと記載ができました。



### useFirestore を充実させる

ユーザー情報を登録したい、といったように機能を追加したい場合は、 `useFirestore` に関数を追加していきましょう。



```diff_typescript
import {
  getFirestore,
  collection,
+ addDoc,
  query,
  where,
  getDocs,
} from 'firebase/firestore'
import { User } from './types/firestore'

/**
 * Firestore へのアクセス
 */
export const useFirestore = () => {
  const db = getFirestore()

  /**
   * [Firestore] `user` コレクションをメールアドレスで検索し、 `User` オブジェクトを返す
   *
   * @param {string | null} email メールアドレス
   * @returns {Promise<User | null>} `User` オブジェクト
   */
  const getUser = async (email: string | null): Promise<User | null> => {
    if (!email) {
      return null
    }

    const q = query(collection(db, 'user'), where('email', '==', email))
    const querySnapshot = await getDocs(q)
    const users = querySnapshot.docs.map((doc) => {
      return doc.data() as User
    })

    if (users.length) {
      return users[0]
    }
    return null
  }
  
+ /**
+  * [Firestore] `user` コレクションにドキュメントを登録する
+  *
+  * @param {User} user `User` オブジェクト
+  */
+ const addUser = async (user: User) => {
+   if (!user) {
+     return null
+   }
+
+    await addDoc(collection(db, 'user'), user)
+  }

  return {
    db,
    getUser,
+   addUser,
  }
}
```

あとは使うだけですね！

```typescript
await useFirestore().addUser(user.value)
```



## まとめ

`Nuxt3` での `Firestore` の利用についてまとめました。

ネットに断片的に情報はあるのですが、なかなかスッキリとまとまったものがなかったので、この記事をみて役に立つ人がいると嬉しいです！
",0,0,0,Firebase,Firestore,Nuxt3 での Firestore の利用,for(;;)alert('私が町長です。');,,74,51,kurarararaa,kurararara,53,,"Okayama, Japan",よわよわ,People Software Corporation,135956,https://qiita-image-store.s3.amazonaws.com/0/135956/profile-images/1493164697,False,,,,Nuxt,Nuxt3,
"## やりたいこと

特定のテーブルから条件指定してdumpファイルを出力したい

## 環境
Mysql 5.7.20

## 実行手順
コマンドプロンプトからmysqldump実行でファイル生成

```
mysqldump --skip-add-drop-table --no-tablespaces --hex-blob -uユーザー名 -p -h DBサーバIP DB名 テーブル名 --set-gtid-purged=OFF --default-character-set=utf8mb4 --where""抽出条件"" > ファイル名.sql
```


※つけたオプション
- --skip-add-drop-table 
テーブルを消さないためにdrop文を追加しない
- --no-tablespaces 
テーブルスペース情報を付与しない
- --hex-blob
対象テーブルがバイナリデータを持っていたので16進数に変換して文字化け防止
- --set-gtid-purged=OFF
gtidが不要だったのでOFF
- -u 
ユーザー指定
- -p 
パスワード指定
- -h 
ホスト指定
- --where
 負荷を下げるために条件指定
- --default-character-set
文字コード指定

## 終わりに
無事にdump成功。
（Workbenchでdumpファイルを生成しようと試みたが、where句で条件指定して生成する方法がよくわからなかったので時間の関係でコマンドで対処した。）
",0,0,0,DB,mysqldump,【Mysql】特定テーブルの指定したレコードのみをdump,現在受託開発企業で働いています。スキルアップのためにHappinessChainで勉強中。,,1,2,,kar_iari4_4,5,,,あり,,3570022,https://pbs.twimg.com/profile_images/1703003309718884352/Q64VXGig_bigger.jpg,False,akari4_4,,,mysql5.7,,
"## はじめに
DM機能実装にあたり、「多対多」のリレーションをモデルファイル上で構築していたところ、「Column not found」というエラーが出ました。

自分の場合、モデル（User.php）内の記述にタイポが存在したのが原因でした。

## 環境
Laravel 9.52.16

## 問題
```sql: MySQL
> $user->message_rooms()->get();

   Illuminate\Database\QueryException  SQLSTATE[42S22]: Column not found: 1054 Unknown column 'message_room_user.messsage_room_id' in 'field list' (SQL: select `message_rooms`.*, `message_room_user`.`user_id` as `pivot_user_id`, `message_room_user`.`messsage_room_id` as `pivot_messsage_room_id`, `message_room_user`.`created_at` as `pivot_created_at`, `message_room_user`.`updated_at` as `pivot_updated_at` from `message_rooms` inner join `message_room_user` on `message_rooms`.`id` = `message_room_user`.`messsage_room_id` where `message_room_user`.`user_id` = 3).
```

UserモデルとMessageRoomモデルの多対多のリレーションを確認しようとすると、このようなエラーが出る。

## 解決策
* モデル内のリレーション記述にタイポがあったので、それを修正する

```php: User.php（失敗例）
public function message_rooms()
    {
        return $this->belongsToMany(MessageRoom::class, 'message_room_user', 'user_id', 'messsage_room_id')->withTimestamps();
        // ""messsage_room_id""になっている
    }
```

```php: User.php（解決例）
public function message_rooms()
    {
        return $this->belongsToMany(MessageRoom::class, 'message_room_user', 'user_id', 'message_room_id')->withTimestamps();
    }
```

## まとめ
スペルミスなどのタイポによるエラーは、体感エラー箇所の特定が難しい気もします。

そもそも打ち間違えなければ良いだけの話…
",0,0,0,Laravel,,「Column not found」はモデルでのタイポを疑ってみる,2024年3月までにエンジニアになります！,,4,0,,Yuzaburo,17,,"Tokyo, Japan",,,3620668,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3620668/f08393c6e1e4a973aa97c2b6bbf7e06498dd9997/x_large.png?1701002710,False,Yuichiro1144373,,,,,
"# はじめに
AWS SOAのラボ試験対策の備忘録として投稿します。
今回はVPCフローログが設定してあることを確認するConfigルールの設定、フローログを作成していきます。
ついでにフローログの送信先となるS3バケットも作成していきます。

# Configルールの作成

1. Configコンソールに移動し、「ルール」→「ルールの追加」をクリックする
![WS000000.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/f401ebfa-0b7b-8408-fa6a-071b946695bf.jpeg)

1. ルールタイプの指定をする
    * ルールタイプの選択 → AWSによって管理されるルールの追加
    * AWSマネージド型ルール → vpc-flow-logs-enabled
![WS000001.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/45516001-a034-ccc7-68b9-54b852a04cb4.jpeg)

1. ルールの設定をする
    * 名前 → vpc-flow-logs-enabled
    * その他デフォルト
![WS000002.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/6bbfffe4-74de-6fa1-f938-9e81071f335f.jpeg)
![WS000003.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/7d19ce57-74c9-ce31-9caa-d1b3e2c49d33.jpeg)
![WS000004.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/ce1d4b54-6a70-b9ee-e1ab-35549bf9b479.jpeg)

1. 設定の確認をしてルールを追加する
![WS000005.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/fa938130-e38c-4551-ace6-6b3201d7a61c.jpeg)
![WS000006.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/04eb7607-2d5f-0d73-a11b-78a905750d36.jpeg)

1. Detective complianceを確認する
→ルールに準拠していないVPCがあると非準拠リソースとして表示される
![WS000007.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/c445b96f-6cfa-74fb-592a-e77156ca7a2e.jpeg)

# VPCフローログを作成する

### フローログ送信用のS3バケットを作成する

1. S3コンソールに移動し、バケットを作成する
![WS000008.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/13fa559c-65a0-07af-f81b-e27150b8b5b7.jpeg)

1. バケットの設定をする
    * バケット名 → my-configbucket
    * AWSリージョン → us-east-1
    * オブジェクト所有者 → ACL無効
    * パブリックアクセス → パブリックアクセスをすべてブロック
    * バージョニング → 無効にする
    * 暗号化 → 有効にする/SSE－S3
    * オブジェクトロック → 無効にする
![WS000015.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/c398b7d4-65b2-55e2-5395-a0fc6b2712fd.jpeg)
![WS000010.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/62d88e4d-8d52-f1d5-6449-8cee01aaf972.jpeg)
![WS000011.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/eb912612-b0f8-0f94-41f2-a604811c4562.jpeg)
![WS000012.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/3d2e6fed-9d34-6752-364a-7067748b1e85.jpeg)
![WS000013.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/fef2a21b-518e-84ee-82bf-063952ba6f9e.jpeg)
![WS000014.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/4788727d-35a8-5fdb-e8f4-eca5b1c756eb.jpeg)

1. バケットが作成されました
![WS000016.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/bd8321c2-c69f-8557-d41c-d3a2f48992d0.jpeg)

### ルール非準拠VPCのフローログを作成する

1. 作成したConfigルール[vpc-flow-logs-enabled]の画面に移動し、フローログを作成したいVPCを選択する
※非準拠リソースは2つあるが今回は1つだけ作成
![WS000017.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/889da2da-a375-d541-be38-0570e49120f4.jpeg)
![WS000018.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/18fb831e-18f3-1972-3886-19f175a02ae1.jpeg)

1. 詳細が表示されたら「リソースの管理」をクリックする
![WS000019.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/a0e9fa74-696c-e2e8-8962-85f8c0ef5204.jpeg)

1. VPCの画面に遷移するので、「アクション」→「フローログを作成」をクリックする
![WS000020.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/cb6eee3b-a0e2-10dd-e30a-02e6c68383c6.jpeg)

1. フローログの設定をしていく
    * 名前 → my-flow-log-01
    * 送信先 → Amazon S3バケットに送信
    * S3バケットARN → arn:aws:s3:::my-configbucket (さっき作成したバケットARN)
    * その他デフォルト
![WS000021.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/d0f3df47-fb11-caeb-6d27-11ad40f8d83a.jpeg)
![WS000022.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/f5517413-85be-e393-f54f-c7497deac1d4.jpeg)
![WS000023.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/015154c4-1127-b860-8d75-1ff9a651ed1f.jpeg)
![WS000024.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/a4b236d3-879f-c5b4-785c-40d3ab9a49ba.jpeg)

1. フローログが作成されました
![WS000025.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/b97c1eff-9dff-2c6a-9519-084835bad511.jpeg)

# Configルールの再評価

1. Configコンソールに戻り、ルールの再評価を行う
![WS000026.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/281532f9-fbf8-4abb-b60c-2956db18c341.jpeg)

1. 非準拠リソースが1つ減った！！
![WS000027.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/28d52f02-9e5a-4f46-7166-6345cc8a033d.jpeg)

1. 詳細を確認しても、非準拠リソースがなくなってます
![WS000028.JPG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2844260/7033f2c5-0bf7-d25b-20fc-60307f283d3b.jpeg)

無事フローログの確認Configルールとフローログの作成が完了しました！！！

# おわりに

Configルールは他にもいっぱいあるが、選べば説明文も出てくるから何とかなりそう
ただ英語だから読み取れるかどうか、、




",0,0,0,AWS,SOA,Configルールを設定して、VPCフローログを作成する,,,1,0,,xiaochun0001,11,,,,,2844260,https://secure.gravatar.com/avatar/a0d2ad665b9c82a980be5ddf87bac49d,False,,,,awsconfig,VPCFlowLogs,awsconfigrules
"#### はじめに

Ruby on Railsでの`new()`メソッドはオブジェクトのインスタンス化に中心的な役割を果たします。この記事では、`new()`メソッドの基本から応用まで、その使い方と重要性を深く掘り下げます。

#### new()メソッドの基本

- **機能**：
    
    - `new()`はRailsのモデルや他のオブジェクトに対して、新しいインスタンスを作成するために使います。
    - 例：`User.new(name: ""Alice"", email: ""alice@example.com"")`は、名前とメールアドレスを持つ新しい`User`インスタンスを生成します。
- **重要性**：
    
    - `new()`によって生成されたインスタンスは、データベースに保存される前にメモリ上に存在します。
    - これにより、データベースに保存する前にバリデーションを実行でき、データ整合性を保つことが可能になります。

#### new()メソッドの応用

- **複雑なデータ構造**：
    
    - `new()`は、ネストされた属性や関連するオブジェクトを持つ複雑なデータ構造を構築する際にも役立ちます。
    - 例：ユーザーが複数のアドレスを持つ場合、ユーザー作成時にアドレスの属性も同時に初期化できます。
- **条件分岐**：
    
    - `new()`メソッドを使用して、特定の条件に基づいてオブジェクトを異なる方法で初期化することが可能です。
    - 例：ユーザーの役割に応じて、異なる属性を持つユーザーオブジェクトを生成することができます。

#### new()メソッドの高度な利用

- **オーバーライド**：
    
    - `new()`メソッドは、必要に応じてオーバーライドして、カスタムの初期化ロジックを実装することができます。
    - これにより、特定のビジネスロジックやアプリケーションの要件に合わせたインスタンス生成が可能になります。
- **関連データの同時作成**：
    
    - 複数のモデルが関連している場合、`new()`を用いて関連データを一度に生成し、データの整合性を保つことができます。
    - 例：ユーザーを新規作成する際に、そのユーザーのプロフィールや設定も同時に生成することができます。

#### 結論

Ruby on Railsの`new()`メソッドは、データ整合性の維持、複雑なデータ構造の構築、条件に応じたオブジェクトのカスタマイズなど、幅広い用途で使用されます。このメソッドの理解と適切な使用により、Railsアプリケーションの開発がより柔軟で効率的になります。上記の高度な利用方法を参考にして、`new()`メソッドをより深く活用してみましょう。
",0,0,1,Ruby,Rails,Ruby on Railsのnew()メソッドについての詳細解説,,,0,0,,taichocop,6,,,,,2626248,https://secure.gravatar.com/avatar/658cf4737da7e85ae2fcc732044448c7,False,taichocop,,,,,
"#### はじめに

Ruby on Railsにおける`new()`メソッドは、オブジェクトのインスタンス化に不可欠なメソッドです。この記事では、`new()`メソッドの基本的な使い方、重要性、および応用例について詳しく解説します。

#### new()メソッドの基本

- **概要**：
    
    - `new()`メソッドは、Railsのモデルや他のオブジェクトを初期化するために使用されます。
    - このメソッドは新しいインスタンスを生成し、オプションで属性を初期化することができます。
- **使用法**：
    
    - 例えば、`User`モデルの新しいインスタンスを作成する場合、`User.new(name: ""Alice"", email: ""alice@example.com"")`のように記述します。
    - これにより、名前とメールアドレスが設定された`User`オブジェクトの新しいインスタンスが作成されます。

#### new()メソッドの重要性

- **データ整合性の保持**：
    
    - `new()`メソッドは、データベースに保存される前にオブジェクトをメモリ上に作成します。
    - これにより、バリデーションを通過する前にデータの整合性をチェックすることが可能になります。
- **柔軟なデータ操作**：
    
    - オブジェクトがデータベースに保存される前に、さまざまな方法でデータを操作することができます。
    - 例えば、オブジェクトの状態を変更したり、特定の条件に基づいて処理を行ったりすることが可能です。

#### new()メソッドの応用例

- **複雑なデータ構造の構築**：
    
    - `new()`メソッドは、関連するオブジェクトやネストされた属性を持つ複雑なデータ構造の構築にも使用されます。
    - 例えば、ユーザーが複数のアドレスを持つ場合、ユーザーオブジェクトを作成する際にアドレスの属性も同時に初期化することができます。
- **条件分岐による初期化**：
    
    - `new()`メソッドを使って、特定の条件に基づいて異なる方法でオブジェクトを初期化することも可能です。
    - 例えば、ユーザーの役割に応じて、異なる属性を持つユーザーオブジェクトを生成することができます。

#### 結論

`new()`メソッドは、Ruby on Railsにおいてオブジェクトを作成する際の基本的かつ強力なツールです。このメソッドを理解し、適切に使用することで、Railsアプリケーションの開発においてデータの整合性を保ちつつ、柔軟かつ効率的なデータ操作が可能になります。上記の応用例を参考に、より複雑なデータ構造やロジックを扱う際に`new()`メソッドを活用しましょう。
",0,0,1,Ruby,Rails,Ruby on Railsのnew()メソッドの基礎解説,,,0,0,,taichocop,6,,,,,2626248,https://secure.gravatar.com/avatar/658cf4737da7e85ae2fcc732044448c7,False,taichocop,,,,,
"「AI×映像制作」AIを映像制作に活用した事例を紹介

目次

■もはや生活の一部となったAIツール

■おすすめAIツール

■映像制作で活用されるAI技術：画像生成や全自動で撮影ができる

■映像制作で活用されるAI技術：動画編集のコストを削減できる

■映像制作で活用されるAI技術：動画の分析ができる

Iに映像制作を代行してもらいたいと考えたことはありませんか？映像制作や動画編集に関わる、プロ、アマチュア、フリーランスなどの方は、一度は考えたことがあるのではないでしょうか。

動画生成技術をはじめとしたAI技術はどの程度進化して、実際にどのように私たちの生活に生かされているのでしょうか？映像制作や動画編集とAIの協力が進む未来はあるのでしょうか？

近い将来、動画編集が完全に自動化される時代が訪れ、映像の解析技術が進んで様々な個人情報がマーケティングに利用される時代が来るかもしれません。現代に暮らす私たちにとっては、新しい技術であるAI技術は登場したばかりで、まだまだ手探りの状態で使っているというのが現実です。

世界的に注目を集めるAI技術をどのように活用して、その技術を日々の生活やビジネスに活用していけばよいのかがわからないといった所が本音ではないでしょうか。

今、AIをどのように活用することが、私たちに求められているのか、最新のAI技術を活用した映像制作の事例3つを元に紹介していきます。


▼さらに詳しく読む場合は、こちらからご覧ください。

https://fine-production.co.jp/column-10/

-----------------------------------------------


メインサイト
⇒https://fine-production.co.jp/
サブサイト
⇒https://peraichi.com/landing_pages/view/lp-fine-production
",0,0,0,AI,映像,「AI×映像制作」動画制作にAIは活用できるのか？おすすめAIツール＆活用事例を紹介,"千葉県松戸市のファインは
映像制作の企画から配信までをトータルサポート",,1,0,,iwabuchi1029fine,1,,千葉県松戸市,イワブチ,株式会社ファイン,3658850,https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/3658850/5a4ed27735f1093878165c15d3afd78991ef71e0/large.png?1703154651,False,,https://fine-production.co.jp/,,,,
